{
    "pipes": [
        {
            "name": "I18nPipe",
            "id": "pipe-I18nPipe-35dde531bddf63557ca7d8c0af2335c50a0f98d8f4e8233ada0c31c59ae92b356db63154e54f988f0ae6c19254455b52b9d3544967cdf99d5df83aaf0e6afa22",
            "file": "src/shared/i18n.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Temporarily duplicate this pipe</p>\n",
            "rawdescription": "\n\nTemporarily duplicate this pipe\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "p2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "p3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "i18n",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\n/**\n * Temporarily duplicate this pipe\n */\n@Pipe({\n  name: \"i18n\",\n})\nexport class I18nPipe implements PipeTransform {\n  constructor(private i18nService: I18nService) {}\n\n  transform(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.i18nService.t(id, p1, p2, p3);\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Animal",
            "id": "interface-Animal-9d00c929acd67f88b3f8bf1309900b58b6328e4a68fd1e1918e755d1ebd262b04e3139042708d9df4f1bdcc42c6a675675fd496736725813e3ea1e58a40e2c95",
            "file": "src/dialog/dialog.service.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DIALOG_DATA, DialogModule, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\nimport { SharedModule } from \"../shared\";\nimport { I18nMockService } from \"../utils/i18n-mock.service\";\n\nimport { DialogService } from \"./dialog.service\";\nimport { DialogComponent } from \"./dialog/dialog.component\";\nimport { DialogCloseDirective } from \"./directives/dialog-close.directive\";\nimport { DialogTitleContainerDirective } from \"./directives/dialog-title-container.directive\";\n\ninterface Animal {\n  animal: string;\n}\n\n@Component({\n  selector: \"app-story-dialog\",\n  template: `<button bitButton (click)=\"openDialog()\">Open Dialog</button>`,\n})\nclass StoryDialogComponent {\n  constructor(public dialogService: DialogService) {}\n\n  openDialog() {\n    this.dialogService.open(StoryDialogContentComponent, {\n      data: {\n        animal: \"panda\",\n      },\n    });\n  }\n}\n\n@Component({\n  selector: \"story-dialog-content\",\n  template: `\n    <bit-dialog dialogSize=\"large\">\n      <span bitDialogTitle>Dialog Title</span>\n      <span bitDialogContent>\n        Dialog body text goes here.\n        <br />\n        Animal: {{ animal }}\n      </span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\" (click)=\"dialogRef.close()\">Save</button>\n        <button bitButton buttonType=\"secondary\" bitDialogClose>Cancel</button>\n      </div>\n    </bit-dialog>\n  `,\n})\nclass StoryDialogContentComponent {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) private data: Animal) {}\n\n  get animal() {\n    return this.data?.animal;\n  }\n}\n\nexport default {\n  title: \"Component Library/Dialogs/Service\",\n  component: StoryDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        DialogCloseDirective,\n        DialogComponent,\n        DialogTitleContainerDirective,\n        StoryDialogContentComponent,\n      ],\n      imports: [SharedModule, ButtonModule, DialogModule, IconButtonModule],\n      providers: [\n        DialogService,\n        {\n          provide: I18nService,\n          useFactory: () => {\n            return new I18nMockService({\n              close: \"Close\",\n            });\n          },\n        },\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library\",\n    },\n  },\n} as Meta;\n\nconst Template: Story<StoryDialogComponent> = (args: StoryDialogComponent) => ({\n  props: args,\n});\n\nexport const Default = Template.bind({});\n",
            "properties": [
                {
                    "name": "animal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Animal",
            "id": "interface-Animal-305b4fa5e6775eca10092e358bd86f10b33dfa247d619685c7b8c2d10f12df598d19a486328de5b50ca07adbca4f42c18469c0f85d85575daf40c6166ca2e39b-1",
            "file": "src/dialog/simple-dialog.service.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DialogModule, DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { I18nMockService } from \"../utils/i18n-mock.service\";\n\nimport { DialogService } from \"./dialog.service\";\nimport { DialogCloseDirective } from \"./directives/dialog-close.directive\";\nimport { DialogTitleContainerDirective } from \"./directives/dialog-title-container.directive\";\nimport { SimpleDialogComponent } from \"./simple-dialog/simple-dialog.component\";\n\ninterface Animal {\n  animal: string;\n}\n\n@Component({\n  selector: \"app-story-dialog\",\n  template: `<button bitButton (click)=\"openDialog()\">Open Simple Dialog</button>`,\n})\nclass StoryDialogComponent {\n  constructor(public dialogService: DialogService) {}\n\n  openDialog() {\n    this.dialogService.open(StoryDialogContentComponent, {\n      data: {\n        animal: \"panda\",\n      },\n    });\n  }\n}\n\n@Component({\n  selector: \"story-dialog-content\",\n  template: `\n    <bit-simple-dialog>\n      <span bitDialogTitle>Dialog Title</span>\n      <span bitDialogContent>\n        Dialog body text goes here.\n        <br />\n        Animal: {{ animal }}\n      </span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\" (click)=\"dialogRef.close()\">Save</button>\n        <button bitButton buttonType=\"secondary\" bitDialogClose>Cancel</button>\n      </div>\n    </bit-simple-dialog>\n  `,\n})\nclass StoryDialogContentComponent {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) private data: Animal) {}\n\n  get animal() {\n    return this.data?.animal;\n  }\n}\n\nexport default {\n  title: \"Component Library/Dialogs/Service/Simple\",\n  component: StoryDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        StoryDialogContentComponent,\n        DialogCloseDirective,\n        DialogTitleContainerDirective,\n        SimpleDialogComponent,\n      ],\n      imports: [SharedModule, IconButtonModule, ButtonModule, DialogModule],\n      providers: [\n        DialogService,\n        {\n          provide: I18nService,\n          useFactory: () => {\n            return new I18nMockService({\n              close: \"Close\",\n            });\n          },\n        },\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library\",\n    },\n  },\n} as Meta;\n\nconst Template: Story<StoryDialogComponent> = (args: StoryDialogComponent) => ({\n  props: args,\n});\n\nexport const Default = Template.bind({});\n",
            "properties": [
                {
                    "name": "animal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Animal-1"
        }
    ],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-03812439161fc473a77425cacccb3af6d71ade146255f2d27ace841396c7a66d6579e3619ffa4090250d5e1cb57d949afdb541018bfe2a6a47af76752c933b64",
            "file": "src/dialog/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<C> | TemplateRef<C>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "DialogConfig<D | DialogRef<R, C>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DialogRef<R, C>",
                    "typeParameters": [
                        "R",
                        "D",
                        "C"
                    ],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<C> | TemplateRef<C>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "DialogConfig<D | DialogRef<R, C>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Dialog, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { ComponentType } from \"@angular/cdk/overlay\";\nimport { Injectable, TemplateRef } from \"@angular/core\";\n\n@Injectable()\nexport class DialogService extends Dialog {\n  override open<R = unknown, D = unknown, C = unknown>(\n    componentOrTemplateRef: ComponentType<C> | TemplateRef<C>,\n    config?: DialogConfig<D, DialogRef<R, C>>\n  ): DialogRef<R, C> {\n    config = {\n      backdropClass: [\"tw-fixed\", \"tw-bg-black\", \"tw-bg-opacity-30\", \"tw-inset-0\", \"tw-z-40\"],\n      ...config,\n    };\n\n    return super.open(componentOrTemplateRef, config);\n  }\n}\n",
            "extends": "Dialog",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BitFormFieldControl",
            "id": "class-BitFormFieldControl-cfb6b50a6e291cd36e5450fcf6d7c2d222dcc9468055664aa61e67c10e8b1b48fa43f1731c88ac9b34436c386a97ac425fa223a8fd86998af21ba0b5dc13501f",
            "file": "src/form-field/form-field-control.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class BitFormFieldControl {\n  ariaDescribedBy: string;\n  id: string;\n  labelForId: string;\n  required: boolean;\n  hasError: boolean;\n  error: [string, any];\n}\n",
            "properties": [
                {
                    "name": "ariaDescribedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[string, any]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "labelForId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BitTabChangeEvent",
            "id": "class-BitTabChangeEvent-0364fee9fe307402a8db3a577a62d160ae62fcd2cd7089bcf6c451f643fa43f5575a9f38748a4811c3e793f6e87677d7e4330d9068ce59368046db91f565497a",
            "file": "src/tabs/tab-group/tab-group.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FocusKeyManager } from \"@angular/cdk/a11y\";\nimport { coerceNumberProperty } from \"@angular/cdk/coercion\";\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChildren,\n} from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TabListItemDirective } from \"../shared/tab-list-item.directive\";\n\nimport { TabComponent } from \"./tab.component\";\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-tab-group\",\n  templateUrl: \"./tab-group.component.html\",\n})\nexport class TabGroupComponent\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  private readonly _groupId: number;\n  private readonly destroy$ = new Subject<void>();\n  private _indexToSelect: number | null = 0;\n\n  /**\n   * Aria label for the tab list menu\n   */\n  @Input() label = \"\";\n\n  /**\n   * Keep the content of off-screen tabs in the DOM.\n   * Useful for keeping <audio> or <video> elements from re-initializing\n   * after navigating between tabs.\n   */\n  @Input() preserveContent = false;\n\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\n  @ViewChildren(TabListItemDirective) tabLabels: QueryList<TabListItemDirective>;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<BitTabChangeEvent> =\n    new EventEmitter<BitTabChangeEvent>();\n\n  /**\n   * Focus key manager for keeping tab controls accessible.\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\n   */\n  keyManager: FocusKeyManager<TabListItemDirective>;\n\n  constructor() {\n    this._groupId = nextId++;\n  }\n\n  protected getTabContentId(id: number): string {\n    return `bit-tab-content-${this._groupId}-${id}`;\n  }\n\n  protected getTabLabelId(id: number): string {\n    return `bit-tab-label-${this._groupId}-${id}`;\n  }\n\n  selectTab(index: number) {\n    this.selectedIndex = index;\n  }\n\n  /**\n   * After content is checked, the tab group knows what tabs are defined and which index\n   * should be currently selected.\n   */\n  ngAfterContentChecked(): void {\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit({\n          index: indexToSelect,\n          tab: this.tabs.toArray()[indexToSelect],\n        });\n      }\n\n      // These values need to be updated after change detection as\n      // the checked content may have references to them.\n      Promise.resolve().then(() => {\n        this.tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n\n      // Manually update the _selectedIndex and keyManager active item\n      this._selectedIndex = indexToSelect;\n      if (this.keyManager) {\n        this.keyManager.setActiveItem(indexToSelect);\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.keyManager = new FocusKeyManager(this.tabLabels)\n      .withHorizontalOrientation(\"ltr\")\n      .withWrap()\n      .withHomeAndEnd();\n  }\n\n  ngAfterContentInit() {\n    // Subscribe to any changes in the number of tabs, in order to be able\n    // to re-render content when new tabs are added or removed.\n    this.tabs.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // If the selected tab didn't explicitly change, keep the previously\n      // selected tab selected/active\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this.tabs.toArray();\n        let selectedTab: TabComponent | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Set both _indexToSelect and _selectedIndex to avoid firing a change\n            // event which could cause an infinite loop if adding a tab within the\n            // selectedIndexChange event\n            this._indexToSelect = this._selectedIndex = i;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // No active tab found and a tab does exist means the active tab\n        // was removed, so a new active tab must be set manually\n        if (!selectedTab && tabs[indexToSelect]) {\n          tabs[indexToSelect].isActive = true;\n          this.selectedTabChange.emit({\n            index: indexToSelect,\n            tab: tabs[indexToSelect],\n          });\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _clampTabIndex(index: number): number {\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n  }\n}\n\nexport class BitTabChangeEvent {\n  /**\n   * The currently selected tab index\n   */\n  index: number;\n  /**\n   * The currently selected tab\n   */\n  tab: TabComponent;\n}\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The currently selected tab index</p>\n",
                    "line": 182,
                    "rawdescription": "\n\nThe currently selected tab index\n"
                },
                {
                    "name": "tab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabComponent",
                    "optional": false,
                    "description": "<p>The currently selected tab</p>\n",
                    "line": 186,
                    "rawdescription": "\n\nThe currently selected tab\n"
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ButtonLikeAbstraction",
            "id": "class-ButtonLikeAbstraction-b94c60b071c5069a1103e5ccdbce39e2f2e37d63a91abdeef45cb3169cd98ba2f60c6fe4ab201dced4e0c2223c4e0c47d9ecdb51cce56ce08f8e7333d2eb08f5",
            "file": "src/shared/button-like.abstraction.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class ButtonLikeAbstraction {\n  loading: boolean;\n  disabled: boolean;\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicContentNotAllowedError",
            "id": "class-DynamicContentNotAllowedError-01d9a8d9679a5c48e0111f8176d15cec436531c02131f47968a9f54d41efe62656659e96690f8d62186ba95e022981c859715f670f1c73555a7bfe78754e644a",
            "file": "src/icon/icon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class Icon {\n  constructor(readonly svg: string) {}\n}\n\n// We only export the type to prohibit the creation of Icons without using\n// the `svgIcon` template literal tag.\nexport type { Icon };\n\nexport function isIcon(icon: unknown): icon is Icon {\n  return icon instanceof Icon;\n}\n\nexport class DynamicContentNotAllowedError extends Error {\n  constructor() {\n    super(\"Dynamic content in icons is not allowed due to risk of user-injected XSS.\");\n  }\n}\n\nexport function svgIcon(strings: TemplateStringsArray, ...values: unknown[]): Icon {\n  if (values.length > 0) {\n    throw new DynamicContentNotAllowedError();\n  }\n\n  return new Icon(strings[0]);\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "Error",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "I18nMockService",
            "id": "class-I18nMockService-2473d5f5f479a5a9c553be1dd158f4c17a3022c191beb736a2dc581815d52f6fb8590553c45a01c66c334334698065945e240c5c4c3069e4801e10583bc9e42d",
            "file": "src/utils/i18n-mock.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nexport class I18nMockService implements I18nService {\n  locale$: Observable<string>;\n  supportedTranslationLocales: string[];\n  translationLocale: string;\n  collator: Intl.Collator;\n  localeNames: Map<string, string>;\n\n  constructor(private lookupTable: Record<string, string>) {}\n\n  t(id: string, p1?: string, p2?: string, p3?: string) {\n    return this.lookupTable[id];\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string) {\n    return this.t(id, p1, p2, p3);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lookupTable",
                        "type": "Record<string | string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "lookupTable",
                        "type": "Record<string | string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "collator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Intl.Collator",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "locale$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "localeNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "supportedTranslationLocales",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "translationLocale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "t",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "p2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "p3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Record<string, string>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translate",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "p2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "p3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Record<string, string>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p3",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "I18nService"
            ]
        },
        {
            "name": "Icon",
            "id": "class-Icon-01d9a8d9679a5c48e0111f8176d15cec436531c02131f47968a9f54d41efe62656659e96690f8d62186ba95e022981c859715f670f1c73555a7bfe78754e644a",
            "file": "src/icon/icon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class Icon {\n  constructor(readonly svg: string) {}\n}\n\n// We only export the type to prohibit the creation of Icons without using\n// the `svgIcon` template literal tag.\nexport type { Icon };\n\nexport function isIcon(icon: unknown): icon is Icon {\n  return icon instanceof Icon;\n}\n\nexport class DynamicContentNotAllowedError extends Error {\n  constructor() {\n    super(\"Dynamic content in icons is not allowed due to risk of user-injected XSS.\");\n  }\n}\n\nexport function svgIcon(strings: TemplateStringsArray, ...values: unknown[]): Icon {\n  if (values.length > 0) {\n    throw new DynamicContentNotAllowedError();\n  }\n\n  return new Icon(strings[0]);\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "svg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "svg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BadgeDirective",
            "id": "directive-BadgeDirective-b8116a20c97ae0e60e6e5aebe2fe4b99fd137b03c2a477e3ea6aeae04f82eaa039dec42c8a6edc04bb8e4cdf3b36fdda00f39d95b1a4a815a53f5e1b3298546a",
            "file": "src/badge/badge.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostBinding, Input } from \"@angular/core\";\n\ntype BadgeTypes = \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\";\n\nconst styles: Record<BadgeTypes, string[]> = {\n  primary: [\"tw-bg-primary-500\"],\n  secondary: [\"tw-bg-text-muted\"],\n  success: [\"tw-bg-success-500\"],\n  danger: [\"tw-bg-danger-500\"],\n  warning: [\"tw-bg-warning-500\"],\n  info: [\"tw-bg-info-500\"],\n};\n\nconst hoverStyles: Record<BadgeTypes, string[]> = {\n  primary: [\"hover:tw-bg-primary-700\"],\n  secondary: [\"hover:tw-bg-secondary-700\"],\n  success: [\"hover:tw-bg-success-700\"],\n  danger: [\"hover:tw-bg-danger-700\"],\n  warning: [\"hover:tw-bg-warning-700\"],\n  info: [\"hover:tw-bg-info-700\"],\n};\n\n@Directive({\n  selector: \"span[bitBadge], a[bitBadge], button[bitBadge]\",\n})\nexport class BadgeDirective {\n  @HostBinding(\"class\") get classList() {\n    return [\n      \"tw-inline\",\n      \"tw-py-0.5\",\n      \"tw-px-1.5\",\n      \"tw-font-bold\",\n      \"tw-text-center\",\n      \"!tw-text-contrast\",\n      \"tw-rounded\",\n      \"tw-border-none\",\n      \"tw-box-border\",\n      \"tw-whitespace-no-wrap\",\n      \"tw-text-xs\",\n      \"hover:tw-no-underline\",\n      \"focus:tw-outline-none\",\n      \"focus:tw-ring\",\n      \"focus:tw-ring-offset-2\",\n      \"focus:tw-ring-primary-700\",\n    ]\n      .concat(styles[this.badgeType])\n      .concat(this.hasHoverEffects ? hoverStyles[this.badgeType] : []);\n  }\n\n  @Input() badgeType: BadgeTypes = \"primary\";\n\n  private hasHoverEffects = false;\n\n  constructor(el: ElementRef<Element>) {\n    this.hasHoverEffects = el?.nativeElement?.nodeName != \"SPAN\";\n  }\n}\n",
            "selector": "span[bitBadge], a[bitBadge], button[bitBadge]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "badgeType",
                    "defaultValue": "\"primary\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "BadgeTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "hasHoverEffects",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef<Element>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef<Element>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            }
        },
        {
            "name": "BitActionDirective",
            "id": "directive-BitActionDirective-8dab1777d92e44ecb19d20e95291257f5b70c3ad598af7e977c39a406d51d04d1df151b382f44cdd93139dae2cfdad8965ab238dc17dbf5ae4e8791b72ec0305",
            "file": "src/async-actions/bit-action.directive.ts",
            "type": "directive",
            "description": "<p>Allow a single button to perform async actions on click and reflect the progress in the UI by automatically\nactivating the loading effect while the action is processed.</p>\n",
            "rawdescription": "\n\nAllow a single button to perform async actions on click and reflect the progress in the UI by automatically\nactivating the loading effect while the action is processed.\n",
            "sourceCode": "import { Directive, HostListener, Input, OnDestroy, Optional } from \"@angular/core\";\nimport { BehaviorSubject, finalize, Subject, takeUntil, tap } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\n\nimport { ButtonLikeAbstraction } from \"../shared/button-like.abstraction\";\nimport { FunctionReturningAwaitable, functionToObservable } from \"../utils/function-to-observable\";\n\n/**\n * Allow a single button to perform async actions on click and reflect the progress in the UI by automatically\n * activating the loading effect while the action is processed.\n */\n@Directive({\n  selector: \"[bitAction]\",\n})\nexport class BitActionDirective implements OnDestroy {\n  private destroy$ = new Subject<void>();\n  private _loading$ = new BehaviorSubject<boolean>(false);\n\n  @Input(\"bitAction\") protected handler: FunctionReturningAwaitable;\n\n  readonly loading$ = this._loading$.asObservable();\n\n  constructor(\n    private buttonComponent: ButtonLikeAbstraction,\n    @Optional() private validationService?: ValidationService\n  ) {}\n\n  get loading() {\n    return this._loading$.value;\n  }\n\n  set loading(value: boolean) {\n    this._loading$.next(value);\n    this.buttonComponent.loading = value;\n  }\n\n  @HostListener(\"click\")\n  protected async onClick() {\n    if (!this.handler) {\n      return;\n    }\n\n    this.loading = true;\n    functionToObservable(this.handler)\n      .pipe(\n        tap({ error: (err: unknown) => this.validationService?.showError(err) }),\n        finalize(() => (this.loading = false)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "selector": "[bitAction]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "bitAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FunctionReturningAwaitable",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39
                }
            ],
            "propertiesClass": [
                {
                    "name": "_loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "this._loading$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        122,
                        131
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "buttonComponent",
                        "type": "ButtonLikeAbstraction",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "buttonComponent",
                        "type": "ButtonLikeAbstraction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "loading": {
                    "name": "loading",
                    "setSignature": {
                        "name": "loading",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "loading",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            }
        },
        {
            "name": "BitFormButtonDirective",
            "id": "directive-BitFormButtonDirective-42be03c33f49a22e804cd9b0c8147cb2d5d01afb024c883396828e64ac5777d1630cfe5c44665414641e82bb41ee55fad26aa48605150672ac75cf9ce6a19559",
            "file": "src/async-actions/form-button.directive.ts",
            "type": "directive",
            "description": "<p>This directive has two purposes:</p>\n<p>When attached to a submit button:</p>\n<ul>\n<li>Activates the button loading effect while the form is processing an async submit action.</li>\n<li>Disables the button while a <code>bitAction</code> directive on another button is being processed.</li>\n</ul>\n<p>When attached to a standalone button with <code>bitAction</code> directive:</p>\n<ul>\n<li>Disables the form while the <code>bitAction</code> directive is processing an async submit action.</li>\n</ul>\n",
            "rawdescription": "\n\nThis directive has two purposes:\n\nWhen attached to a submit button:\n- Activates the button loading effect while the form is processing an async submit action.\n- Disables the button while a `bitAction` directive on another button is being processed.\n\nWhen attached to a standalone button with `bitAction` directive:\n- Disables the form while the `bitAction` directive is processing an async submit action.\n",
            "sourceCode": "import { Directive, Input, OnDestroy, Optional } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { ButtonLikeAbstraction } from \"../shared/button-like.abstraction\";\n\nimport { BitSubmitDirective } from \"./bit-submit.directive\";\n\nimport { BitActionDirective } from \".\";\n\n/**\n * This directive has two purposes:\n *\n * When attached to a submit button:\n * - Activates the button loading effect while the form is processing an async submit action.\n * - Disables the button while a `bitAction` directive on another button is being processed.\n *\n * When attached to a standalone button with `bitAction` directive:\n * - Disables the form while the `bitAction` directive is processing an async submit action.\n */\n@Directive({\n  selector: \"button[bitFormButton]\",\n})\nexport class BitFormButtonDirective implements OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  @Input() type: string;\n\n  constructor(\n    buttonComponent: ButtonLikeAbstraction,\n    @Optional() submitDirective?: BitSubmitDirective,\n    @Optional() actionDirective?: BitActionDirective\n  ) {\n    if (submitDirective && buttonComponent) {\n      submitDirective.loading$.pipe(takeUntil(this.destroy$)).subscribe((loading) => {\n        if (this.type === \"submit\") {\n          buttonComponent.loading = loading;\n        } else {\n          buttonComponent.disabled = loading;\n        }\n      });\n\n      submitDirective.disabled$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {\n        buttonComponent.disabled = disabled;\n      });\n    }\n\n    if (submitDirective && actionDirective) {\n      actionDirective.loading$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {\n        submitDirective.disabled = disabled;\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "selector": "button[bitFormButton]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "buttonComponent",
                        "type": "ButtonLikeAbstraction",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "submitDirective",
                        "type": "BitSubmitDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "actionDirective",
                        "type": "BitActionDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "buttonComponent",
                        "type": "ButtonLikeAbstraction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "submitDirective",
                        "type": "BitSubmitDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionDirective",
                        "type": "BitActionDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BitHintComponent",
            "id": "directive-BitHintComponent-fc19ee377a0840140260a76f7f78e26cd86ca1d8c29d8e49c44bad3be169b1cc4d61b5041e0b85893caad5da49fe039a8c2bf2f2eb788c77a8bb9d40b2628bcd",
            "file": "src/form-field/hint.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding } from \"@angular/core\";\n\n// Increments for each instance of this component\nlet nextId = 0;\n\n@Directive({\n  selector: \"bit-hint\",\n  host: {\n    class: \"tw-text-muted tw-inline-block tw-mt-1\",\n  },\n})\nexport class BitHintComponent {\n  @HostBinding() id = `bit-hint-${nextId++}`;\n}\n",
            "selector": "bit-hint",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "id",
                    "defaultValue": "`bit-hint-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`bit-hint-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": []
        },
        {
            "name": "BitInputDirective",
            "id": "directive-BitInputDirective-59d8fca7d2599e6a4844be947d0d24007b3c23efb5a4eaf5111af1765a92eb569491795fcfd17d4451a70ab9dfdcb668bcf3ddf2e3eea2101a3ad7663e78899b",
            "file": "src/input/input.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, Input, Optional, Self } from \"@angular/core\";\nimport { NgControl, Validators } from \"@angular/forms\";\n\nimport { BitFormFieldControl } from \"../form-field/form-field-control\";\n\n// Increments for each instance of this component\nlet nextId = 0;\n\n@Directive({\n  selector: \"input[bitInput], select[bitInput], textarea[bitInput]\",\n  providers: [{ provide: BitFormFieldControl, useExisting: BitInputDirective }],\n})\nexport class BitInputDirective implements BitFormFieldControl {\n  @HostBinding(\"class\") @Input() get classList() {\n    return [\n      \"tw-block\",\n      \"tw-w-full\",\n      \"tw-px-3\",\n      \"tw-py-1.5\",\n      \"tw-bg-background-alt\",\n      \"tw-border\",\n      \"tw-border-solid\",\n      this.hasError ? \"tw-border-danger-500\" : \"tw-border-secondary-500\",\n      \"tw-text-main\",\n      \"tw-placeholder-text-muted\",\n      // Rounded\n      \"tw-rounded-none\",\n      \"first:tw-rounded-l\",\n      \"last:tw-rounded-r\",\n      // Focus\n      \"focus:tw-outline-none\",\n      \"focus:tw-border-primary-700\",\n      \"focus:tw-ring-1\",\n      \"focus:tw-ring-primary-700\",\n      \"focus:tw-z-10\",\n      \"disabled:tw-bg-secondary-100\",\n    ].filter((s) => s != \"\");\n  }\n\n  @HostBinding() @Input() id = `bit-input-${nextId++}`;\n\n  @HostBinding(\"attr.aria-describedby\") ariaDescribedBy: string;\n\n  get labelForId(): string {\n    return this.id;\n  }\n\n  @HostBinding(\"attr.aria-invalid\") get ariaInvalid() {\n    return this.hasError ? true : undefined;\n  }\n\n  @HostBinding()\n  @Input()\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: any) {\n    this._required = value != null && value !== false;\n  }\n  private _required: boolean;\n\n  @Input() hasPrefix = false;\n  @Input() hasSuffix = false;\n\n  get hasError() {\n    return this.ngControl?.status === \"INVALID\" && this.ngControl?.touched;\n  }\n\n  get error(): [string, any] {\n    const key = Object.keys(this.ngControl.errors)[0];\n    return [key, this.ngControl.errors[key]];\n  }\n  constructor(@Optional() @Self() private ngControl: NgControl) {}\n}\n",
            "selector": "input[bitInput], select[bitInput], textarea[bitInput]",
            "providers": [
                {
                    "name": "{ provide: BitFormFieldControl, useExisting: BitInputDirective }",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "hasPrefix",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasSuffix",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "`bit-input-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.aria-describedby",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "attr.aria-invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ariaDescribedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.aria-describedby'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "BitFormFieldControl"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                },
                "labelForId": {
                    "name": "labelForId",
                    "getSignature": {
                        "name": "labelForId",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                },
                "ariaInvalid": {
                    "name": "ariaInvalid",
                    "getSignature": {
                        "name": "ariaInvalid",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                },
                "hasError": {
                    "name": "hasError",
                    "getSignature": {
                        "name": "hasError",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "error": {
                    "name": "error",
                    "getSignature": {
                        "name": "error",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "BitLabel",
            "id": "directive-BitLabel-13e5c40dcc9f4b75e3123ae0298c960c0f45004440aa0e2ae14a09551986039dbb944a18201c70b2857dce106f54574274ab72d2c0b4cc6bf71ab642fab0bb1b",
            "file": "src/form-field/label.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"bit-label\",\n})\nexport class BitLabel {}\n",
            "selector": "bit-label",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "BitPrefixDirective",
            "id": "directive-BitPrefixDirective-1ea298f4bc9ea3579d52aa4f622299187e6c4c1ca7e3e8d0c47ac1eccba79428ded624dac6b5ace8239b87c427843f7bd54ab4c9676f4bd73ebad31c1ef881b8",
            "file": "src/form-field/prefix.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, Input } from \"@angular/core\";\n\nexport const PrefixClasses = [\n  \"tw-block\",\n  \"tw-px-3\",\n  \"tw-py-1.5\",\n  \"tw-bg-background-alt\",\n  \"tw-border\",\n  \"tw-border-solid\",\n  \"tw-border-secondary-500\",\n  \"tw-text-muted\",\n  \"tw-rounded-none\",\n  \"disabled:!tw-text-muted\",\n  \"disabled:tw-border-secondary-500\",\n];\n\n@Directive({\n  selector: \"[bitPrefix]\",\n})\nexport class BitPrefixDirective {\n  @HostBinding(\"class\") @Input() get classList() {\n    return PrefixClasses.concat([\"tw-border-r-0\", \"first:tw-rounded-l\"]);\n  }\n}\n",
            "selector": "[bitPrefix]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            }
        },
        {
            "name": "BitSubmitDirective",
            "id": "directive-BitSubmitDirective-1466830868dd788544ff4eca00f2a54a03a7e820d58adeb3c9096033d7542db0d365d12646378675e9502ae9d3965714d824745261105b695d94ddf60da5fab3",
            "file": "src/async-actions/bit-submit.directive.ts",
            "type": "directive",
            "description": "<p>Allow a form to perform async actions on submit, disabling the form while the action is processing.</p>\n",
            "rawdescription": "\n\nAllow a form to perform async actions on submit, disabling the form while the action is processing.\n",
            "sourceCode": "import { Directive, Input, OnDestroy, OnInit, Optional } from \"@angular/core\";\nimport { FormGroupDirective } from \"@angular/forms\";\nimport { BehaviorSubject, catchError, filter, of, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\n\nimport { FunctionReturningAwaitable, functionToObservable } from \"../utils/function-to-observable\";\n\n/**\n * Allow a form to perform async actions on submit, disabling the form while the action is processing.\n */\n@Directive({\n  selector: \"[formGroup][bitSubmit]\",\n})\nexport class BitSubmitDirective implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private _loading$ = new BehaviorSubject<boolean>(false);\n  private _disabled$ = new BehaviorSubject<boolean>(false);\n\n  @Input(\"bitSubmit\") protected handler: FunctionReturningAwaitable;\n\n  readonly loading$ = this._loading$.asObservable();\n  readonly disabled$ = this._disabled$.asObservable();\n\n  constructor(\n    private formGroupDirective: FormGroupDirective,\n    @Optional() validationService?: ValidationService\n  ) {\n    formGroupDirective.ngSubmit\n      .pipe(\n        filter(() => !this.disabled),\n        switchMap(() => {\n          // Calling functionToObservable exectues the sync part of the handler\n          // allowing the function to check form validity before it gets disabled.\n          const awaitable = functionToObservable(this.handler);\n\n          // Disable form\n          this.loading = true;\n\n          return awaitable.pipe(\n            catchError((err: unknown) => {\n              validationService?.showError(err);\n              return of(undefined);\n            })\n          );\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe({\n        next: () => (this.loading = false),\n        complete: () => (this.loading = false),\n      });\n  }\n\n  ngOnInit(): void {\n    this.formGroupDirective.statusChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((c) => this._disabled$.next(c === \"DISABLED\"));\n  }\n\n  get disabled() {\n    return this._disabled$.value;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled$.next(value);\n  }\n\n  get loading() {\n    return this._loading$.value;\n  }\n\n  set loading(value: boolean) {\n    this.disabled = value;\n    this._loading$.next(value);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "selector": "[formGroup][bitSubmit]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "bitSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FunctionReturningAwaitable",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_disabled$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_loading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "disabled$",
                    "defaultValue": "this._disabled$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "this._loading$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formGroupDirective",
                        "type": "FormGroupDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "formGroupDirective",
                        "type": "FormGroupDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "loading": {
                    "name": "loading",
                    "setSignature": {
                        "name": "loading",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 73,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "loading",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                }
            }
        },
        {
            "name": "BitSuffixDirective",
            "id": "directive-BitSuffixDirective-0e87ce3107b45ec4549723cdfdf144e21fbd4c5c860f33d59eb309d4393fececb93190deeb3795bb8f74f7c3f328508beeca6bb3e0df7fd939d20f91ffb61e36",
            "file": "src/form-field/suffix.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, Input } from \"@angular/core\";\n\nimport { PrefixClasses } from \"./prefix.directive\";\n\n@Directive({\n  selector: \"[bitSuffix]\",\n})\nexport class BitSuffixDirective {\n  @HostBinding(\"class\") @Input() get classList() {\n    return PrefixClasses.concat([\"tw-border-l-0\", \"last:tw-rounded-r\"]);\n  }\n}\n",
            "selector": "[bitSuffix]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "classList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 9
                    }
                }
            }
        },
        {
            "name": "CellDirective",
            "id": "directive-CellDirective-2cbf8002b2e0465f4f4c3dca8ae0b086a087ff3622d38adfba9fcfcf2f1d95083eee72c3ea6a8f06e31c016e1d505b30fe0b313ce0d512daede1a74aeedb4dfa",
            "file": "src/table/cell.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HostBinding, Directive } from \"@angular/core\";\n\n@Directive({\n  selector: \"th[bitCell], td[bitCell]\",\n})\nexport class CellDirective {\n  @HostBinding(\"class\") get classList() {\n    return [\"tw-p-3\"];\n  }\n}\n",
            "selector": "th[bitCell], td[bitCell]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "{}",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 7
                    }
                }
            }
        },
        {
            "name": "DialogCloseDirective",
            "id": "directive-DialogCloseDirective-d33ce5f53129359b5e78e15d88775148ebb7903b2fbd0d64a99991da15445899e8d09459704dfe01d4fdb7fc772b0dd9865cf412f2ced743b6f3772b2950f8de",
            "file": "src/dialog/directives/dialog-close.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DialogRef } from \"@angular/cdk/dialog\";\nimport { Directive, HostListener, Input, Optional } from \"@angular/core\";\n\n@Directive({\n  selector: \"[bitDialogClose]\",\n})\nexport class DialogCloseDirective {\n  @Input(\"bit-dialog-close\") dialogResult: any;\n\n  constructor(@Optional() public dialogRef: DialogRef<any>) {}\n\n  @HostListener(\"click\") close(): void {\n    this.dialogRef.close(this.dialogResult);\n  }\n}\n",
            "selector": "[bitDialogClose]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "bit-dialog-close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DialogTitleContainerDirective",
            "id": "directive-DialogTitleContainerDirective-74603b280ca83aae32470f3846e4c808215c8d4cf4bfe31f89b0a5e11fc4de30a38e4a748b9043c31de6954fb44c9cf2a5c231f07d030218484f593537494057",
            "file": "src/dialog/directives/dialog-title-container.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CdkDialogContainer, DialogRef } from \"@angular/cdk/dialog\";\nimport { Directive, HostBinding, Input, OnInit, Optional } from \"@angular/core\";\n\n// Increments for each instance of this component\nlet nextId = 0;\n\n@Directive({\n  selector: \"[bitDialogTitleContainer]\",\n})\nexport class DialogTitleContainerDirective implements OnInit {\n  @HostBinding(\"id\") id = `bit-dialog-title-${nextId++}`;\n\n  @Input() simple = false;\n\n  constructor(@Optional() private dialogRef: DialogRef<any>) {}\n\n  ngOnInit(): void {\n    // Based on angular/components, licensed under MIT\n    // https://github.com/angular/components/blob/14.2.0/src/material/dialog/dialog-content-directives.ts#L121-L128\n    if (this.dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this.dialogRef.containerInstance as CdkDialogContainer;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n",
            "selector": "[bitDialogTitleContainer]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "simple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "id",
                    "defaultValue": "`bit-dialog-title-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`bit-dialog-title-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'id'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IconDirective",
            "id": "directive-IconDirective-fcd8b9768452d038198a778d548b6119d551c4b7b96d4140c2ac569aa06001b631993998267355819bcf98c7b0828110d47f3003e86778e1950aa0560b323c01",
            "file": "src/dialog/simple-dialog/simple-dialog.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, ContentChild, Directive } from \"@angular/core\";\n\n@Directive({ selector: \"[bit-dialog-icon]\" })\nexport class IconDirective {}\n\n@Component({\n  selector: \"bit-simple-dialog\",\n  templateUrl: \"./simple-dialog.component.html\",\n})\nexport class SimpleDialogComponent {\n  @ContentChild(IconDirective) icon!: IconDirective;\n\n  get hasIcon() {\n    return this.icon != null;\n  }\n}\n",
            "selector": "[bit-dialog-icon]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "LinkDirective",
            "id": "directive-LinkDirective-36e21487650b76416ddde8ed6bd46b113ebe0d3639cad395258163d0b8e652f4cc5cfc41a54c417c1ff81dee123574612e1edf8ca74a3629cebb238a271920d4",
            "file": "src/link/link.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Input, HostBinding, Directive } from \"@angular/core\";\n\nexport type LinkType = \"primary\" | \"secondary\" | \"contrast\";\n\nconst linkStyles: Record<LinkType, string[]> = {\n  primary: [\n    \"!tw-text-primary-500\",\n    \"hover:!tw-text-primary-500\",\n    \"focus-visible:tw-ring-primary-700\",\n    \"disabled:!tw-text-primary-500/60\",\n  ],\n  secondary: [\n    \"!tw-text-main\",\n    \"hover:!tw-text-main\",\n    \"focus-visible:tw-ring-primary-700\",\n    \"disabled:!tw-text-muted/60\",\n  ],\n  contrast: [\n    \"!tw-text-contrast\",\n    \"hover:!tw-text-contrast\",\n    \"focus-visible:tw-ring-text-contrast\",\n    \"disabled:!tw-text-contrast/60\",\n  ],\n};\n\n@Directive({\n  selector: \"button[bitLink], a[bitLink]\",\n})\nexport class LinkDirective {\n  @HostBinding(\"class\") get classList() {\n    return [\n      \"tw-font-semibold\",\n      \"tw-py-0.5\",\n      \"tw-px-0\",\n      \"tw-bg-transparent\",\n      \"tw-border-0\",\n      \"tw-border-none\",\n      \"tw-rounded\",\n      \"tw-transition\",\n      \"hover:tw-underline\",\n      \"hover:tw-decoration-1\",\n      \"focus-visible:tw-outline-none\",\n      \"focus-visible:tw-underline\",\n      \"focus-visible:tw-decoration-1\",\n      \"focus-visible:tw-ring-2\",\n      \"focus-visible:tw-z-10\",\n      \"disabled:tw-no-underline\",\n      \"disabled:tw-cursor-not-allowed\",\n    ].concat(linkStyles[this.linkType] ?? []);\n  }\n\n  @Input()\n  linkType: LinkType = \"primary\";\n}\n",
            "selector": "button[bitLink], a[bitLink]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "linkType",
                    "defaultValue": "\"primary\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "LinkType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "MenuItemDirective",
            "id": "directive-MenuItemDirective-b9479c630dc719766f16f2f7256a4d588c78c9477deeabd79983bb2df708f30912607b950d1dd5a2156163cbab8bd964d1459cc382f6eab38aa3cc55eeeefbb3",
            "file": "src/menu/menu-item.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { FocusableOption } from \"@angular/cdk/a11y\";\nimport { Directive, ElementRef, HostBinding } from \"@angular/core\";\n\n@Directive({\n  selector: \"[bitMenuItem]\",\n})\nexport class MenuItemDirective implements FocusableOption {\n  @HostBinding(\"class\") classList = [\n    \"tw-block\",\n    \"tw-py-1\",\n    \"tw-px-4\",\n    \"!tw-text-main\",\n    \"!tw-no-underline\",\n    \"tw-cursor-pointer\",\n    \"tw-border-none\",\n    \"tw-bg-background\",\n    \"tw-text-left\",\n    \"hover:tw-bg-secondary-100\",\n    \"focus:tw-bg-secondary-100\",\n    \"focus:tw-z-50\",\n    \"focus:tw-outline-none\",\n    \"focus:tw-ring\",\n    \"focus:tw-ring-offset-2\",\n    \"focus:tw-ring-primary-700\",\n    \"active:!tw-ring-0\",\n    \"active:!tw-ring-offset-0\",\n  ];\n  @HostBinding(\"attr.role\") role = \"menuitem\";\n  @HostBinding(\"tabIndex\") tabIndex = \"-1\";\n\n  constructor(private elementRef: ElementRef) {}\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n}\n",
            "selector": "[bitMenuItem]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "\"menuitem\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "[\n    \"tw-block\",\n    \"tw-py-1\",\n    \"tw-px-4\",\n    \"!tw-text-main\",\n    \"!tw-no-underline\",\n    \"tw-cursor-pointer\",\n    \"tw-border-none\",\n    \"tw-bg-background\",\n    \"tw-text-left\",\n    \"hover:tw-bg-secondary-100\",\n    \"focus:tw-bg-secondary-100\",\n    \"focus:tw-z-50\",\n    \"focus:tw-outline-none\",\n    \"focus:tw-ring\",\n    \"focus:tw-ring-offset-2\",\n    \"focus:tw-ring-primary-700\",\n    \"active:!tw-ring-0\",\n    \"active:!tw-ring-offset-0\",\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "\"-1\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "classList",
                    "defaultValue": "[\n    \"tw-block\",\n    \"tw-py-1\",\n    \"tw-px-4\",\n    \"!tw-text-main\",\n    \"!tw-no-underline\",\n    \"tw-cursor-pointer\",\n    \"tw-border-none\",\n    \"tw-bg-background\",\n    \"tw-text-left\",\n    \"hover:tw-bg-secondary-100\",\n    \"focus:tw-bg-secondary-100\",\n    \"focus:tw-z-50\",\n    \"focus:tw-outline-none\",\n    \"focus:tw-ring\",\n    \"focus:tw-ring-offset-2\",\n    \"focus:tw-ring-primary-700\",\n    \"active:!tw-ring-0\",\n    \"active:!tw-ring-offset-0\",\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "role",
                    "defaultValue": "\"menuitem\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.role'"
                        }
                    ]
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "\"-1\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabIndex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "FocusableOption"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MenuTriggerForDirective",
            "id": "directive-MenuTriggerForDirective-e467956c70493397f9fe7a783e37b0922253aa8a32c936b0f88676ab1e348648fb128b4e31e10e91eef4024c6aaeb652d96dbebdeedcea25460ea13dd2ff2296",
            "file": "src/menu/menu-trigger-for.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Overlay, OverlayConfig, OverlayRef } from \"@angular/cdk/overlay\";\nimport { TemplatePortal } from \"@angular/cdk/portal\";\nimport {\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  ViewContainerRef,\n} from \"@angular/core\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { filter, mergeWith } from \"rxjs/operators\";\n\nimport { MenuComponent } from \"./menu.component\";\n\n@Directive({\n  selector: \"[bitMenuTriggerFor]\",\n})\nexport class MenuTriggerForDirective implements OnDestroy {\n  @HostBinding(\"attr.aria-expanded\") isOpen = false;\n  @HostBinding(\"attr.aria-haspopup\") hasPopup = \"menu\";\n  @HostBinding(\"attr.role\") role = \"button\";\n\n  @Input(\"bitMenuTriggerFor\") menu: MenuComponent;\n\n  private overlayRef: OverlayRef;\n  private defaultMenuConfig: OverlayConfig = {\n    panelClass: \"bit-menu-panel\",\n    hasBackdrop: true,\n    backdropClass: \"cdk-overlay-transparent-backdrop\",\n    scrollStrategy: this.overlay.scrollStrategies.reposition(),\n    positionStrategy: this.overlay\n      .position()\n      .flexibleConnectedTo(this.elementRef)\n      .withPositions([\n        {\n          originX: \"start\",\n          originY: \"bottom\",\n          overlayX: \"start\",\n          overlayY: \"top\",\n        },\n        {\n          originX: \"end\",\n          originY: \"bottom\",\n          overlayX: \"end\",\n          overlayY: \"top\",\n        },\n      ])\n      .withLockedPosition(true)\n      .withFlexibleDimensions(false)\n      .withPush(false),\n  };\n  private closedEventsSub: Subscription;\n  private keyDownEventsSub: Subscription;\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private viewContainerRef: ViewContainerRef,\n    private overlay: Overlay\n  ) {}\n\n  @HostListener(\"click\") toggleMenu() {\n    this.isOpen ? this.destroyMenu() : this.openMenu();\n  }\n\n  ngOnDestroy() {\n    this.disposeAll();\n  }\n\n  private openMenu() {\n    if (this.menu == null) {\n      throw new Error(\"Cannot find bit-menu element\");\n    }\n\n    this.isOpen = true;\n    this.overlayRef = this.overlay.create(this.defaultMenuConfig);\n\n    const templatePortal = new TemplatePortal(this.menu.templateRef, this.viewContainerRef);\n    this.overlayRef.attach(templatePortal);\n\n    this.closedEventsSub = this.getClosedEvents().subscribe((event: KeyboardEvent | undefined) => {\n      if (event?.key === \"Tab\") {\n        // Required to ensure tab order resumes correctly\n        this.elementRef.nativeElement.focus();\n      }\n      this.destroyMenu();\n    });\n    this.keyDownEventsSub = this.overlayRef\n      .keydownEvents()\n      .subscribe((event: KeyboardEvent) => this.menu.keyManager.onKeydown(event));\n  }\n\n  private destroyMenu() {\n    if (this.overlayRef == null || !this.isOpen) {\n      return;\n    }\n\n    this.isOpen = false;\n    this.disposeAll();\n  }\n\n  private getClosedEvents(): Observable<any> {\n    const detachments = this.overlayRef.detachments();\n    const escKey = this.overlayRef\n      .keydownEvents()\n      .pipe(filter((event: KeyboardEvent) => event.key === \"Escape\" || event.key === \"Tab\"));\n    const backdrop = this.overlayRef.backdropClick();\n    const menuClosed = this.menu.closed;\n\n    return detachments.pipe(mergeWith(escKey, backdrop, menuClosed));\n  }\n\n  private disposeAll() {\n    this.closedEventsSub?.unsubscribe();\n    this.overlayRef?.dispose();\n    this.keyDownEventsSub?.unsubscribe();\n  }\n}\n",
            "selector": "[bitMenuTriggerFor]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "bitMenuTriggerFor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "MenuComponent",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.aria-expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "attr.aria-haspopup",
                    "defaultValue": "\"menu\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "attr.role",
                    "defaultValue": "\"button\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63
                }
            ],
            "propertiesClass": [
                {
                    "name": "closedEventsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "defaultMenuConfig",
                    "defaultValue": "{\n    panelClass: \"bit-menu-panel\",\n    hasBackdrop: true,\n    backdropClass: \"cdk-overlay-transparent-backdrop\",\n    scrollStrategy: this.overlay.scrollStrategies.reposition(),\n    positionStrategy: this.overlay\n      .position()\n      .flexibleConnectedTo(this.elementRef)\n      .withPositions([\n        {\n          originX: \"start\",\n          originY: \"bottom\",\n          overlayX: \"start\",\n          overlayY: \"top\",\n        },\n        {\n          originX: \"end\",\n          originY: \"bottom\",\n          overlayX: \"end\",\n          overlayY: \"top\",\n        },\n      ])\n      .withLockedPosition(true)\n      .withFlexibleDimensions(false)\n      .withPush(false),\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayConfig",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hasPopup",
                    "defaultValue": "\"menu\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.aria-haspopup'"
                        }
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.aria-expanded'"
                        }
                    ]
                },
                {
                    "name": "keyDownEventsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "role",
                    "defaultValue": "\"button\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.role'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "destroyMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "disposeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getClosedEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "RowDirective",
            "id": "directive-RowDirective-3f023bcc29d87aee36a491b8d5d40d9f5ca4ac5ca864c934dd12e16fb40e0d24f5486e2782c2e0fd16bee34358387070d1db63cb4bfbbb6743cbed58fb03560b",
            "file": "src/table/row.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, Input } from \"@angular/core\";\n\n@Directive({\n  selector: \"tr[bitRow]\",\n})\nexport class RowDirective {\n  @Input() alignContent: \"top\" | \"middle\" | \"bottom\" | \"baseline\" = \"baseline\";\n\n  get alignmentClass(): string {\n    switch (this.alignContent) {\n      case \"top\":\n        return \"tw-align-top\";\n      case \"middle\":\n        return \"tw-align-middle\";\n      case \"bottom\":\n        return \"tw-align-bottom\";\n      default:\n        return \"tw-align-baseline\";\n    }\n  }\n\n  @HostBinding(\"class\") get classList() {\n    return [\n      \"tw-border-0\",\n      \"tw-border-b\",\n      \"tw-border-secondary-300\",\n      \"tw-border-solid\",\n      \"hover:tw-bg-background-alt\",\n      \"last:tw-border-0\",\n      this.alignmentClass,\n    ];\n  }\n}\n",
            "selector": "tr[bitRow]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "alignContent",
                    "defaultValue": "\"baseline\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "\"top\" | \"middle\" | \"bottom\" | \"baseline\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "{}",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "accessors": {
                "alignmentClass": {
                    "name": "alignmentClass",
                    "getSignature": {
                        "name": "alignmentClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 9
                    }
                },
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            }
        },
        {
            "name": "TabLabelDirective",
            "id": "directive-TabLabelDirective-e7c4c40d3171a361a5e2001eb7ee84e34aa3b8533f77f4bba39fe001ee55f1fc93fe4cb11b566fc8345173fbb9aba0c3a1c8ab5a452b2500541ed5b350bd920b",
            "file": "src/tabs/tab-group/tab-label.directive.ts",
            "type": "directive",
            "description": "<p>Used to identify template based tab labels (allows complex labels instead of just plaintext)</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div><bit-tab>\n  <ng-template bitTabLabel>\n    <i class=\"bwi bwi-search\"></i> Search\n  </ng-template>\n```\n  <p>Tab Content</p>\n</bit-tab>\n```\n",
            "rawdescription": "\n\nUsed to identify template based tab labels (allows complex labels instead of just plaintext)\n\n```html\n```\n<bit-tab>\n  <ng-template bitTabLabel>\n    <i class=\"bwi bwi-search\"></i> Search\n  </ng-template>\n```\n  <p>Tab Content</p>\n</bit-tab>\n```\n",
            "sourceCode": "import { Directive, TemplateRef } from \"@angular/core\";\n\n/**\n * Used to identify template based tab labels (allows complex labels instead of just plaintext)\n *\n * @example\n * ```\n * <bit-tab>\n *   <ng-template bitTabLabel>\n *     <i class=\"bwi bwi-search\"></i> Search\n *   </ng-template>\n *\n *   <p>Tab Content</p>\n * </bit-tab>\n * ```\n */\n@Directive({\n  selector: \"[bitTabLabel]\",\n})\nexport class TabLabelDirective {\n  constructor(public templateRef: TemplateRef<unknown>) {}\n}\n",
            "selector": "[bitTabLabel]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TabListContainerDirective",
            "id": "directive-TabListContainerDirective-1179838aacd16f2d8e8cfb4bfd45cc2911674458dc4b933a5d61929575da92b5904cac1c433d875579e609b2331d98238d96f4409747bb7199e5b5073906fc29",
            "file": "src/tabs/shared/tab-list-container.directive.ts",
            "type": "directive",
            "description": "<p>Directive used for styling the container for bit tab labels</p>\n",
            "rawdescription": "\n\nDirective used for styling the container for bit tab labels\n",
            "sourceCode": "import { Directive } from \"@angular/core\";\n\n/**\n * Directive used for styling the container for bit tab labels\n */\n@Directive({\n  selector: \"[bitTabListContainer]\",\n  host: {\n    class: \"tw-inline-flex tw-flex-wrap tw-leading-5\",\n  },\n})\nexport class TabListContainerDirective {}\n",
            "selector": "[bitTabListContainer]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "TabListItemDirective",
            "id": "directive-TabListItemDirective-7d5ad6df9997ca26d3b9f71e581bcfb43013a865b40e9a1682c734ba52aff09aa8033029513f552cc52da535be0743f12f4ae494b3de6c74749a624ed06f569c",
            "file": "src/tabs/shared/tab-list-item.directive.ts",
            "type": "directive",
            "description": "<p>Directive used for styling tab header items for both nav links (anchor tags)\nand content tabs (button tags)</p>\n",
            "rawdescription": "\n\nDirective used for styling tab header items for both nav links (anchor tags)\nand content tabs (button tags)\n",
            "sourceCode": "import { FocusableOption } from \"@angular/cdk/a11y\";\nimport { Directive, ElementRef, HostBinding, Input } from \"@angular/core\";\n\n/**\n * Directive used for styling tab header items for both nav links (anchor tags)\n * and content tabs (button tags)\n */\n@Directive({ selector: \"[bitTabListItem]\" })\nexport class TabListItemDirective implements FocusableOption {\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @HostBinding(\"attr.disabled\")\n  get disabledAttr() {\n    return this.disabled || null; // native disabled attr must be null when false\n  }\n\n  constructor(private elementRef: ElementRef) {}\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  click() {\n    this.elementRef.nativeElement.click();\n  }\n\n  @HostBinding(\"class\")\n  get classList(): string[] {\n    return this.baseClassList\n      .concat(this.active ? this.activeClassList : [])\n      .concat(this.disabled ? this.disabledClassList : [])\n      .concat(this.textColorClassList);\n  }\n\n  /**\n   * Classes used for styling tab item text color.\n   * Separate text color class list required to override bootstrap classes in Web.\n   */\n  get textColorClassList(): string[] {\n    if (this.disabled) {\n      return [\"!tw-text-muted\", \"hover:!tw-text-muted\"];\n    }\n    if (this.active) {\n      return [\"!tw-text-primary-500\", \"hover:!tw-text-primary-700\"];\n    }\n    return [\"!tw-text-main\", \"hover:!tw-text-main\"];\n  }\n\n  get baseClassList(): string[] {\n    return [\n      \"tw-block\",\n      \"tw-relative\",\n      \"tw-py-2\",\n      \"tw-px-4\",\n      \"tw-font-semibold\",\n      \"tw-transition\",\n      \"tw-rounded-t\",\n      \"tw-border-0\",\n      \"tw-border-x\",\n      \"tw-border-t-4\",\n      \"tw-border-transparent\",\n      \"tw-border-solid\",\n      \"tw-bg-transparent\",\n      \"hover:tw-underline\",\n      \"focus-visible:tw-z-10\",\n      \"focus-visible:tw-outline-none\",\n      \"focus-visible:tw-ring-2\",\n      \"focus-visible:tw-ring-primary-700\",\n    ];\n  }\n\n  get disabledClassList(): string[] {\n    return [\"!tw-bg-secondary-100\", \"!tw-no-underline\", \"tw-cursor-not-allowed\"];\n  }\n\n  get activeClassList(): string[] {\n    return [\n      \"tw--mb-px\",\n      \"tw-border-x-secondary-300\",\n      \"tw-border-t-primary-500\",\n      \"tw-border-b\",\n      \"tw-border-b-background\",\n      \"tw-bg-background\",\n      \"hover:tw-border-t-primary-700\",\n      \"focus-visible:tw-border-t-primary-700\",\n      \"focus-visible:!tw-text-primary-700\",\n    ];\n  }\n}\n",
            "selector": "[bitTabListItem]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "true",
                    "decorators": []
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "FocusableOption"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabledAttr": {
                    "name": "disabledAttr",
                    "getSignature": {
                        "name": "disabledAttr",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                },
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 29
                    }
                },
                "textColorClassList": {
                    "name": "textColorClassList",
                    "getSignature": {
                        "name": "textColorClassList",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 40,
                        "rawdescription": "\n\nClasses used for styling tab item text color.\nSeparate text color class list required to override bootstrap classes in Web.\n",
                        "description": "<p>Classes used for styling tab item text color.\nSeparate text color class list required to override bootstrap classes in Web.</p>\n"
                    }
                },
                "baseClassList": {
                    "name": "baseClassList",
                    "getSignature": {
                        "name": "baseClassList",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                },
                "disabledClassList": {
                    "name": "disabledClassList",
                    "getSignature": {
                        "name": "disabledClassList",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 73
                    }
                },
                "activeClassList": {
                    "name": "activeClassList",
                    "getSignature": {
                        "name": "activeClassList",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 77
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "ActiveDummyComponent",
            "id": "component-ActiveDummyComponent-e14ae2473b6019fdf5541e4b9ddc84f5c010f16cd5a4dbf33b3b3fd0a38a6ac12a3b389f1d9ede02744befbdb91a635a163515ae5fba33336d6d020cda3a78b4",
            "file": "src/tabs/tabs.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-active-dummy",
            "styleUrls": [],
            "styles": [],
            "template": "Router - Active selected",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { Component } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { ButtonModule } from \"../button\";\nimport { FormFieldModule } from \"../form-field\";\n\nimport { TabGroupComponent } from \"./tab-group/tab-group.component\";\nimport { TabsModule } from \"./tabs.module\";\n\n@Component({\n  selector: \"bit-tab-active-dummy\",\n  template: \"Router - Active selected\",\n})\nclass ActiveDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-item-2-dummy\",\n  template: \"Router - Item 2 selected\",\n})\nclass ItemTwoDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-item-3-dummy\",\n  template: \"Router - Item 3 selected\",\n})\nclass ItemThreeDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-disabled-dummy\",\n  template: \"Router - Disabled selected\",\n})\nclass DisabledDummyComponent {}\n\nexport default {\n  title: \"Component Library/Tabs\",\n  component: TabGroupComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        ActiveDummyComponent,\n        ItemTwoDummyComponent,\n        ItemThreeDummyComponent,\n        DisabledDummyComponent,\n      ],\n      imports: [\n        CommonModule,\n        TabsModule,\n        ButtonModule,\n        FormFieldModule,\n        RouterModule.forRoot(\n          [\n            { path: \"\", redirectTo: \"active\", pathMatch: \"full\" },\n            { path: \"active\", component: ActiveDummyComponent },\n            { path: \"item-2\", component: ItemTwoDummyComponent },\n            { path: \"item-3\", component: ItemThreeDummyComponent },\n            { path: \"disabled\", component: DisabledDummyComponent },\n          ],\n          { useHash: true }\n        ),\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library?node-id=1881%3A17922\",\n    },\n  },\n} as Meta;\n\nconst ContentTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Main Content Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"First Tab\">First Tab Content</bit-tab>\n        <bit-tab label=\"Second Tab\">Second Tab Content</bit-tab>\n        <bit-tab>\n          <ng-template bitTabLabel>\n            <i class=\"bwi bwi-search tw-pr-1\"></i> Template Label\n          </ng-template>\n          Template Label Content\n        </bit-tab>\n        <bit-tab [disabled]=\"true\" label=\"Disabled\">\n          Disabled Content\n        </bit-tab>\n    </bit-tab-group>\n  `,\n});\n\nexport const ContentTabs = ContentTabGroupTemplate.bind({});\n\nconst NavTabGroupTemplate: Story<TabGroupComponent> = (args: TabGroupComponent) => ({\n  props: args,\n  template: `\n    <bit-tab-nav-bar label=\"Main\">\n      <bit-tab-link [route]=\"['active']\">Active</bit-tab-link>\n      <bit-tab-link [route]=\"['item-2']\">Item 2</bit-tab-link>\n      <bit-tab-link [route]=\"['item-3']\">Item 3</bit-tab-link>\n      <bit-tab-link [route]=\"['disable']\" [disabled]=\"true\">Disabled</bit-tab-link>\n    </bit-tab-nav-bar>\n    <div class=\"tw-bg-transparent tw-text-semibold tw-text-center tw-text-main tw-py-10\">\n      <router-outlet></router-outlet>\n    </div>\n  `,\n});\n\nexport const NavigationTabs = NavTabGroupTemplate.bind({});\n\nconst PreserveContentTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Preserve Content Tabs\" [preserveContent]=\"true\" class=\"tw-text-main\">\n        <bit-tab label=\"Text Tab\">\n          <p>\n            Play the video in the other tab and switch back to hear the video is still playing.\n          </p>\n        </bit-tab>\n        <bit-tab label=\"Video Tab\">\n          <iframe\n              width=\"560\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/H0-yWbe5XG4\"\n             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n             allowfullscreen></iframe>\n        </bit-tab>\n    </bit-tab-group>\n  `,\n});\n\nexport const PreserveContentTabs = PreserveContentTabGroupTemplate.bind({});\n\nconst KeyboardNavTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Keyboard Navigation Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"Form Tab\">\n          <p>\n            You can navigate through all tab labels, form inputs, and the button that is outside the tab group via\n            the keyboard.\n          </p>\n          <bit-form-field>\n            <bit-label>First Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>Second Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"No Focusable Content Tab\" [contentTabIndex]=\"0\">\n          <p>This tab has no focusable content, but the panel should still be focusable</p>\n        </bit-tab>\n    </bit-tab-group>\n    <button bitButton buttonType=\"primary\" class=\"tw-mt-5\">External Button</button>\n`,\n});\n\nexport const KeyboardNavigation = KeyboardNavTabGroupTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f771dcf99441681d1efd99b344ad773af094c949acdfefee0e1e158149e99622cf421de34bc3a3dcc08cb2e90846ac6bf9971ca681eaa7a3baff981f42249c77",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "\"components\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  template: \"\",\n})\nexport class AppComponent {\n  title = \"components\";\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-cd88b88aeff9f3ff0ca2c2524517167d3db3eb9aa018869eaa0fe0478f4f645dcecf37589655981fde4c27caf94dd90f3c193666131e8ae4957b417a5c9817b6",
            "file": "src/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-avatar",
            "styleUrls": [],
            "styles": [],
            "template": "<img *ngIf=\"src\" [src]=\"src\" title=\"{{ text }}\" [ngClass]=\"classList\" />",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "border",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "\"default\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "SizeTypes",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sanitizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeResourceUrl",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "svgCharCount",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "svgFontSize",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "svgFontWeight",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "svgSize",
                    "defaultValue": "48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createSvgElement",
                    "args": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTextElement",
                    "args": [
                        {
                            "name": "character",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "character",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getFirstLetters",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unicodeSafeSubstring",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from \"@angular/core\";\nimport { DomSanitizer, SafeResourceUrl } from \"@angular/platform-browser\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\ntype SizeTypes = \"large\" | \"default\" | \"small\";\n\nconst SizeClasses: Record<SizeTypes, string[]> = {\n  large: [\"tw-h-16\", \"tw-w-16\"],\n  default: [\"tw-h-12\", \"tw-w-12\"],\n  small: [\"tw-h-7\", \"tw-w-7\"],\n};\n\n@Component({\n  selector: \"bit-avatar\",\n  template: `<img *ngIf=\"src\" [src]=\"src\" title=\"{{ text }}\" [ngClass]=\"classList\" />`,\n})\nexport class AvatarComponent implements OnChanges {\n  @Input() border = false;\n  @Input() color?: string;\n  @Input() id?: string;\n  @Input() text?: string;\n  @Input() size: SizeTypes = \"default\";\n\n  private svgCharCount = 2;\n  private svgFontSize = 20;\n  private svgFontWeight = 300;\n  private svgSize = 48;\n  src: SafeResourceUrl;\n\n  constructor(public sanitizer: DomSanitizer) {}\n\n  ngOnChanges() {\n    this.generate();\n  }\n\n  get classList() {\n    return [\"tw-rounded-full\"]\n      .concat(SizeClasses[this.size] ?? [])\n      .concat(this.border ? [\"tw-border\", \"tw-border-solid\", \"tw-border-secondary-500\"] : []);\n  }\n\n  private generate() {\n    let chars: string = null;\n    const upperCaseText = this.text?.toUpperCase() ?? \"\";\n\n    chars = this.getFirstLetters(upperCaseText, this.svgCharCount);\n\n    if (chars == null) {\n      chars = this.unicodeSafeSubstring(upperCaseText, this.svgCharCount);\n    }\n\n    // If the chars contain an emoji, only show it.\n    if (chars.match(Utils.regexpEmojiPresentation)) {\n      chars = chars.match(Utils.regexpEmojiPresentation)[0];\n    }\n\n    let svg: HTMLElement;\n    let hexColor = this.color;\n\n    if (!Utils.isNullOrWhitespace(this.color)) {\n      svg = this.createSvgElement(this.svgSize, hexColor);\n    } else if (!Utils.isNullOrWhitespace(this.id)) {\n      hexColor = Utils.stringToColor(this.id.toString());\n      svg = this.createSvgElement(this.svgSize, hexColor);\n    } else {\n      hexColor = Utils.stringToColor(upperCaseText);\n      svg = this.createSvgElement(this.svgSize, hexColor);\n    }\n\n    const charObj = this.createTextElement(chars, hexColor);\n    svg.appendChild(charObj);\n    const html = window.document.createElement(\"div\").appendChild(svg).outerHTML;\n    const svgHtml = window.btoa(unescape(encodeURIComponent(html)));\n    this.src = this.sanitizer.bypassSecurityTrustResourceUrl(\n      \"data:image/svg+xml;base64,\" + svgHtml\n    );\n  }\n\n  private getFirstLetters(data: string, count: number): string {\n    const parts = data.split(\" \");\n    if (parts.length > 1) {\n      let text = \"\";\n      for (let i = 0; i < count; i++) {\n        text += this.unicodeSafeSubstring(parts[i], 1);\n      }\n      return text;\n    }\n    return null;\n  }\n\n  private createSvgElement(size: number, color: string): HTMLElement {\n    const svgTag = window.document.createElement(\"svg\");\n    svgTag.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    svgTag.setAttribute(\"pointer-events\", \"none\");\n    svgTag.setAttribute(\"width\", size.toString());\n    svgTag.setAttribute(\"height\", size.toString());\n    svgTag.style.backgroundColor = color;\n    svgTag.style.width = size + \"px\";\n    svgTag.style.height = size + \"px\";\n    return svgTag;\n  }\n\n  private createTextElement(character: string, color: string): HTMLElement {\n    const textTag = window.document.createElement(\"text\");\n    textTag.setAttribute(\"text-anchor\", \"middle\");\n    textTag.setAttribute(\"y\", \"50%\");\n    textTag.setAttribute(\"x\", \"50%\");\n    textTag.setAttribute(\"dy\", \"0.35em\");\n    textTag.setAttribute(\"pointer-events\", \"auto\");\n    textTag.setAttribute(\"fill\", Utils.pickTextColorBasedOnBgColor(color, 135, true));\n    textTag.setAttribute(\n      \"font-family\",\n      '\"Open Sans\",\"Helvetica Neue\",Helvetica,Arial,' +\n        'sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\"'\n    );\n    textTag.textContent = character;\n    textTag.style.fontWeight = this.svgFontWeight.toString();\n    textTag.style.fontSize = this.svgFontSize + \"px\";\n    return textTag;\n  }\n\n  private unicodeSafeSubstring(str: string, count: number) {\n    const characters = str.match(/./gu);\n    return characters != null ? characters.slice(0, count).join(\"\") : \"\";\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                }
            }
        },
        {
            "name": "BannerComponent",
            "id": "component-BannerComponent-101779ea82e291580c3aa36c5a5e65cdb66c1528b057dcd099f3ce8aeb312dadf14fd9a1600722ac48dfce68115971a67e231298d05e33f00c1b592e7532088f",
            "file": "src/banner/banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-banner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bannerType",
                    "defaultValue": "\"info\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "BannerTypes",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useAlertRole",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from \"@angular/core\";\n\ntype BannerTypes = \"premium\" | \"info\" | \"warning\" | \"danger\";\n\nconst defaultIcon: Record<BannerTypes, string> = {\n  premium: \"bwi-star\",\n  info: \"bwi-info-circle\",\n  warning: \"bwi-exclamation-triangle\",\n  danger: \"bwi-error\",\n};\n\n@Component({\n  selector: \"bit-banner\",\n  templateUrl: \"./banner.component.html\",\n})\nexport class BannerComponent implements OnInit {\n  @Input(\"bannerType\") bannerType: BannerTypes = \"info\";\n  @Input() icon: string;\n  @Input() useAlertRole = true;\n\n  @Output() onClose = new EventEmitter<void>();\n\n  ngOnInit(): void {\n    this.icon ??= defaultIcon[this.bannerType];\n  }\n\n  get bannerClass() {\n    switch (this.bannerType) {\n      case \"danger\":\n        return \"tw-bg-danger-500\";\n      case \"info\":\n        return \"tw-bg-info-500\";\n      case \"premium\":\n        return \"tw-bg-success-500\";\n      case \"warning\":\n        return \"tw-bg-warning-500\";\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "bannerClass": {
                    "name": "bannerClass",
                    "getSignature": {
                        "name": "bannerClass",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<div\n  class=\"tw-flex tw-items-center tw-gap-2 tw-py-2.5 tw-px-4 tw-pr-2.5 tw-text-contrast\"\n  [ngClass]=\"bannerClass\"\n  [attr.role]=\"useAlertRole ? 'status' : null\"\n  [attr.aria-live]=\"useAlertRole ? 'polite' : null\"\n>\n  <i class=\"bwi tw-align-middle\" [ngClass]=\"icon\" *ngIf=\"icon\" aria-hidden=\"true\"></i>\n  <span class=\"tw-grow tw-text-base\">\n    <ng-content></ng-content>\n  </span>\n  <button\n    bitIconButton=\"bwi-close\"\n    buttonType=\"contrast\"\n    size=\"default\"\n    (click)=\"onClose.emit()\"\n    [attr.title]=\"'close' | i18n\"\n    [attr.aria-label]=\"'close' | i18n\"\n  ></button>\n</div>\n"
        },
        {
            "name": "BitErrorComponent",
            "id": "component-BitErrorComponent-22e8a546c3eeb1364a8948081c5de7e6e6fd7491d8ac9779765911f49147c14b574bcbec86dca049615c9ba21f9eb70d506aafee19e85137ae48bd6c1c6f4193",
            "file": "src/form-field/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-error",
            "styleUrls": [],
            "styles": [],
            "template": "<i class=\"bwi bwi-error\"></i> {{ displayError }}",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "[string, any]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`bit-error-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "id",
                    "defaultValue": "`bit-error-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\n// Increments for each instance of this component\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-error\",\n  template: `<i class=\"bwi bwi-error\"></i> {{ displayError }}`,\n  host: {\n    class: \"tw-block tw-mt-1 tw-text-danger\",\n    \"aria-live\": \"assertive\",\n  },\n})\nexport class BitErrorComponent {\n  @HostBinding() id = `bit-error-${nextId++}`;\n\n  @Input() error: [string, any];\n\n  constructor(private i18nService: I18nService) {}\n\n  get displayError() {\n    switch (this.error[0]) {\n      case \"required\":\n        return this.i18nService.t(\"inputRequired\");\n      case \"email\":\n        return this.i18nService.t(\"inputEmail\");\n      case \"minlength\":\n        return this.i18nService.t(\"inputMinLength\", this.error[1]?.requiredLength);\n      case \"maxlength\":\n        return this.i18nService.t(\"inputMaxLength\", this.error[1]?.requiredLength);\n      default:\n        // Attempt to show a custom error message.\n        if (this.error[1]?.message) {\n          return this.error[1]?.message;\n        }\n\n        return this.error;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "displayError": {
                    "name": "displayError",
                    "getSignature": {
                        "name": "displayError",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            }
        },
        {
            "name": "BitErrorSummary",
            "id": "component-BitErrorSummary-26c0c52e64a406860069d0d377675cebde02a2b3ee4f459fd72f88dbc89539e7861ba50b4b9fb84b01c80809f183be2829c6a3bf7d37f3829c638be4a33c63dc",
            "file": "src/form-field/error-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-error-summary",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"errorCount > 0\">   <i class=\"bwi bwi-error\"></i> {{ \"fieldsNeedAttention\" | i18n: errorString }}\n </ng-container>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "UntypedFormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getErrorCount",
                    "args": [
                        {
                            "name": "form",
                            "type": "UntypedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "UntypedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\nimport { AbstractControl, UntypedFormGroup } from \"@angular/forms\";\n\n@Component({\n  selector: \"bit-error-summary\",\n  template: ` <ng-container *ngIf=\"errorCount > 0\">\n    <i class=\"bwi bwi-error\"></i> {{ \"fieldsNeedAttention\" | i18n: errorString }}\n  </ng-container>`,\n  host: {\n    class: \"tw-block tw-text-danger tw-mt-2\",\n    \"aria-live\": \"assertive\",\n  },\n})\nexport class BitErrorSummary {\n  @Input()\n  formGroup: UntypedFormGroup;\n\n  get errorCount(): number {\n    return this.getErrorCount(this.formGroup);\n  }\n\n  get errorString() {\n    return this.errorCount.toString();\n  }\n\n  private getErrorCount(form: UntypedFormGroup): number {\n    return Object.values(form.controls).reduce((acc: number, control: AbstractControl) => {\n      if (control instanceof UntypedFormGroup) {\n        return acc + this.getErrorCount(control);\n      }\n\n      if (control.errors == null) {\n        return acc;\n      }\n\n      if (!control.dirty && control.untouched) {\n        return acc;\n      }\n\n      return acc + Object.keys(control.errors).length;\n    }, 0);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "errorCount": {
                    "name": "errorCount",
                    "getSignature": {
                        "name": "errorCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 18
                    }
                },
                "errorString": {
                    "name": "errorString",
                    "getSignature": {
                        "name": "errorString",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            }
        },
        {
            "name": "BitFormFieldComponent",
            "id": "component-BitFormFieldComponent-b2c798d8910ab8e25214293a909bc4d3fb8b8750eb447b338304a54f0f0b2dcaba9e3e8180cbe70be14c2e2b5317d9eac93eb81e58692c414940bffd56d7ac00",
            "file": "src/form-field/form-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-form-field",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BitErrorComponent",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BitErrorComponent"
                        }
                    ]
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BitHintComponent",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "BitHintComponent"
                        }
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BitFormFieldControl",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "BitFormFieldControl"
                        }
                    ]
                },
                {
                    "name": "prefixChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<BitPrefixDirective>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "BitPrefixDirective"
                        }
                    ]
                },
                {
                    "name": "suffixChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<BitSuffixDirective>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "BitSuffixDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentChecked,\n  Component,\n  ContentChild,\n  ContentChildren,\n  QueryList,\n  ViewChild,\n} from \"@angular/core\";\n\nimport { BitErrorComponent } from \"./error.component\";\nimport { BitFormFieldControl } from \"./form-field-control\";\nimport { BitHintComponent } from \"./hint.component\";\nimport { BitPrefixDirective } from \"./prefix.directive\";\nimport { BitSuffixDirective } from \"./suffix.directive\";\n\n@Component({\n  selector: \"bit-form-field\",\n  templateUrl: \"./form-field.component.html\",\n  host: {\n    class: \"tw-mb-6 tw-block\",\n  },\n})\nexport class BitFormFieldComponent implements AfterContentChecked {\n  @ContentChild(BitFormFieldControl) input: BitFormFieldControl;\n  @ContentChild(BitHintComponent) hint: BitHintComponent;\n\n  @ViewChild(BitErrorComponent) error: BitErrorComponent;\n\n  @ContentChildren(BitPrefixDirective) prefixChildren: QueryList<BitPrefixDirective>;\n  @ContentChildren(BitSuffixDirective) suffixChildren: QueryList<BitSuffixDirective>;\n\n  ngAfterContentChecked(): void {\n    if (this.error) {\n      this.input.ariaDescribedBy = this.error.id;\n    } else if (this.hint) {\n      this.input.ariaDescribedBy = this.hint.id;\n    } else {\n      this.input.ariaDescribedBy = undefined;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterContentChecked"
            ],
            "templateData": "<label class=\"tw-mb-1 tw-block tw-font-semibold tw-text-main\" [attr.for]=\"input.labelForId\">\n  <ng-content select=\"bit-label\"></ng-content>\n  <span *ngIf=\"input.required\" class=\"tw-text-xs tw-font-normal\"> ({{ \"required\" | i18n }})</span>\n</label>\n<div class=\"tw-flex\">\n  <div *ngIf=\"prefixChildren.length\" class=\"tw-flex\">\n    <ng-content select=\"[bitPrefix]\"></ng-content>\n  </div>\n  <ng-content></ng-content>\n  <div *ngIf=\"suffixChildren.length\" class=\"tw-flex\">\n    <ng-content select=\"[bitSuffix]\"></ng-content>\n  </div>\n</div>\n<ng-container [ngSwitch]=\"input.hasError\">\n  <ng-content select=\"bit-hint\" *ngSwitchCase=\"false\"></ng-content>\n  <bit-error [error]=\"input.error\" *ngSwitchCase=\"true\"></bit-error>\n</ng-container>\n"
        },
        {
            "name": "BitIconButtonComponent",
            "id": "component-BitIconButtonComponent-8e63fff88388b568ec9e83eef84eb73c8be9fdc473dff8b626bb9b7d467a28feff6e71e49cd50d6af227b40249c6c099084897595ef6a17a234834ec9ae45c84",
            "file": "src/icon-button/icon-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: ButtonLikeAbstraction, useExisting: BitIconButtonComponent }",
                    "type": "component"
                }
            ],
            "selector": "button[bitIconButton]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "icon-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bitIconButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonType",
                    "defaultValue": "\"main\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "IconButtonType",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 135,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "\"default\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "IconButtonSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from \"@angular/core\";\n\nimport { ButtonLikeAbstraction } from \"../shared/button-like.abstraction\";\n\nexport type IconButtonType = \"contrast\" | \"main\" | \"muted\" | \"primary\" | \"secondary\" | \"danger\";\n\nconst styles: Record<IconButtonType, string[]> = {\n  contrast: [\n    \"tw-bg-transparent\",\n    \"!tw-text-contrast\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-text-contrast\",\n    \"focus-visible:before:tw-ring-text-contrast\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  main: [\n    \"tw-bg-transparent\",\n    \"!tw-text-main\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-text-main\",\n    \"focus-visible:before:tw-ring-text-main\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  muted: [\n    \"tw-bg-transparent\",\n    \"!tw-text-muted\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-primary-700\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  primary: [\n    \"tw-bg-primary-500\",\n    \"!tw-text-contrast\",\n    \"tw-border-primary-500\",\n    \"hover:tw-bg-primary-700\",\n    \"hover:tw-border-primary-700\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-primary-500\",\n    \"disabled:hover:tw-bg-primary-500\",\n  ],\n  secondary: [\n    \"tw-bg-transparent\",\n    \"!tw-text-muted\",\n    \"tw-border-text-muted\",\n    \"hover:!tw-text-contrast\",\n    \"hover:tw-bg-text-muted\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-text-muted\",\n    \"disabled:hover:tw-bg-transparent\",\n    \"disabled:hover:!tw-text-muted\",\n    \"disabled:hover:tw-border-text-muted\",\n  ],\n  danger: [\n    \"tw-bg-transparent\",\n    \"!tw-text-danger\",\n    \"tw-border-danger-500\",\n    \"hover:!tw-text-contrast\",\n    \"hover:tw-bg-danger-500\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-danger-500\",\n    \"disabled:hover:tw-bg-transparent\",\n    \"disabled:hover:!tw-text-danger\",\n    \"disabled:hover:tw-border-danger-500\",\n  ],\n};\n\nexport type IconButtonSize = \"default\" | \"small\";\n\nconst sizes: Record<IconButtonSize, string[]> = {\n  default: [\"tw-px-2.5\", \"tw-py-1.5\"],\n  small: [\"tw-leading-none\", \"tw-text-base\", \"tw-p-1\"],\n};\n\n@Component({\n  selector: \"button[bitIconButton]\",\n  templateUrl: \"icon-button.component.html\",\n  providers: [{ provide: ButtonLikeAbstraction, useExisting: BitIconButtonComponent }],\n})\nexport class BitIconButtonComponent implements ButtonLikeAbstraction {\n  @Input(\"bitIconButton\") icon: string;\n\n  @Input() buttonType: IconButtonType = \"main\";\n\n  @Input() size: IconButtonSize = \"default\";\n\n  @HostBinding(\"class\") get classList() {\n    return [\n      \"tw-font-semibold\",\n      \"tw-border\",\n      \"tw-border-solid\",\n      \"tw-rounded\",\n      \"tw-transition\",\n      \"hover:tw-no-underline\",\n      \"disabled:tw-opacity-60\",\n      \"focus:tw-outline-none\",\n\n      // Workaround for box-shadow with transparent offset issue:\n      // https://github.com/tailwindlabs/tailwindcss/issues/3595\n      // Remove `before:` and use regular `tw-ring` when browser no longer has bug, or better:\n      // switch to `outline` with `outline-offset` when Safari supports border radius on outline.\n      // Using `box-shadow` to create outlines is a hack and as such `outline` should be preferred.\n      \"tw-relative\",\n      \"before:tw-content-['']\",\n      \"before:tw-block\",\n      \"before:tw-absolute\",\n      \"before:-tw-inset-[3px]\",\n      \"before:tw-rounded-md\",\n      \"before:tw-transition\",\n      \"before:tw-ring\",\n      \"before:tw-ring-transparent\",\n      \"focus-visible:before:tw-ring-text-contrast\",\n      \"focus-visible:tw-z-10\",\n    ]\n      .concat(styles[this.buttonType])\n      .concat(sizes[this.size]);\n  }\n\n  get iconClass() {\n    return [this.icon, \"!tw-m-0\"];\n  }\n\n  @HostBinding(\"attr.disabled\")\n  get disabledAttr() {\n    const disabled = this.disabled != null && this.disabled !== false;\n    return disabled || this.loading ? true : null;\n  }\n\n  @Input() loading = false;\n  @Input() disabled = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ButtonLikeAbstraction"
            ],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                },
                "iconClass": {
                    "name": "iconClass",
                    "getSignature": {
                        "name": "iconClass",
                        "type": "",
                        "returnType": "",
                        "line": 125
                    }
                },
                "disabledAttr": {
                    "name": "disabledAttr",
                    "getSignature": {
                        "name": "disabledAttr",
                        "type": "",
                        "returnType": "",
                        "line": 130
                    }
                }
            },
            "templateData": "<span class=\"tw-relative\">\n  <span [ngClass]=\"{ 'tw-invisible': loading }\">\n    <i class=\"bwi\" [ngClass]=\"iconClass\" aria-hidden=\"true\"></i>\n  </span>\n  <span\n    class=\"tw-absolute tw-inset-0 tw-flex tw-items-center tw-justify-center\"\n    [ngClass]=\"{ 'tw-invisible': !loading }\"\n  >\n    <i\n      class=\"bwi bwi-spinner bwi-spin\"\n      aria-hidden=\"true\"\n      [ngClass]=\"{ 'bwi-lg': size === 'default' }\"\n    ></i>\n  </span>\n</span>\n"
        },
        {
            "name": "BitIconComponent",
            "id": "component-BitIconComponent-fc657eba1c780b9e085cef754b94cac12795b016fafdd629e894c96c0902c3117fbe4ce65958ae028bb3f7832ae7c1e05449a25fe7774b6b8485cb41dca2c047",
            "file": "src/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-icon",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Icon",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "innerHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\nimport { Icon, isIcon } from \"./icon\";\n\n@Component({\n  selector: \"bit-icon\",\n  template: ``,\n})\nexport class BitIconComponent {\n  @Input() icon: Icon;\n\n  @HostBinding()\n  protected get innerHtml() {\n    if (!isIcon(this.icon)) {\n      return \"\";\n    }\n\n    const svg = this.icon.svg;\n    return this.domSanitizer.bypassSecurityTrustHtml(svg);\n  }\n\n  constructor(private domSanitizer: DomSanitizer) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "innerHtml": {
                    "name": "innerHtml",
                    "getSignature": {
                        "name": "innerHtml",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7fe1969b23e4176d3c2a49d54747ac1cc7e62eb3ca36101cd256721c1cdf3136c4b0552b9d909657f26e8bb237164f425aad151a101bc5052aa99ebe3569fd42",
            "file": "src/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: ButtonLikeAbstraction, useExisting: ButtonComponent }",
                    "type": "component"
                }
            ],
            "selector": "button[bitButton], a[bitButton]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "block",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "ButtonTypes",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Input, HostBinding, Component } from \"@angular/core\";\n\nimport { ButtonLikeAbstraction } from \"../shared/button-like.abstraction\";\n\nexport type ButtonTypes = \"primary\" | \"secondary\" | \"danger\";\n\nconst buttonStyles: Record<ButtonTypes, string[]> = {\n  primary: [\n    \"tw-border-primary-500\",\n    \"tw-bg-primary-500\",\n    \"!tw-text-contrast\",\n    \"hover:tw-bg-primary-700\",\n    \"hover:tw-border-primary-700\",\n    \"disabled:tw-bg-primary-500/60\",\n    \"disabled:tw-border-primary-500/60\",\n    \"disabled:!tw-text-contrast/60\",\n    \"disabled:tw-bg-clip-padding\",\n  ],\n  secondary: [\n    \"tw-bg-transparent\",\n    \"tw-border-text-muted\",\n    \"!tw-text-muted\",\n    \"hover:tw-bg-secondary-500\",\n    \"hover:tw-border-secondary-500\",\n    \"hover:!tw-text-contrast\",\n    \"disabled:tw-bg-transparent\",\n    \"disabled:tw-border-text-muted/60\",\n    \"disabled:!tw-text-muted/60\",\n  ],\n  danger: [\n    \"tw-bg-transparent\",\n    \"tw-border-danger-500\",\n    \"!tw-text-danger\",\n    \"hover:tw-bg-danger-500\",\n    \"hover:tw-border-danger-500\",\n    \"hover:!tw-text-contrast\",\n    \"disabled:tw-bg-transparent\",\n    \"disabled:tw-border-danger-500/60\",\n    \"disabled:!tw-text-danger/60\",\n  ],\n};\n\n@Component({\n  selector: \"button[bitButton], a[bitButton]\",\n  templateUrl: \"button.component.html\",\n  providers: [{ provide: ButtonLikeAbstraction, useExisting: ButtonComponent }],\n})\nexport class ButtonComponent implements ButtonLikeAbstraction {\n  @HostBinding(\"class\") get classList() {\n    return [\n      \"tw-font-semibold\",\n      \"tw-py-1.5\",\n      \"tw-px-3\",\n      \"tw-rounded\",\n      \"tw-transition\",\n      \"tw-border\",\n      \"tw-border-solid\",\n      \"tw-text-center\",\n      \"hover:tw-no-underline\",\n      \"focus:tw-outline-none\",\n      \"focus-visible:tw-ring\",\n      \"focus-visible:tw-ring-offset-2\",\n      \"focus-visible:tw-ring-primary-700\",\n      \"focus-visible:tw-z-10\",\n    ]\n      .concat(\n        this.block == null || this.block === false ? [\"tw-inline-block\"] : [\"tw-w-full\", \"tw-block\"]\n      )\n      .concat(buttonStyles[this.buttonType ?? \"secondary\"]);\n  }\n\n  @HostBinding(\"attr.disabled\")\n  get disabledAttr() {\n    const disabled = this.disabled != null && this.disabled !== false;\n    return disabled || this.loading ? true : null;\n  }\n\n  @Input() buttonType: ButtonTypes = null;\n  @Input() block?: boolean;\n  @Input() loading = false;\n  @Input() disabled = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "ButtonLikeAbstraction"
            ],
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 49
                    }
                },
                "disabledAttr": {
                    "name": "disabledAttr",
                    "getSignature": {
                        "name": "disabledAttr",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                }
            },
            "templateData": "<span class=\"tw-relative\">\n  <span [ngClass]=\"{ 'tw-invisible': loading }\">\n    <ng-content></ng-content>\n  </span>\n  <span\n    class=\"tw-absolute tw-inset-0 tw-flex tw-items-center tw-justify-center\"\n    [ngClass]=\"{ 'tw-invisible': !loading }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-lg bwi-spin\" aria-hidden=\"true\"></i>\n  </span>\n</span>\n"
        },
        {
            "name": "CalloutComponent",
            "id": "component-CalloutComponent-1d8bbe545d423acc0d56dcf362e998318bd1a48d384ab4640b18d94502c02c2bad93d8c7173b9906cdcc7940b8122881ac51a8e329f8b8986b6f1102caa321c3",
            "file": "src/callout/callout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-callout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "callout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"info\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "CalloutTypes",
                    "decorators": []
                },
                {
                    "name": "useAlertRole",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\ntype CalloutTypes = \"success\" | \"info\" | \"warning\" | \"danger\";\n\nconst defaultIcon: Record<CalloutTypes, string> = {\n  success: \"bwi-check\",\n  info: \"bwi-info-circle\",\n  warning: \"bwi-exclamation-triangle\",\n  danger: \"bwi-error\",\n};\n\nconst defaultI18n: Partial<Record<CalloutTypes, string>> = {\n  warning: \"warning\",\n  danger: \"error\",\n};\n\n@Component({\n  selector: \"bit-callout\",\n  templateUrl: \"callout.component.html\",\n})\nexport class CalloutComponent implements OnInit {\n  @Input() type: CalloutTypes = \"info\";\n  @Input() icon: string;\n  @Input() title: string;\n  @Input() useAlertRole = false;\n\n  constructor(private i18nService: I18nService) {}\n\n  ngOnInit() {\n    this.icon ??= defaultIcon[this.type];\n    if (this.title == null && defaultI18n[this.type] != null) {\n      this.title = this.i18nService.t(defaultI18n[this.type]);\n    }\n  }\n\n  get calloutClass() {\n    switch (this.type) {\n      case \"danger\":\n        return \"tw-border-l-danger-500\";\n      case \"info\":\n        return \"tw-border-l-info-500\";\n      case \"success\":\n        return \"tw-border-l-success-500\";\n      case \"warning\":\n        return \"tw-border-l-warning-500\";\n    }\n  }\n\n  get headerClass() {\n    switch (this.type) {\n      case \"danger\":\n        return \"!tw-text-danger\";\n      case \"info\":\n        return \"!tw-text-info\";\n      case \"success\":\n        return \"!tw-text-success\";\n      case \"warning\":\n        return \"!tw-text-warning\";\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "calloutClass": {
                    "name": "calloutClass",
                    "getSignature": {
                        "name": "calloutClass",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "headerClass": {
                    "name": "headerClass",
                    "getSignature": {
                        "name": "headerClass",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                }
            },
            "templateData": "<div\n  class=\"tw-mb-4 tw-box-border tw-rounded tw-border tw-border-l-8 tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-py-3 tw-px-5 tw-leading-5 tw-text-main\"\n  [ngClass]=\"calloutClass\"\n>\n  <h3\n    class=\"tw-mt-0 tw-mb-2 tw-text-base tw-font-bold tw-uppercase\"\n    [ngClass]=\"headerClass\"\n    *ngIf=\"title\"\n  >\n    <i class=\"bwi {{ icon }}\" *ngIf=\"icon\" aria-hidden=\"true\"></i>\n    {{ title }}\n  </h3>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ColorPasswordComponent",
            "id": "component-ColorPasswordComponent-093b5b20b52592c8224c908e9ea53e7f831b4816f812e9f9b1fc00c82f81c080d48eed02c644ac737023dc8a74bb7c2a8917557130733cf97171eb7337cf3887",
            "file": "src/color-password/color-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-color-password",
            "styleUrls": [],
            "styles": [],
            "template": "<div    *ngFor=\"let character of passwordArray; index as i\"\n    [class]=\"getCharacterClass(character)\"\n  >\n    <span>{{ character }}</span>\n    <span *ngIf=\"showCount\" class=\"tw-whitespace-nowrap tw-text-xs tw-leading-5 tw-text-main\">{{\n      i + 1\n    }}</span>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "password",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCount",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "characterStyles",
                    "defaultValue": "{\n    [CharacterType.Emoji]: [],\n    [CharacterType.Letter]: [\"tw-text-main\"],\n    [CharacterType.Special]: [\"tw-text-danger\"],\n    [CharacterType.Number]: [\"tw-text-primary-500\"],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<CharacterType | string[]>",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "getCharacterClass",
                    "args": [
                        {
                            "name": "character",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "character",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCharacterType",
                    "args": [
                        {
                            "name": "character",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CharacterType",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "character",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "{}",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from \"@angular/core\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nenum CharacterType {\n  Letter,\n  Emoji,\n  Special,\n  Number,\n}\n\n@Component({\n  selector: \"bit-color-password\",\n  template: `<div\n    *ngFor=\"let character of passwordArray; index as i\"\n    [class]=\"getCharacterClass(character)\"\n  >\n    <span>{{ character }}</span>\n    <span *ngIf=\"showCount\" class=\"tw-whitespace-nowrap tw-text-xs tw-leading-5 tw-text-main\">{{\n      i + 1\n    }}</span>\n  </div>`,\n})\nexport class ColorPasswordComponent {\n  @Input() private password: string = null;\n  @Input() showCount = false;\n\n  characterStyles: Record<CharacterType, string[]> = {\n    [CharacterType.Emoji]: [],\n    [CharacterType.Letter]: [\"tw-text-main\"],\n    [CharacterType.Special]: [\"tw-text-danger\"],\n    [CharacterType.Number]: [\"tw-text-primary-500\"],\n  };\n\n  @HostBinding(\"class\")\n  get classList() {\n    return [\"tw-min-w-0\", \"tw-whitespace-pre-wrap\", \"tw-break-all\"];\n  }\n\n  get passwordArray() {\n    // Convert to an array to handle cases that strings have special characters, i.e.: emoji.\n    return Array.from(this.password);\n  }\n\n  getCharacterClass(character: string) {\n    const charType = this.getCharacterType(character);\n    const charClass = this.characterStyles[charType].concat(\"tw-inline-flex\");\n\n    if (this.showCount) {\n      return charClass.concat([\n        \"tw-inline-flex\",\n        \"tw-flex-col\",\n        \"tw-items-center\",\n        \"tw-w-7\",\n        \"tw-py-1\",\n        \"odd:tw-bg-secondary-100\",\n      ]);\n    }\n\n    return charClass;\n  }\n\n  private getCharacterType(character: string): CharacterType {\n    if (character.match(Utils.regexpEmojiPresentation)) {\n      return CharacterType.Emoji;\n    }\n\n    if (character.match(/\\d/)) {\n      return CharacterType.Number;\n    }\n\n    const specials = [\"&\", \"<\", \">\", \" \"];\n    if (specials.includes(character) || character.match(/[^\\w ]/)) {\n      return CharacterType.Special;\n    }\n\n    return CharacterType.Letter;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "classList": {
                    "name": "classList",
                    "getSignature": {
                        "name": "classList",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                },
                "passwordArray": {
                    "name": "passwordArray",
                    "getSignature": {
                        "name": "passwordArray",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                }
            }
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-978b21b228d389216c7ba53f7cb45c0753cdce8bacccd2a7a3401574aca4005378f9c58f5e9e89a55ffe72c71a8fd288708cc9de67fa16548b34b38dffa04130",
            "file": "src/dialog/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dialogSize",
                    "defaultValue": "\"default\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"small\" | \"default\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "disablePadding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disablePadding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-dialog\",\n  templateUrl: \"./dialog.component.html\",\n})\nexport class DialogComponent {\n  @Input() dialogSize: \"small\" | \"default\" | \"large\" = \"default\";\n\n  private _disablePadding: boolean;\n  @Input() set disablePadding(value: boolean) {\n    this._disablePadding = coerceBooleanProperty(value);\n  }\n  get disablePadding() {\n    return this._disablePadding;\n  }\n\n  get width() {\n    switch (this.dialogSize) {\n      case \"small\": {\n        return \"tw-w-96\";\n      }\n      case \"large\": {\n        return \"tw-w-75vw\";\n      }\n      default: {\n        return \"tw-w-50vw\";\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "disablePadding": {
                    "name": "disablePadding",
                    "setSignature": {
                        "name": "disablePadding",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disablePadding",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                },
                "width": {
                    "name": "width",
                    "getSignature": {
                        "name": "width",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                }
            },
            "templateData": "<div\n  [ngClass]=\"width\"\n  class=\"tw-my-4 tw-flex tw-max-h-screen tw-flex-col tw-overflow-hidden tw-rounded tw-border tw-border-solid tw-border-secondary-300 tw-bg-text-contrast tw-text-main\"\n>\n  <div\n    class=\"tw-flex tw-items-center tw-gap-4 tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300 tw-p-4\"\n  >\n    <h1 bitDialogTitleContainer class=\"tw-mb-0 tw-grow tw-text-lg tw-uppercase\">\n      <ng-content select=\"[bitDialogTitle]\"></ng-content>\n    </h1>\n    <button\n      type=\"button\"\n      bitIconButton=\"bwi-close\"\n      buttonType=\"main\"\n      size=\"default\"\n      bitDialogClose\n      [attr.title]=\"'close' | i18n\"\n      [attr.aria-label]=\"'close' | i18n\"\n    ></button>\n  </div>\n\n  <div class=\"tw-overflow-y-auto tw-pb-8\" [ngClass]=\"{ 'tw-p-4': !disablePadding }\">\n    <ng-content select=\"[bitDialogContent]\"></ng-content>\n  </div>\n\n  <div\n    class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-4\"\n  >\n    <ng-content select=\"[bitDialogFooter]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "DisabledDummyComponent",
            "id": "component-DisabledDummyComponent-e14ae2473b6019fdf5541e4b9ddc84f5c010f16cd5a4dbf33b3b3fd0a38a6ac12a3b389f1d9ede02744befbdb91a635a163515ae5fba33336d6d020cda3a78b4",
            "file": "src/tabs/tabs.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-disabled-dummy",
            "styleUrls": [],
            "styles": [],
            "template": "Router - Disabled selected",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { Component } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { ButtonModule } from \"../button\";\nimport { FormFieldModule } from \"../form-field\";\n\nimport { TabGroupComponent } from \"./tab-group/tab-group.component\";\nimport { TabsModule } from \"./tabs.module\";\n\n@Component({\n  selector: \"bit-tab-active-dummy\",\n  template: \"Router - Active selected\",\n})\nclass ActiveDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-item-2-dummy\",\n  template: \"Router - Item 2 selected\",\n})\nclass ItemTwoDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-item-3-dummy\",\n  template: \"Router - Item 3 selected\",\n})\nclass ItemThreeDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-disabled-dummy\",\n  template: \"Router - Disabled selected\",\n})\nclass DisabledDummyComponent {}\n\nexport default {\n  title: \"Component Library/Tabs\",\n  component: TabGroupComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        ActiveDummyComponent,\n        ItemTwoDummyComponent,\n        ItemThreeDummyComponent,\n        DisabledDummyComponent,\n      ],\n      imports: [\n        CommonModule,\n        TabsModule,\n        ButtonModule,\n        FormFieldModule,\n        RouterModule.forRoot(\n          [\n            { path: \"\", redirectTo: \"active\", pathMatch: \"full\" },\n            { path: \"active\", component: ActiveDummyComponent },\n            { path: \"item-2\", component: ItemTwoDummyComponent },\n            { path: \"item-3\", component: ItemThreeDummyComponent },\n            { path: \"disabled\", component: DisabledDummyComponent },\n          ],\n          { useHash: true }\n        ),\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library?node-id=1881%3A17922\",\n    },\n  },\n} as Meta;\n\nconst ContentTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Main Content Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"First Tab\">First Tab Content</bit-tab>\n        <bit-tab label=\"Second Tab\">Second Tab Content</bit-tab>\n        <bit-tab>\n          <ng-template bitTabLabel>\n            <i class=\"bwi bwi-search tw-pr-1\"></i> Template Label\n          </ng-template>\n          Template Label Content\n        </bit-tab>\n        <bit-tab [disabled]=\"true\" label=\"Disabled\">\n          Disabled Content\n        </bit-tab>\n    </bit-tab-group>\n  `,\n});\n\nexport const ContentTabs = ContentTabGroupTemplate.bind({});\n\nconst NavTabGroupTemplate: Story<TabGroupComponent> = (args: TabGroupComponent) => ({\n  props: args,\n  template: `\n    <bit-tab-nav-bar label=\"Main\">\n      <bit-tab-link [route]=\"['active']\">Active</bit-tab-link>\n      <bit-tab-link [route]=\"['item-2']\">Item 2</bit-tab-link>\n      <bit-tab-link [route]=\"['item-3']\">Item 3</bit-tab-link>\n      <bit-tab-link [route]=\"['disable']\" [disabled]=\"true\">Disabled</bit-tab-link>\n    </bit-tab-nav-bar>\n    <div class=\"tw-bg-transparent tw-text-semibold tw-text-center tw-text-main tw-py-10\">\n      <router-outlet></router-outlet>\n    </div>\n  `,\n});\n\nexport const NavigationTabs = NavTabGroupTemplate.bind({});\n\nconst PreserveContentTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Preserve Content Tabs\" [preserveContent]=\"true\" class=\"tw-text-main\">\n        <bit-tab label=\"Text Tab\">\n          <p>\n            Play the video in the other tab and switch back to hear the video is still playing.\n          </p>\n        </bit-tab>\n        <bit-tab label=\"Video Tab\">\n          <iframe\n              width=\"560\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/H0-yWbe5XG4\"\n             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n             allowfullscreen></iframe>\n        </bit-tab>\n    </bit-tab-group>\n  `,\n});\n\nexport const PreserveContentTabs = PreserveContentTabGroupTemplate.bind({});\n\nconst KeyboardNavTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Keyboard Navigation Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"Form Tab\">\n          <p>\n            You can navigate through all tab labels, form inputs, and the button that is outside the tab group via\n            the keyboard.\n          </p>\n          <bit-form-field>\n            <bit-label>First Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>Second Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"No Focusable Content Tab\" [contentTabIndex]=\"0\">\n          <p>This tab has no focusable content, but the panel should still be focusable</p>\n        </bit-tab>\n    </bit-tab-group>\n    <button bitButton buttonType=\"primary\" class=\"tw-mt-5\">External Button</button>\n`,\n});\n\nexport const KeyboardNavigation = KeyboardNavTabGroupTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ItemThreeDummyComponent",
            "id": "component-ItemThreeDummyComponent-e14ae2473b6019fdf5541e4b9ddc84f5c010f16cd5a4dbf33b3b3fd0a38a6ac12a3b389f1d9ede02744befbdb91a635a163515ae5fba33336d6d020cda3a78b4",
            "file": "src/tabs/tabs.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-item-3-dummy",
            "styleUrls": [],
            "styles": [],
            "template": "Router - Item 3 selected",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { Component } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { ButtonModule } from \"../button\";\nimport { FormFieldModule } from \"../form-field\";\n\nimport { TabGroupComponent } from \"./tab-group/tab-group.component\";\nimport { TabsModule } from \"./tabs.module\";\n\n@Component({\n  selector: \"bit-tab-active-dummy\",\n  template: \"Router - Active selected\",\n})\nclass ActiveDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-item-2-dummy\",\n  template: \"Router - Item 2 selected\",\n})\nclass ItemTwoDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-item-3-dummy\",\n  template: \"Router - Item 3 selected\",\n})\nclass ItemThreeDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-disabled-dummy\",\n  template: \"Router - Disabled selected\",\n})\nclass DisabledDummyComponent {}\n\nexport default {\n  title: \"Component Library/Tabs\",\n  component: TabGroupComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        ActiveDummyComponent,\n        ItemTwoDummyComponent,\n        ItemThreeDummyComponent,\n        DisabledDummyComponent,\n      ],\n      imports: [\n        CommonModule,\n        TabsModule,\n        ButtonModule,\n        FormFieldModule,\n        RouterModule.forRoot(\n          [\n            { path: \"\", redirectTo: \"active\", pathMatch: \"full\" },\n            { path: \"active\", component: ActiveDummyComponent },\n            { path: \"item-2\", component: ItemTwoDummyComponent },\n            { path: \"item-3\", component: ItemThreeDummyComponent },\n            { path: \"disabled\", component: DisabledDummyComponent },\n          ],\n          { useHash: true }\n        ),\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library?node-id=1881%3A17922\",\n    },\n  },\n} as Meta;\n\nconst ContentTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Main Content Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"First Tab\">First Tab Content</bit-tab>\n        <bit-tab label=\"Second Tab\">Second Tab Content</bit-tab>\n        <bit-tab>\n          <ng-template bitTabLabel>\n            <i class=\"bwi bwi-search tw-pr-1\"></i> Template Label\n          </ng-template>\n          Template Label Content\n        </bit-tab>\n        <bit-tab [disabled]=\"true\" label=\"Disabled\">\n          Disabled Content\n        </bit-tab>\n    </bit-tab-group>\n  `,\n});\n\nexport const ContentTabs = ContentTabGroupTemplate.bind({});\n\nconst NavTabGroupTemplate: Story<TabGroupComponent> = (args: TabGroupComponent) => ({\n  props: args,\n  template: `\n    <bit-tab-nav-bar label=\"Main\">\n      <bit-tab-link [route]=\"['active']\">Active</bit-tab-link>\n      <bit-tab-link [route]=\"['item-2']\">Item 2</bit-tab-link>\n      <bit-tab-link [route]=\"['item-3']\">Item 3</bit-tab-link>\n      <bit-tab-link [route]=\"['disable']\" [disabled]=\"true\">Disabled</bit-tab-link>\n    </bit-tab-nav-bar>\n    <div class=\"tw-bg-transparent tw-text-semibold tw-text-center tw-text-main tw-py-10\">\n      <router-outlet></router-outlet>\n    </div>\n  `,\n});\n\nexport const NavigationTabs = NavTabGroupTemplate.bind({});\n\nconst PreserveContentTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Preserve Content Tabs\" [preserveContent]=\"true\" class=\"tw-text-main\">\n        <bit-tab label=\"Text Tab\">\n          <p>\n            Play the video in the other tab and switch back to hear the video is still playing.\n          </p>\n        </bit-tab>\n        <bit-tab label=\"Video Tab\">\n          <iframe\n              width=\"560\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/H0-yWbe5XG4\"\n             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n             allowfullscreen></iframe>\n        </bit-tab>\n    </bit-tab-group>\n  `,\n});\n\nexport const PreserveContentTabs = PreserveContentTabGroupTemplate.bind({});\n\nconst KeyboardNavTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Keyboard Navigation Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"Form Tab\">\n          <p>\n            You can navigate through all tab labels, form inputs, and the button that is outside the tab group via\n            the keyboard.\n          </p>\n          <bit-form-field>\n            <bit-label>First Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>Second Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"No Focusable Content Tab\" [contentTabIndex]=\"0\">\n          <p>This tab has no focusable content, but the panel should still be focusable</p>\n        </bit-tab>\n    </bit-tab-group>\n    <button bitButton buttonType=\"primary\" class=\"tw-mt-5\">External Button</button>\n`,\n});\n\nexport const KeyboardNavigation = KeyboardNavTabGroupTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ItemTwoDummyComponent",
            "id": "component-ItemTwoDummyComponent-e14ae2473b6019fdf5541e4b9ddc84f5c010f16cd5a4dbf33b3b3fd0a38a6ac12a3b389f1d9ede02744befbdb91a635a163515ae5fba33336d6d020cda3a78b4",
            "file": "src/tabs/tabs.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-item-2-dummy",
            "styleUrls": [],
            "styles": [],
            "template": "Router - Item 2 selected",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { Component } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { ButtonModule } from \"../button\";\nimport { FormFieldModule } from \"../form-field\";\n\nimport { TabGroupComponent } from \"./tab-group/tab-group.component\";\nimport { TabsModule } from \"./tabs.module\";\n\n@Component({\n  selector: \"bit-tab-active-dummy\",\n  template: \"Router - Active selected\",\n})\nclass ActiveDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-item-2-dummy\",\n  template: \"Router - Item 2 selected\",\n})\nclass ItemTwoDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-item-3-dummy\",\n  template: \"Router - Item 3 selected\",\n})\nclass ItemThreeDummyComponent {}\n\n@Component({\n  selector: \"bit-tab-disabled-dummy\",\n  template: \"Router - Disabled selected\",\n})\nclass DisabledDummyComponent {}\n\nexport default {\n  title: \"Component Library/Tabs\",\n  component: TabGroupComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        ActiveDummyComponent,\n        ItemTwoDummyComponent,\n        ItemThreeDummyComponent,\n        DisabledDummyComponent,\n      ],\n      imports: [\n        CommonModule,\n        TabsModule,\n        ButtonModule,\n        FormFieldModule,\n        RouterModule.forRoot(\n          [\n            { path: \"\", redirectTo: \"active\", pathMatch: \"full\" },\n            { path: \"active\", component: ActiveDummyComponent },\n            { path: \"item-2\", component: ItemTwoDummyComponent },\n            { path: \"item-3\", component: ItemThreeDummyComponent },\n            { path: \"disabled\", component: DisabledDummyComponent },\n          ],\n          { useHash: true }\n        ),\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library?node-id=1881%3A17922\",\n    },\n  },\n} as Meta;\n\nconst ContentTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Main Content Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"First Tab\">First Tab Content</bit-tab>\n        <bit-tab label=\"Second Tab\">Second Tab Content</bit-tab>\n        <bit-tab>\n          <ng-template bitTabLabel>\n            <i class=\"bwi bwi-search tw-pr-1\"></i> Template Label\n          </ng-template>\n          Template Label Content\n        </bit-tab>\n        <bit-tab [disabled]=\"true\" label=\"Disabled\">\n          Disabled Content\n        </bit-tab>\n    </bit-tab-group>\n  `,\n});\n\nexport const ContentTabs = ContentTabGroupTemplate.bind({});\n\nconst NavTabGroupTemplate: Story<TabGroupComponent> = (args: TabGroupComponent) => ({\n  props: args,\n  template: `\n    <bit-tab-nav-bar label=\"Main\">\n      <bit-tab-link [route]=\"['active']\">Active</bit-tab-link>\n      <bit-tab-link [route]=\"['item-2']\">Item 2</bit-tab-link>\n      <bit-tab-link [route]=\"['item-3']\">Item 3</bit-tab-link>\n      <bit-tab-link [route]=\"['disable']\" [disabled]=\"true\">Disabled</bit-tab-link>\n    </bit-tab-nav-bar>\n    <div class=\"tw-bg-transparent tw-text-semibold tw-text-center tw-text-main tw-py-10\">\n      <router-outlet></router-outlet>\n    </div>\n  `,\n});\n\nexport const NavigationTabs = NavTabGroupTemplate.bind({});\n\nconst PreserveContentTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Preserve Content Tabs\" [preserveContent]=\"true\" class=\"tw-text-main\">\n        <bit-tab label=\"Text Tab\">\n          <p>\n            Play the video in the other tab and switch back to hear the video is still playing.\n          </p>\n        </bit-tab>\n        <bit-tab label=\"Video Tab\">\n          <iframe\n              width=\"560\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/H0-yWbe5XG4\"\n             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n             allowfullscreen></iframe>\n        </bit-tab>\n    </bit-tab-group>\n  `,\n});\n\nexport const PreserveContentTabs = PreserveContentTabGroupTemplate.bind({});\n\nconst KeyboardNavTabGroupTemplate: Story<TabGroupComponent> = (args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Keyboard Navigation Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"Form Tab\">\n          <p>\n            You can navigate through all tab labels, form inputs, and the button that is outside the tab group via\n            the keyboard.\n          </p>\n          <bit-form-field>\n            <bit-label>First Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>Second Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"No Focusable Content Tab\" [contentTabIndex]=\"0\">\n          <p>This tab has no focusable content, but the panel should still be focusable</p>\n        </bit-tab>\n    </bit-tab-group>\n    <button bitButton buttonType=\"primary\" class=\"tw-mt-5\">External Button</button>\n`,\n});\n\nexport const KeyboardNavigation = KeyboardNavTabGroupTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-c30979353445ded01fab3112a7bc7aa50cab198a4f58277f141c68d35be48006f5273c7c9c6805fa30f3b5c0e13109bbd36b58c181706a62941443386578586a",
            "file": "src/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "menuComponent",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "keyManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusKeyManager<MenuItemDirective>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "menuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MenuItemDirective>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MenuItemDirective, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FocusKeyManager } from \"@angular/cdk/a11y\";\nimport {\n  Component,\n  Output,\n  TemplateRef,\n  ViewChild,\n  EventEmitter,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n} from \"@angular/core\";\n\nimport { MenuItemDirective } from \"./menu-item.directive\";\n\n@Component({\n  selector: \"bit-menu\",\n  templateUrl: \"./menu.component.html\",\n  exportAs: \"menuComponent\",\n})\nexport class MenuComponent implements AfterContentInit {\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n  @Output() closed = new EventEmitter<void>();\n  @ContentChildren(MenuItemDirective, { descendants: true })\n  menuItems: QueryList<MenuItemDirective>;\n  keyManager: FocusKeyManager<MenuItemDirective>;\n\n  ngAfterContentInit() {\n    this.keyManager = new FocusKeyManager(this.menuItems).withWrap();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<ng-template>\n  <div\n    (click)=\"closed.emit()\"\n    class=\"tw-flex tw-shrink-0 tw-flex-col tw-rounded tw-border tw-border-solid tw-border-secondary-500 tw-bg-background tw-bg-clip-padding tw-py-2\"\n    role=\"menu\"\n  >\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "MenuDividerComponent",
            "id": "component-MenuDividerComponent-919a7e673e7e806c44b84552fcf8d0685ed5b4dd13d940f5530ed2b570569cf3bd28b267396c60526f0a652602eb5fe082c9560b1382c1da267c9ffbcc76ae77",
            "file": "src/menu/menu-divider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-menu-divider",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-divider.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-menu-divider\",\n  templateUrl: \"./menu-divider.component.html\",\n})\nexport class MenuDividerComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div\n  class=\"tw-my-2 tw-border-0 tw-border-t tw-border-solid tw-border-t-secondary-500\"\n  role=\"separator\"\n></div>\n"
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-e946d23b424417cbc43aea5511f1ae857423b6eeeb0209819d1f30c8c8938edc6ac5e1c1fccb891128ec40b9da05b104d9aeb75e3f9d3ebde960c7dc0e750688",
            "file": "src/multi-select/multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: BitFormFieldControl, useExisting: MultiSelectComponent }",
                    "type": "component"
                }
            ],
            "selector": "bit-multi-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./multi-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "baseItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "SelectItemView[]",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "`bit-multi-select-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of BitFormFieldControl",
                    "description": "<p>Implemented as part of BitFormFieldControl</p>\n",
                    "line": 156,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "removeSelectedItems",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of BitFormFieldControl",
                    "description": "<p>Implemented as part of BitFormFieldControl</p>\n",
                    "line": 161,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectedItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "SelectItemView[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemsConfirmed",
                    "defaultValue": "new EventEmitter<any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_ariaDescribedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 148,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 167,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadingText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "notifyOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Implemented as part of NG_VALUE_ACCESSOR</p>\n",
                    "line": 52,
                    "rawdescription": "\nImplemented as part of NG_VALUE_ACCESSOR",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "notifyOnTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Implemented as part of NG_VALUE_ACCESSOR</p>\n",
                    "line": 54,
                    "rawdescription": "\nImplemented as part of NG_VALUE_ACCESSOR",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "searchInputId",
                    "defaultValue": "`search-input-${nextId++}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgSelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NgSelectComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHelper method for showing selected state in custom template",
                    "description": "<p>Helper method for showing selected state in custom template</p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of NG_VALUE_ACCESSOR",
                    "description": "<p>Implemented as part of NG_VALUE_ACCESSOR</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "items",
                            "type": "SelectItemView[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of NG_VALUE_ACCESSOR",
                    "description": "<p>Implemented as part of NG_VALUE_ACCESSOR</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "SelectItemView[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDropdownClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe `close` callback will act as the only trigger for signifying the user's intent of completing the selection\nof items. Selected items will be emitted to the parent component in order to allow for separate data handling.\n",
                    "description": "<p>The <code>close</code> callback will act as the only trigger for signifying the user&#39;s intent of completing the selection\nof items. Selected items will be emitted to the parent component in order to allow for separate data handling.</p>\n"
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "SelectItemView[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of NG_VALUE_ACCESSOR",
                    "description": "<p>Implemented as part of NG_VALUE_ACCESSOR</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "SelectItemView[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of NG_VALUE_ACCESSOR",
                    "description": "<p>Implemented as part of NG_VALUE_ACCESSOR</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of NG_VALUE_ACCESSOR",
                    "description": "<p>Implemented as part of NG_VALUE_ACCESSOR</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "SelectItemView[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of NG_VALUE_ACCESSOR",
                    "description": "<p>Implemented as part of NG_VALUE_ACCESSOR</p>\n",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "SelectItemView[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.aria-describedby",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImplemented as part of BitFormFieldControl",
                    "description": "<p>Implemented as part of BitFormFieldControl</p>\n",
                    "line": 141,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  EventEmitter,\n  HostBinding,\n  Optional,\n  Self,\n} from \"@angular/core\";\nimport { ControlValueAccessor, NgControl, Validators } from \"@angular/forms\";\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { BitFormFieldControl } from \"../form-field/form-field-control\";\n\nimport { SelectItemView } from \"./models/select-item-view\";\n\n// Increments for each instance of this component\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-multi-select\",\n  templateUrl: \"./multi-select.component.html\",\n  providers: [{ provide: BitFormFieldControl, useExisting: MultiSelectComponent }],\n})\n/**\n * This component has been implemented to only support Multi-select list events\n */\nexport class MultiSelectComponent implements OnInit, BitFormFieldControl, ControlValueAccessor {\n  @ViewChild(NgSelectComponent) select: NgSelectComponent;\n\n  // Parent component should only pass selectable items (complete list - selected items = baseItems)\n  @Input() baseItems: SelectItemView[];\n  // Defaults to native ng-select behavior - set to \"true\" to clear selected items on dropdown close\n  @Input() removeSelectedItems = false;\n  @Input() placeholder: string;\n  @Input() loading = false;\n  @Input() disabled = false;\n\n  // Internal tracking of selected items\n  @Input() selectedItems: SelectItemView[];\n\n  // Default values for our implementation\n  loadingText: string;\n\n  protected searchInputId = `search-input-${nextId++}`;\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  private notifyOnChange?: (value: SelectItemView[]) => void;\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  private notifyOnTouched?: () => void;\n\n  @Output() onItemsConfirmed = new EventEmitter<any[]>();\n\n  constructor(private i18nService: I18nService, @Optional() @Self() private ngControl?: NgControl) {\n    if (ngControl != null) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit(): void {\n    // Default Text Values\n    this.placeholder = this.placeholder ?? this.i18nService.t(\"multiSelectPlaceholder\");\n    this.loadingText = this.i18nService.t(\"multiSelectLoading\");\n  }\n\n  /** Helper method for showing selected state in custom template */\n  isSelected(item: any): boolean {\n    return this.selectedItems?.find((selected) => selected.id === item.id) != undefined;\n  }\n\n  /**\n   * The `close` callback will act as the only trigger for signifying the user's intent of completing the selection\n   * of items. Selected items will be emitted to the parent component in order to allow for separate data handling.\n   */\n  onDropdownClosed(): void {\n    // Early exit\n    if (this.selectedItems == null || this.selectedItems.length == 0) {\n      return;\n    }\n\n    // Emit results to parent component\n    this.onItemsConfirmed.emit(this.selectedItems);\n\n    // Remove selected items from base list based on input property\n    if (this.removeSelectedItems) {\n      let updatedBaseItems = this.baseItems;\n      this.selectedItems.forEach((selectedItem) => {\n        updatedBaseItems = updatedBaseItems.filter((item) => selectedItem.id !== item.id);\n      });\n\n      // Reset Lists\n      this.selectedItems = null;\n      this.baseItems = updatedBaseItems;\n    }\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  writeValue(obj: SelectItemView[]): void {\n    this.selectedItems = obj;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  registerOnChange(fn: (value: SelectItemView[]) => void): void {\n    this.notifyOnChange = fn;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  registerOnTouched(fn: any): void {\n    this.notifyOnTouched = fn;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  protected onChange(items: SelectItemView[]) {\n    if (!this.notifyOnChange) {\n      return;\n    }\n\n    this.notifyOnChange(items);\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  protected onBlur() {\n    if (!this.notifyOnTouched) {\n      return;\n    }\n\n    this.notifyOnTouched();\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding(\"attr.aria-describedby\")\n  get ariaDescribedBy() {\n    return this._ariaDescribedBy;\n  }\n  set ariaDescribedBy(value: string) {\n    this._ariaDescribedBy = value;\n    this.select?.searchInput.nativeElement.setAttribute(\"aria-describedby\", value);\n  }\n  private _ariaDescribedBy: string;\n\n  /**Implemented as part of BitFormFieldControl */\n  get labelForId() {\n    return this.searchInputId;\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding() @Input() id = `bit-multi-select-${nextId++}`;\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding(\"attr.required\")\n  @Input()\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: any) {\n    this._required = value != null && value !== false;\n  }\n  private _required: boolean;\n\n  /**Implemented as part of BitFormFieldControl */\n  get hasError() {\n    return this.ngControl?.status === \"INVALID\" && this.ngControl?.touched;\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  get error(): [string, any] {\n    const key = Object.keys(this.ngControl?.errors)[0];\n    return [key, this.ngControl?.errors[key]];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "BitFormFieldControl",
                "ControlValueAccessor"
            ],
            "accessors": {
                "ariaDescribedBy": {
                    "name": "ariaDescribedBy",
                    "setSignature": {
                        "name": "ariaDescribedBy",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 144,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "ariaDescribedBy",
                        "type": "",
                        "returnType": "",
                        "line": 141,
                        "rawdescription": "\nImplemented as part of BitFormFieldControl",
                        "description": "<p>Implemented as part of BitFormFieldControl</p>\n"
                    }
                },
                "labelForId": {
                    "name": "labelForId",
                    "getSignature": {
                        "name": "labelForId",
                        "type": "",
                        "returnType": "",
                        "line": 151,
                        "rawdescription": "\nImplemented as part of BitFormFieldControl",
                        "description": "<p>Implemented as part of BitFormFieldControl</p>\n"
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 164,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 161,
                        "rawdescription": "\nImplemented as part of BitFormFieldControl",
                        "description": "<p>Implemented as part of BitFormFieldControl</p>\n"
                    }
                },
                "hasError": {
                    "name": "hasError",
                    "getSignature": {
                        "name": "hasError",
                        "type": "",
                        "returnType": "",
                        "line": 170,
                        "rawdescription": "\nImplemented as part of BitFormFieldControl",
                        "description": "<p>Implemented as part of BitFormFieldControl</p>\n"
                    }
                },
                "error": {
                    "name": "error",
                    "getSignature": {
                        "name": "error",
                        "type": "",
                        "returnType": "",
                        "line": 175,
                        "rawdescription": "\nImplemented as part of BitFormFieldControl",
                        "description": "<p>Implemented as part of BitFormFieldControl</p>\n"
                    }
                }
            },
            "templateData": "<ng-select\n  [items]=\"baseItems\"\n  [(ngModel)]=\"selectedItems\"\n  (ngModelChange)=\"onChange($event)\"\n  (blur)=\"onBlur()\"\n  bindLabel=\"listName\"\n  groupBy=\"parentGrouping\"\n  [placeholder]=\"placeholder\"\n  [loading]=\"loading\"\n  [loadingText]=\"loadingText\"\n  notFoundText=\"{{ 'multiSelectNotFound' | i18n }}\"\n  clearAllText=\"{{ 'multiSelectClearAll' | i18n }}\"\n  [multiple]=\"true\"\n  [selectOnTab]=\"true\"\n  [closeOnSelect]=\"false\"\n  (close)=\"onDropdownClosed()\"\n  [disabled]=\"disabled\"\n  [clearSearchOnAdd]=\"true\"\n  [labelForId]=\"labelForId\"\n>\n  <ng-template ng-loadingspinner-tmp>\n    <i class=\"bwi bwi-spinner bwi-spin tw-mr-1\" [title]=\"loadingText\" aria-hidden=\"true\"></i>\n  </ng-template>\n  <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n    <button\n      type=\"button\"\n      bitBadge\n      badgeType=\"primary\"\n      class=\"tw-mr-1 disabled:tw-border-0\"\n      [disabled]=\"disabled\"\n      (click)=\"clear(item)\"\n    >\n      <i\n        *ngIf=\"item.icon != null\"\n        class=\"tw-mr-1 bwi bwi-fw {{ item.icon }}\"\n        aria-hidden=\"true\"\n      ></i>\n      {{ item.labelName }}\n      <i class=\"bwi bwi-fw bwi-close bwi-sm tw-ml-1\" aria-hidden=\"true\"></i>\n    </button>\n  </ng-template>\n  <ng-template ng-option-tmp let-item=\"item\">\n    <div class=\"tw-flex\">\n      <div class=\"tw-w-7 tw-flex-none\">\n        <i *ngIf=\"isSelected(item)\" class=\"bwi bwi-fw bwi-check\" aria-hidden=\"true\"></i>\n      </div>\n      <div class=\"tw-mr-2 tw-flex-initial\">\n        <i *ngIf=\"item.icon != null\" class=\"bwi bwi-fw {{ item.icon }}\" aria-hidden=\"true\"></i>\n      </div>\n      <div class=\"tw-flex-1\">\n        {{ item.listName }}\n      </div>\n    </div>\n  </ng-template>\n</ng-select>\n"
        },
        {
            "name": "ObservableExampleComponent",
            "id": "component-ObservableExampleComponent-c4fc59c3a9d86213b24ad50d90f6821c9a62391de8742f298eb86287159b4eff95dcb1a9f3d7698fb6cadbef71d043b488d54c0bd40cf9b578bafc54dc42dc39",
            "file": "src/async-actions/in-forms.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-observable-example",
            "styleUrls": [],
            "styles": [],
            "template": "`  <form [formGroup]=\"formObj\" [bitSubmit]=\"submit\">\n    <bit-form-field>\n      <bit-label>Name</bit-label>\n      <input bitInput formControlName=\"name\" />\n    </bit-form-field>\n\n    <bit-form-field>\n      <bit-label>Email</bit-label>\n      <input bitInput formControlName=\"email\" />\n    </bit-form-field>\n\n    <button class=\"tw-mr-2\" type=\"submit\" buttonType=\"primary\" bitButton bitFormButton>Submit</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitButton bitFormButton>Cancel</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"danger\" bitButton bitFormButton [bitAction]=\"delete\">Delete</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitIconButton=\"bwi-star\" bitFormButton [bitAction]=\"delete\">Delete</button>\n  </form>`",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "delete",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "formObj",
                    "defaultValue": "this.formBuilder.group({\n    name: [\"\", [Validators.required]],\n    email: [\"\", [Validators.required, Validators.email]],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "submit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule, Validators, FormBuilder } from \"@angular/forms\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\nimport { delay, of } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { I18nService } from \"@bitwarden/common/src/abstractions/i18n.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { FormFieldModule } from \"../form-field\";\nimport { IconButtonModule } from \"../icon-button\";\nimport { InputModule } from \"../input/input.module\";\nimport { I18nMockService } from \"../utils/i18n-mock.service\";\n\nimport { BitActionDirective } from \"./bit-action.directive\";\nimport { BitSubmitDirective } from \"./bit-submit.directive\";\nimport { BitFormButtonDirective } from \"./form-button.directive\";\n\nconst template = `\n  <form [formGroup]=\"formObj\" [bitSubmit]=\"submit\">\n    <bit-form-field>\n      <bit-label>Name</bit-label>\n      <input bitInput formControlName=\"name\" />\n    </bit-form-field>\n\n    <bit-form-field>\n      <bit-label>Email</bit-label>\n      <input bitInput formControlName=\"email\" />\n    </bit-form-field>\n\n    <button class=\"tw-mr-2\" type=\"submit\" buttonType=\"primary\" bitButton bitFormButton>Submit</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitButton bitFormButton>Cancel</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"danger\" bitButton bitFormButton [bitAction]=\"delete\">Delete</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitIconButton=\"bwi-star\" bitFormButton [bitAction]=\"delete\">Delete</button>\n  </form>`;\n\n@Component({\n  selector: \"app-promise-example\",\n  template,\n})\nclass PromiseExampleComponent {\n  formObj = this.formBuilder.group({\n    name: [\"\", [Validators.required]],\n    email: [\"\", [Validators.required, Validators.email]],\n  });\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  submit = async () => {\n    this.formObj.markAllAsTouched();\n\n    if (!this.formObj.valid) {\n      return;\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(resolve, 2000);\n    });\n  };\n\n  delete = async () => {\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(resolve, 2000);\n    });\n  };\n}\n\n@Component({\n  selector: \"app-observable-example\",\n  template,\n})\nclass ObservableExampleComponent {\n  formObj = this.formBuilder.group({\n    name: [\"\", [Validators.required]],\n    email: [\"\", [Validators.required, Validators.email]],\n  });\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  submit = () => {\n    this.formObj.markAllAsTouched();\n\n    if (!this.formObj.valid) {\n      return undefined;\n    }\n\n    return of(\"fake observable\").pipe(delay(2000));\n  };\n\n  delete = () => {\n    return of(\"fake observable\").pipe(delay(2000));\n  };\n}\n\nexport default {\n  title: \"Component Library/Async Actions/In Forms\",\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        BitSubmitDirective,\n        BitFormButtonDirective,\n        PromiseExampleComponent,\n        ObservableExampleComponent,\n        BitActionDirective,\n      ],\n      imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        FormFieldModule,\n        InputModule,\n        ButtonModule,\n        IconButtonModule,\n      ],\n      providers: [\n        {\n          provide: I18nService,\n          useFactory: () => {\n            return new I18nMockService({\n              required: \"required\",\n              inputRequired: \"Input is required.\",\n              inputEmail: \"Input is not an email-address.\",\n            });\n          },\n        },\n        {\n          provide: ValidationService,\n          useValue: {\n            showError: action(\"ValidationService.showError\"),\n          } as Partial<ValidationService>,\n        },\n      ],\n    }),\n  ],\n} as Meta;\n\nconst PromiseTemplate: Story<PromiseExampleComponent> = (args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n});\n\nexport const UsingPromise = PromiseTemplate.bind({});\n\nconst ObservableTemplate: Story<PromiseExampleComponent> = (args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-observable-example></app-observable-example>`,\n});\n\nexport const UsingObservable = ObservableTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ObservableExampleComponent",
            "id": "component-ObservableExampleComponent-18091020f0e7416a8e2e3588b941102743e097cec491ede258d8f27990185db1fb592ff6ca068944397d61963212e3198d630164f7e3ec78b0f522f7c391666f-1",
            "file": "src/async-actions/standalone.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-observable-example",
            "styleUrls": [],
            "styles": [],
            "template": "`  <button bitButton buttonType=\"primary\" [bitAction]=\"action\" class=\"tw-mr-2\">\n    Perform action\n  </button>\n  <button bitIconButton=\"bwi-trash\" buttonType=\"danger\" [bitAction]=\"action\"></button>`",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\nimport { delay, of } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\n\nimport { BitActionDirective } from \"./bit-action.directive\";\n\nconst template = `\n  <button bitButton buttonType=\"primary\" [bitAction]=\"action\" class=\"tw-mr-2\">\n    Perform action\n  </button>\n  <button bitIconButton=\"bwi-trash\" buttonType=\"danger\" [bitAction]=\"action\"></button>`;\n\n@Component({\n  template,\n  selector: \"app-promise-example\",\n})\nclass PromiseExampleComponent {\n  action = async () => {\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(resolve, 2000);\n    });\n  };\n}\n\n@Component({\n  template,\n  selector: \"app-observable-example\",\n})\nclass ObservableExampleComponent {\n  action = () => {\n    return of(\"fake observable\").pipe(delay(2000));\n  };\n}\n\n@Component({\n  template,\n  selector: \"app-rejected-promise-example\",\n})\nclass RejectedPromiseExampleComponent {\n  action = async () => {\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(() => reject(new Error(\"Simulated error\")), 2000);\n    });\n  };\n}\n\nexport default {\n  title: \"Component Library/Async Actions/Standalone\",\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        BitActionDirective,\n        PromiseExampleComponent,\n        ObservableExampleComponent,\n        RejectedPromiseExampleComponent,\n      ],\n      imports: [ButtonModule, IconButtonModule],\n      providers: [\n        {\n          provide: ValidationService,\n          useValue: {\n            showError: action(\"ValidationService.showError\"),\n          } as Partial<ValidationService>,\n        },\n      ],\n    }),\n  ],\n} as Meta;\n\nconst PromiseTemplate: Story<PromiseExampleComponent> = (args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n});\n\nexport const UsingPromise = PromiseTemplate.bind({});\n\nconst ObservableTemplate: Story<ObservableExampleComponent> = (\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-observable-example></app-observable-example>`,\n});\n\nexport const UsingObservable = ObservableTemplate.bind({});\n\nconst RejectedPromiseTemplate: Story<ObservableExampleComponent> = (\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-rejected-promise-example></app-rejected-promise-example>`,\n});\n\nexport const RejectedPromise = RejectedPromiseTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ObservableExampleComponent-1"
        },
        {
            "name": "PromiseExampleComponent",
            "id": "component-PromiseExampleComponent-c4fc59c3a9d86213b24ad50d90f6821c9a62391de8742f298eb86287159b4eff95dcb1a9f3d7698fb6cadbef71d043b488d54c0bd40cf9b578bafc54dc42dc39",
            "file": "src/async-actions/in-forms.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-promise-example",
            "styleUrls": [],
            "styles": [],
            "template": "`  <form [formGroup]=\"formObj\" [bitSubmit]=\"submit\">\n    <bit-form-field>\n      <bit-label>Name</bit-label>\n      <input bitInput formControlName=\"name\" />\n    </bit-form-field>\n\n    <bit-form-field>\n      <bit-label>Email</bit-label>\n      <input bitInput formControlName=\"email\" />\n    </bit-form-field>\n\n    <button class=\"tw-mr-2\" type=\"submit\" buttonType=\"primary\" bitButton bitFormButton>Submit</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitButton bitFormButton>Cancel</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"danger\" bitButton bitFormButton [bitAction]=\"delete\">Delete</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitIconButton=\"bwi-star\" bitFormButton [bitAction]=\"delete\">Delete</button>\n  </form>`",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "delete",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "formObj",
                    "defaultValue": "this.formBuilder.group({\n    name: [\"\", [Validators.required]],\n    email: [\"\", [Validators.required, Validators.email]],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "submit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule, Validators, FormBuilder } from \"@angular/forms\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\nimport { delay, of } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { I18nService } from \"@bitwarden/common/src/abstractions/i18n.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { FormFieldModule } from \"../form-field\";\nimport { IconButtonModule } from \"../icon-button\";\nimport { InputModule } from \"../input/input.module\";\nimport { I18nMockService } from \"../utils/i18n-mock.service\";\n\nimport { BitActionDirective } from \"./bit-action.directive\";\nimport { BitSubmitDirective } from \"./bit-submit.directive\";\nimport { BitFormButtonDirective } from \"./form-button.directive\";\n\nconst template = `\n  <form [formGroup]=\"formObj\" [bitSubmit]=\"submit\">\n    <bit-form-field>\n      <bit-label>Name</bit-label>\n      <input bitInput formControlName=\"name\" />\n    </bit-form-field>\n\n    <bit-form-field>\n      <bit-label>Email</bit-label>\n      <input bitInput formControlName=\"email\" />\n    </bit-form-field>\n\n    <button class=\"tw-mr-2\" type=\"submit\" buttonType=\"primary\" bitButton bitFormButton>Submit</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitButton bitFormButton>Cancel</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"danger\" bitButton bitFormButton [bitAction]=\"delete\">Delete</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitIconButton=\"bwi-star\" bitFormButton [bitAction]=\"delete\">Delete</button>\n  </form>`;\n\n@Component({\n  selector: \"app-promise-example\",\n  template,\n})\nclass PromiseExampleComponent {\n  formObj = this.formBuilder.group({\n    name: [\"\", [Validators.required]],\n    email: [\"\", [Validators.required, Validators.email]],\n  });\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  submit = async () => {\n    this.formObj.markAllAsTouched();\n\n    if (!this.formObj.valid) {\n      return;\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(resolve, 2000);\n    });\n  };\n\n  delete = async () => {\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(resolve, 2000);\n    });\n  };\n}\n\n@Component({\n  selector: \"app-observable-example\",\n  template,\n})\nclass ObservableExampleComponent {\n  formObj = this.formBuilder.group({\n    name: [\"\", [Validators.required]],\n    email: [\"\", [Validators.required, Validators.email]],\n  });\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  submit = () => {\n    this.formObj.markAllAsTouched();\n\n    if (!this.formObj.valid) {\n      return undefined;\n    }\n\n    return of(\"fake observable\").pipe(delay(2000));\n  };\n\n  delete = () => {\n    return of(\"fake observable\").pipe(delay(2000));\n  };\n}\n\nexport default {\n  title: \"Component Library/Async Actions/In Forms\",\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        BitSubmitDirective,\n        BitFormButtonDirective,\n        PromiseExampleComponent,\n        ObservableExampleComponent,\n        BitActionDirective,\n      ],\n      imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        FormFieldModule,\n        InputModule,\n        ButtonModule,\n        IconButtonModule,\n      ],\n      providers: [\n        {\n          provide: I18nService,\n          useFactory: () => {\n            return new I18nMockService({\n              required: \"required\",\n              inputRequired: \"Input is required.\",\n              inputEmail: \"Input is not an email-address.\",\n            });\n          },\n        },\n        {\n          provide: ValidationService,\n          useValue: {\n            showError: action(\"ValidationService.showError\"),\n          } as Partial<ValidationService>,\n        },\n      ],\n    }),\n  ],\n} as Meta;\n\nconst PromiseTemplate: Story<PromiseExampleComponent> = (args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n});\n\nexport const UsingPromise = PromiseTemplate.bind({});\n\nconst ObservableTemplate: Story<PromiseExampleComponent> = (args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-observable-example></app-observable-example>`,\n});\n\nexport const UsingObservable = ObservableTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PromiseExampleComponent",
            "id": "component-PromiseExampleComponent-18091020f0e7416a8e2e3588b941102743e097cec491ede258d8f27990185db1fb592ff6ca068944397d61963212e3198d630164f7e3ec78b0f522f7c391666f-1",
            "file": "src/async-actions/standalone.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-promise-example",
            "styleUrls": [],
            "styles": [],
            "template": "`  <button bitButton buttonType=\"primary\" [bitAction]=\"action\" class=\"tw-mr-2\">\n    Perform action\n  </button>\n  <button bitIconButton=\"bwi-trash\" buttonType=\"danger\" [bitAction]=\"action\"></button>`",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\nimport { delay, of } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\n\nimport { BitActionDirective } from \"./bit-action.directive\";\n\nconst template = `\n  <button bitButton buttonType=\"primary\" [bitAction]=\"action\" class=\"tw-mr-2\">\n    Perform action\n  </button>\n  <button bitIconButton=\"bwi-trash\" buttonType=\"danger\" [bitAction]=\"action\"></button>`;\n\n@Component({\n  template,\n  selector: \"app-promise-example\",\n})\nclass PromiseExampleComponent {\n  action = async () => {\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(resolve, 2000);\n    });\n  };\n}\n\n@Component({\n  template,\n  selector: \"app-observable-example\",\n})\nclass ObservableExampleComponent {\n  action = () => {\n    return of(\"fake observable\").pipe(delay(2000));\n  };\n}\n\n@Component({\n  template,\n  selector: \"app-rejected-promise-example\",\n})\nclass RejectedPromiseExampleComponent {\n  action = async () => {\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(() => reject(new Error(\"Simulated error\")), 2000);\n    });\n  };\n}\n\nexport default {\n  title: \"Component Library/Async Actions/Standalone\",\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        BitActionDirective,\n        PromiseExampleComponent,\n        ObservableExampleComponent,\n        RejectedPromiseExampleComponent,\n      ],\n      imports: [ButtonModule, IconButtonModule],\n      providers: [\n        {\n          provide: ValidationService,\n          useValue: {\n            showError: action(\"ValidationService.showError\"),\n          } as Partial<ValidationService>,\n        },\n      ],\n    }),\n  ],\n} as Meta;\n\nconst PromiseTemplate: Story<PromiseExampleComponent> = (args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n});\n\nexport const UsingPromise = PromiseTemplate.bind({});\n\nconst ObservableTemplate: Story<ObservableExampleComponent> = (\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-observable-example></app-observable-example>`,\n});\n\nexport const UsingObservable = ObservableTemplate.bind({});\n\nconst RejectedPromiseTemplate: Story<ObservableExampleComponent> = (\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-rejected-promise-example></app-rejected-promise-example>`,\n});\n\nexport const RejectedPromise = RejectedPromiseTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PromiseExampleComponent-1"
        },
        {
            "name": "RejectedPromiseExampleComponent",
            "id": "component-RejectedPromiseExampleComponent-18091020f0e7416a8e2e3588b941102743e097cec491ede258d8f27990185db1fb592ff6ca068944397d61963212e3198d630164f7e3ec78b0f522f7c391666f",
            "file": "src/async-actions/standalone.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rejected-promise-example",
            "styleUrls": [],
            "styles": [],
            "template": "`  <button bitButton buttonType=\"primary\" [bitAction]=\"action\" class=\"tw-mr-2\">\n    Perform action\n  </button>\n  <button bitIconButton=\"bwi-trash\" buttonType=\"danger\" [bitAction]=\"action\"></button>`",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { action } from \"@storybook/addon-actions\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\nimport { delay, of } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\n\nimport { BitActionDirective } from \"./bit-action.directive\";\n\nconst template = `\n  <button bitButton buttonType=\"primary\" [bitAction]=\"action\" class=\"tw-mr-2\">\n    Perform action\n  </button>\n  <button bitIconButton=\"bwi-trash\" buttonType=\"danger\" [bitAction]=\"action\"></button>`;\n\n@Component({\n  template,\n  selector: \"app-promise-example\",\n})\nclass PromiseExampleComponent {\n  action = async () => {\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(resolve, 2000);\n    });\n  };\n}\n\n@Component({\n  template,\n  selector: \"app-observable-example\",\n})\nclass ObservableExampleComponent {\n  action = () => {\n    return of(\"fake observable\").pipe(delay(2000));\n  };\n}\n\n@Component({\n  template,\n  selector: \"app-rejected-promise-example\",\n})\nclass RejectedPromiseExampleComponent {\n  action = async () => {\n    await new Promise<void>((resolve, reject) => {\n      setTimeout(() => reject(new Error(\"Simulated error\")), 2000);\n    });\n  };\n}\n\nexport default {\n  title: \"Component Library/Async Actions/Standalone\",\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        BitActionDirective,\n        PromiseExampleComponent,\n        ObservableExampleComponent,\n        RejectedPromiseExampleComponent,\n      ],\n      imports: [ButtonModule, IconButtonModule],\n      providers: [\n        {\n          provide: ValidationService,\n          useValue: {\n            showError: action(\"ValidationService.showError\"),\n          } as Partial<ValidationService>,\n        },\n      ],\n    }),\n  ],\n} as Meta;\n\nconst PromiseTemplate: Story<PromiseExampleComponent> = (args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n});\n\nexport const UsingPromise = PromiseTemplate.bind({});\n\nconst ObservableTemplate: Story<ObservableExampleComponent> = (\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-observable-example></app-observable-example>`,\n});\n\nexport const UsingObservable = ObservableTemplate.bind({});\n\nconst RejectedPromiseTemplate: Story<ObservableExampleComponent> = (\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-rejected-promise-example></app-rejected-promise-example>`,\n});\n\nexport const RejectedPromise = RejectedPromiseTemplate.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SimpleDialogComponent",
            "id": "component-SimpleDialogComponent-fcd8b9768452d038198a778d548b6119d551c4b7b96d4140c2ac569aa06001b631993998267355819bcf98c7b0828110d47f3003e86778e1950aa0560b323c01",
            "file": "src/dialog/simple-dialog/simple-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-simple-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./simple-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDirective",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "IconDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Directive } from \"@angular/core\";\n\n@Directive({ selector: \"[bit-dialog-icon]\" })\nexport class IconDirective {}\n\n@Component({\n  selector: \"bit-simple-dialog\",\n  templateUrl: \"./simple-dialog.component.html\",\n})\nexport class SimpleDialogComponent {\n  @ContentChild(IconDirective) icon!: IconDirective;\n\n  get hasIcon() {\n    return this.icon != null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hasIcon": {
                    "name": "hasIcon",
                    "getSignature": {
                        "name": "hasIcon",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            },
            "templateData": "<div\n  class=\"tw-my-4 tw-flex tw-max-h-screen tw-w-96 tw-max-w-90vw tw-flex-col tw-overflow-hidden tw-rounded tw-border tw-border-solid tw-border-secondary-300 tw-bg-text-contrast tw-text-main\"\n>\n  <div class=\"tw-flex tw-flex-col tw-items-center tw-gap-2 tw-px-4 tw-pt-4 tw-text-center\">\n    <ng-content *ngIf=\"hasIcon; else elseBlock\" select=\"[bit-dialog-icon]\"></ng-content>\n    <ng-template #elseBlock>\n      <i class=\"bwi bwi-exclamation-triangle tw-text-3xl tw-text-warning\" aria-hidden=\"true\"></i>\n    </ng-template>\n    <h1 bitDialogTitleContainer class=\"tw-mb-0 tw-text-base tw-font-semibold\">\n      <ng-content select=\"[bitDialogTitle]\"></ng-content>\n    </h1>\n  </div>\n  <div class=\"tw-overflow-y-auto tw-px-4 tw-pt-2 tw-pb-4 tw-text-center tw-text-base\">\n    <ng-content select=\"[bitDialogContent]\"></ng-content>\n  </div>\n  <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-4\">\n    <ng-content select=\"[bitDialogFooter]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "StoryDialogComponent",
            "id": "component-StoryDialogComponent-9d00c929acd67f88b3f8bf1309900b58b6328e4a68fd1e1918e755d1ebd262b04e3139042708d9df4f1bdcc42c6a675675fd496736725813e3ea1e58a40e2c95",
            "file": "src/dialog/dialog.service.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-story-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<button bitButton (click)=\"openDialog()\">Open Dialog</button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DIALOG_DATA, DialogModule, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\nimport { SharedModule } from \"../shared\";\nimport { I18nMockService } from \"../utils/i18n-mock.service\";\n\nimport { DialogService } from \"./dialog.service\";\nimport { DialogComponent } from \"./dialog/dialog.component\";\nimport { DialogCloseDirective } from \"./directives/dialog-close.directive\";\nimport { DialogTitleContainerDirective } from \"./directives/dialog-title-container.directive\";\n\ninterface Animal {\n  animal: string;\n}\n\n@Component({\n  selector: \"app-story-dialog\",\n  template: `<button bitButton (click)=\"openDialog()\">Open Dialog</button>`,\n})\nclass StoryDialogComponent {\n  constructor(public dialogService: DialogService) {}\n\n  openDialog() {\n    this.dialogService.open(StoryDialogContentComponent, {\n      data: {\n        animal: \"panda\",\n      },\n    });\n  }\n}\n\n@Component({\n  selector: \"story-dialog-content\",\n  template: `\n    <bit-dialog dialogSize=\"large\">\n      <span bitDialogTitle>Dialog Title</span>\n      <span bitDialogContent>\n        Dialog body text goes here.\n        <br />\n        Animal: {{ animal }}\n      </span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\" (click)=\"dialogRef.close()\">Save</button>\n        <button bitButton buttonType=\"secondary\" bitDialogClose>Cancel</button>\n      </div>\n    </bit-dialog>\n  `,\n})\nclass StoryDialogContentComponent {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) private data: Animal) {}\n\n  get animal() {\n    return this.data?.animal;\n  }\n}\n\nexport default {\n  title: \"Component Library/Dialogs/Service\",\n  component: StoryDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        DialogCloseDirective,\n        DialogComponent,\n        DialogTitleContainerDirective,\n        StoryDialogContentComponent,\n      ],\n      imports: [SharedModule, ButtonModule, DialogModule, IconButtonModule],\n      providers: [\n        DialogService,\n        {\n          provide: I18nService,\n          useFactory: () => {\n            return new I18nMockService({\n              close: \"Close\",\n            });\n          },\n        },\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library\",\n    },\n  },\n} as Meta;\n\nconst Template: Story<StoryDialogComponent> = (args: StoryDialogComponent) => ({\n  props: args,\n});\n\nexport const Default = Template.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryDialogComponent",
            "id": "component-StoryDialogComponent-305b4fa5e6775eca10092e358bd86f10b33dfa247d619685c7b8c2d10f12df598d19a486328de5b50ca07adbca4f42c18469c0f85d85575daf40c6166ca2e39b-1",
            "file": "src/dialog/simple-dialog.service.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-story-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<button bitButton (click)=\"openDialog()\">Open Simple Dialog</button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DialogModule, DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { I18nMockService } from \"../utils/i18n-mock.service\";\n\nimport { DialogService } from \"./dialog.service\";\nimport { DialogCloseDirective } from \"./directives/dialog-close.directive\";\nimport { DialogTitleContainerDirective } from \"./directives/dialog-title-container.directive\";\nimport { SimpleDialogComponent } from \"./simple-dialog/simple-dialog.component\";\n\ninterface Animal {\n  animal: string;\n}\n\n@Component({\n  selector: \"app-story-dialog\",\n  template: `<button bitButton (click)=\"openDialog()\">Open Simple Dialog</button>`,\n})\nclass StoryDialogComponent {\n  constructor(public dialogService: DialogService) {}\n\n  openDialog() {\n    this.dialogService.open(StoryDialogContentComponent, {\n      data: {\n        animal: \"panda\",\n      },\n    });\n  }\n}\n\n@Component({\n  selector: \"story-dialog-content\",\n  template: `\n    <bit-simple-dialog>\n      <span bitDialogTitle>Dialog Title</span>\n      <span bitDialogContent>\n        Dialog body text goes here.\n        <br />\n        Animal: {{ animal }}\n      </span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\" (click)=\"dialogRef.close()\">Save</button>\n        <button bitButton buttonType=\"secondary\" bitDialogClose>Cancel</button>\n      </div>\n    </bit-simple-dialog>\n  `,\n})\nclass StoryDialogContentComponent {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) private data: Animal) {}\n\n  get animal() {\n    return this.data?.animal;\n  }\n}\n\nexport default {\n  title: \"Component Library/Dialogs/Service/Simple\",\n  component: StoryDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        StoryDialogContentComponent,\n        DialogCloseDirective,\n        DialogTitleContainerDirective,\n        SimpleDialogComponent,\n      ],\n      imports: [SharedModule, IconButtonModule, ButtonModule, DialogModule],\n      providers: [\n        DialogService,\n        {\n          provide: I18nService,\n          useFactory: () => {\n            return new I18nMockService({\n              close: \"Close\",\n            });\n          },\n        },\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library\",\n    },\n  },\n} as Meta;\n\nconst Template: Story<StoryDialogComponent> = (args: StoryDialogComponent) => ({\n  props: args,\n});\n\nexport const Default = Template.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryDialogComponent-1"
        },
        {
            "name": "StoryDialogContentComponent",
            "id": "component-StoryDialogContentComponent-9d00c929acd67f88b3f8bf1309900b58b6328e4a68fd1e1918e755d1ebd262b04e3139042708d9df4f1bdcc42c6a675675fd496736725813e3ea1e58a40e2c95",
            "file": "src/dialog/dialog.service.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-dialog-content",
            "styleUrls": [],
            "styles": [],
            "template": "<bit-dialog dialogSize=\"large\">\n  <span bitDialogTitle>Dialog Title</span>\n  <span bitDialogContent>\n    Dialog body text goes here.\n    <br />\n    Animal: {{ animal }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n    <button bitButton buttonType=\"primary\" (click)=\"dialogRef.close()\">Save</button>\n    <button bitButton buttonType=\"secondary\" bitDialogClose>Cancel</button>\n  </div>\n</bit-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DIALOG_DATA, DialogModule, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\nimport { SharedModule } from \"../shared\";\nimport { I18nMockService } from \"../utils/i18n-mock.service\";\n\nimport { DialogService } from \"./dialog.service\";\nimport { DialogComponent } from \"./dialog/dialog.component\";\nimport { DialogCloseDirective } from \"./directives/dialog-close.directive\";\nimport { DialogTitleContainerDirective } from \"./directives/dialog-title-container.directive\";\n\ninterface Animal {\n  animal: string;\n}\n\n@Component({\n  selector: \"app-story-dialog\",\n  template: `<button bitButton (click)=\"openDialog()\">Open Dialog</button>`,\n})\nclass StoryDialogComponent {\n  constructor(public dialogService: DialogService) {}\n\n  openDialog() {\n    this.dialogService.open(StoryDialogContentComponent, {\n      data: {\n        animal: \"panda\",\n      },\n    });\n  }\n}\n\n@Component({\n  selector: \"story-dialog-content\",\n  template: `\n    <bit-dialog dialogSize=\"large\">\n      <span bitDialogTitle>Dialog Title</span>\n      <span bitDialogContent>\n        Dialog body text goes here.\n        <br />\n        Animal: {{ animal }}\n      </span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\" (click)=\"dialogRef.close()\">Save</button>\n        <button bitButton buttonType=\"secondary\" bitDialogClose>Cancel</button>\n      </div>\n    </bit-dialog>\n  `,\n})\nclass StoryDialogContentComponent {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) private data: Animal) {}\n\n  get animal() {\n    return this.data?.animal;\n  }\n}\n\nexport default {\n  title: \"Component Library/Dialogs/Service\",\n  component: StoryDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        DialogCloseDirective,\n        DialogComponent,\n        DialogTitleContainerDirective,\n        StoryDialogContentComponent,\n      ],\n      imports: [SharedModule, ButtonModule, DialogModule, IconButtonModule],\n      providers: [\n        DialogService,\n        {\n          provide: I18nService,\n          useFactory: () => {\n            return new I18nMockService({\n              close: \"Close\",\n            });\n          },\n        },\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library\",\n    },\n  },\n} as Meta;\n\nconst Template: Story<StoryDialogComponent> = (args: StoryDialogComponent) => ({\n  props: args,\n});\n\nexport const Default = Template.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Animal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Animal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "animal": {
                    "name": "animal",
                    "getSignature": {
                        "name": "animal",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            }
        },
        {
            "name": "StoryDialogContentComponent",
            "id": "component-StoryDialogContentComponent-305b4fa5e6775eca10092e358bd86f10b33dfa247d619685c7b8c2d10f12df598d19a486328de5b50ca07adbca4f42c18469c0f85d85575daf40c6166ca2e39b-1",
            "file": "src/dialog/simple-dialog.service.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-dialog-content",
            "styleUrls": [],
            "styles": [],
            "template": "<bit-simple-dialog>\n  <span bitDialogTitle>Dialog Title</span>\n  <span bitDialogContent>\n    Dialog body text goes here.\n    <br />\n    Animal: {{ animal }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n    <button bitButton buttonType=\"primary\" (click)=\"dialogRef.close()\">Save</button>\n    <button bitButton buttonType=\"secondary\" bitDialogClose>Cancel</button>\n  </div>\n</bit-simple-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DialogModule, DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { ButtonModule } from \"../button\";\nimport { IconButtonModule } from \"../icon-button\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { I18nMockService } from \"../utils/i18n-mock.service\";\n\nimport { DialogService } from \"./dialog.service\";\nimport { DialogCloseDirective } from \"./directives/dialog-close.directive\";\nimport { DialogTitleContainerDirective } from \"./directives/dialog-title-container.directive\";\nimport { SimpleDialogComponent } from \"./simple-dialog/simple-dialog.component\";\n\ninterface Animal {\n  animal: string;\n}\n\n@Component({\n  selector: \"app-story-dialog\",\n  template: `<button bitButton (click)=\"openDialog()\">Open Simple Dialog</button>`,\n})\nclass StoryDialogComponent {\n  constructor(public dialogService: DialogService) {}\n\n  openDialog() {\n    this.dialogService.open(StoryDialogContentComponent, {\n      data: {\n        animal: \"panda\",\n      },\n    });\n  }\n}\n\n@Component({\n  selector: \"story-dialog-content\",\n  template: `\n    <bit-simple-dialog>\n      <span bitDialogTitle>Dialog Title</span>\n      <span bitDialogContent>\n        Dialog body text goes here.\n        <br />\n        Animal: {{ animal }}\n      </span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\" (click)=\"dialogRef.close()\">Save</button>\n        <button bitButton buttonType=\"secondary\" bitDialogClose>Cancel</button>\n      </div>\n    </bit-simple-dialog>\n  `,\n})\nclass StoryDialogContentComponent {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) private data: Animal) {}\n\n  get animal() {\n    return this.data?.animal;\n  }\n}\n\nexport default {\n  title: \"Component Library/Dialogs/Service/Simple\",\n  component: StoryDialogComponent,\n  decorators: [\n    moduleMetadata({\n      declarations: [\n        StoryDialogContentComponent,\n        DialogCloseDirective,\n        DialogTitleContainerDirective,\n        SimpleDialogComponent,\n      ],\n      imports: [SharedModule, IconButtonModule, ButtonModule, DialogModule],\n      providers: [\n        DialogService,\n        {\n          provide: I18nService,\n          useFactory: () => {\n            return new I18nMockService({\n              close: \"Close\",\n            });\n          },\n        },\n      ],\n    }),\n  ],\n  parameters: {\n    design: {\n      type: \"figma\",\n      url: \"https://www.figma.com/file/Zt3YSeb6E6lebAffrNLa0h/Tailwind-Component-Library\",\n    },\n  },\n} as Meta;\n\nconst Template: Story<StoryDialogComponent> = (args: StoryDialogComponent) => ({\n  props: args,\n});\n\nexport const Default = Template.bind({});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Animal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Animal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "animal": {
                    "name": "animal",
                    "getSignature": {
                        "name": "animal",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryDialogContentComponent-1"
        },
        {
            "name": "TabBodyComponent",
            "id": "component-TabBodyComponent-88f50b4b87d99ed2a75ca85aaab90715f02486e9a5f1ca02908c772efd50942caf329c45a0954a2215944f34cd50036635dc83ec7968dc23d22db9aa033eb59d",
            "file": "src/tabs/tab-group/tab-body.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-body",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "tab-body.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplatePortal",
                    "decorators": []
                },
                {
                    "name": "preserveContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_firstRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "true",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { TemplatePortal } from \"@angular/cdk/portal\";\nimport { Component, HostBinding, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-tab-body\",\n  templateUrl: \"tab-body.component.html\",\n})\nexport class TabBodyComponent {\n  private _firstRender: boolean;\n\n  @Input() content: TemplatePortal;\n  @Input() preserveContent = false;\n\n  @HostBinding(\"attr.hidden\") get hidden() {\n    return !this.active || null;\n  }\n\n  @Input()\n  get active() {\n    return this._active;\n  }\n  set active(value: boolean) {\n    this._active = value;\n    if (this._active) {\n      this._firstRender = true;\n    }\n  }\n  private _active: boolean;\n\n  /**\n   * The tab content to render.\n   * Inactive tabs that have never been rendered/active do not have their\n   * content rendered by default for performance. If `preserveContent` is `true`\n   * then the content persists after the first time content is rendered.\n   */\n  get tabContent() {\n    if (this.active) {\n      return this.content;\n    }\n    if (this.preserveContent && this._firstRender) {\n      return this.content;\n    }\n    return null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "hidden": {
                    "name": "hidden",
                    "getSignature": {
                        "name": "hidden",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                },
                "active": {
                    "name": "active",
                    "setSignature": {
                        "name": "active",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "active",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                },
                "tabContent": {
                    "name": "tabContent",
                    "getSignature": {
                        "name": "tabContent",
                        "type": "",
                        "returnType": "",
                        "line": 36,
                        "rawdescription": "\n\nThe tab content to render.\nInactive tabs that have never been rendered/active do not have their\ncontent rendered by default for performance. If `preserveContent` is `true`\nthen the content persists after the first time content is rendered.\n",
                        "description": "<p>The tab content to render.\nInactive tabs that have never been rendered/active do not have their\ncontent rendered by default for performance. If <code>preserveContent</code> is <code>true</code>\nthen the content persists after the first time content is rendered.</p>\n"
                    }
                }
            },
            "templateData": "<ng-template [cdkPortalOutlet]=\"tabContent\"></ng-template>\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-2e636bbbb48fe7b9877b6a24af92ab4cf685d491b07dbccc9d8cd76287dd185987c4082057b59c0694f2398a963eb4f012f9c7f835007fe0af1d8c863c173a76",
            "file": "src/tabs/tab-group/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "contentTabIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 753,
                            "end": 830,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 754,
                                "end": 761,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "remarks"
                            },
                            "comment": "<p>See note 4 of <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\">https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/</a></p>\n"
                        }
                    ],
                    "rawdescription": "\n\nOptional tabIndex for the tabPanel that contains this tab's content.\n\nIf the tabpanel does not contain any focusable elements or the first element with content is not focusable,\nthis should be set to 0 to include it in the tab sequence of the page.\n\n",
                    "description": "<p>Optional tabIndex for the tabPanel that contains this tab&#39;s content.</p>\n<p>If the tabpanel does not contain any focusable elements or the first element with content is not focusable,\nthis should be set to 0 to include it in the tab sequence of the page.</p>\n",
                    "line": 33,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_contentPortal",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplatePortal | null",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "implicitContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: true}"
                        }
                    ]
                },
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "templateLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLabelDirective",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TabLabelDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { TemplatePortal } from \"@angular/cdk/portal\";\nimport {\n  Component,\n  ContentChild,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from \"@angular/core\";\n\nimport { TabLabelDirective } from \"./tab-label.directive\";\n\n@Component({\n  selector: \"bit-tab\",\n  templateUrl: \"./tab.component.html\",\n  host: {\n    role: \"tabpanel\",\n  },\n})\nexport class TabComponent implements OnInit {\n  @Input() disabled = false;\n  @Input(\"label\") textLabel = \"\";\n\n  /**\n   * Optional tabIndex for the tabPanel that contains this tab's content.\n   *\n   * If the tabpanel does not contain any focusable elements or the first element with content is not focusable,\n   * this should be set to 0 to include it in the tab sequence of the page.\n   *\n   * @remarks See note 4 of https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n   */\n  @Input() contentTabIndex: number | undefined;\n\n  @ViewChild(TemplateRef, { static: true }) implicitContent: TemplateRef<unknown>;\n  @ContentChild(TabLabelDirective) templateLabel: TabLabelDirective;\n\n  private _contentPortal: TemplatePortal | null = null;\n\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  isActive: boolean;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this.implicitContent, this._viewContainerRef);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "content": {
                    "name": "content",
                    "getSignature": {
                        "name": "content",
                        "type": "",
                        "returnType": "TemplatePortal | null",
                        "line": 40
                    }
                }
            },
            "templateData": "<ng-template><ng-content></ng-content></ng-template>\n"
        },
        {
            "name": "TabGroupComponent",
            "id": "component-TabGroupComponent-0364fee9fe307402a8db3a577a62d160ae62fcd2cd7089bcf6c451f643fa43f5575a9f38748a4811c3e793f6e87677d7e4330d9068ce59368046db91f565497a",
            "file": "src/tabs/tab-group/tab-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-group",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAria label for the tab list menu\n",
                    "description": "<p>Aria label for the tab list menu</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preserveContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nKeep the content of off-screen tabs in the DOM.\nUseful for keeping <audio> or <video> elements from re-initializing\nafter navigating between tabs.\n",
                    "description": "<p>Keep the content of off-screen tabs in the DOM.\nUseful for keeping <audio> or <video> elements from re-initializing\nafter navigating between tabs.</p>\n",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe index of the active tab.",
                    "description": "<p>The index of the active tab.</p>\n",
                    "line": 53,
                    "type": "number | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOutput to enable support for two-way binding on `[(selectedIndex)]`",
                    "description": "<p>Output to enable support for two-way binding on <code>[(selectedIndex)]</code></p>\n",
                    "line": 62,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "selectedTabChange",
                    "defaultValue": "new EventEmitter<BitTabChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted when the tab selection has changed.",
                    "description": "<p>Event emitted when the tab selection has changed.</p>\n",
                    "line": 65,
                    "type": "EventEmitter<BitTabChangeEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_indexToSelect",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selectedIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "keyManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusKeyManager<TabListItemDirective>",
                    "optional": false,
                    "description": "<p>Focus key manager for keeping tab controls accessible.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\">https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions</a></p>\n",
                    "line": 72,
                    "rawdescription": "\n\nFocus key manager for keeping tab controls accessible.\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\n"
                },
                {
                    "name": "tabLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabListItemDirective>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "TabListItemDirective"
                        }
                    ]
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_clampTabIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabContentId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTabLabelId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter content is checked, the tab group knows what tabs are defined and which index\nshould be currently selected.\n",
                    "description": "<p>After content is checked, the tab group knows what tabs are defined and which index\nshould be currently selected.</p>\n"
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FocusKeyManager } from \"@angular/cdk/a11y\";\nimport { coerceNumberProperty } from \"@angular/cdk/coercion\";\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChildren,\n} from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TabListItemDirective } from \"../shared/tab-list-item.directive\";\n\nimport { TabComponent } from \"./tab.component\";\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-tab-group\",\n  templateUrl: \"./tab-group.component.html\",\n})\nexport class TabGroupComponent\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  private readonly _groupId: number;\n  private readonly destroy$ = new Subject<void>();\n  private _indexToSelect: number | null = 0;\n\n  /**\n   * Aria label for the tab list menu\n   */\n  @Input() label = \"\";\n\n  /**\n   * Keep the content of off-screen tabs in the DOM.\n   * Useful for keeping <audio> or <video> elements from re-initializing\n   * after navigating between tabs.\n   */\n  @Input() preserveContent = false;\n\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\n  @ViewChildren(TabListItemDirective) tabLabels: QueryList<TabListItemDirective>;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<BitTabChangeEvent> =\n    new EventEmitter<BitTabChangeEvent>();\n\n  /**\n   * Focus key manager for keeping tab controls accessible.\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\n   */\n  keyManager: FocusKeyManager<TabListItemDirective>;\n\n  constructor() {\n    this._groupId = nextId++;\n  }\n\n  protected getTabContentId(id: number): string {\n    return `bit-tab-content-${this._groupId}-${id}`;\n  }\n\n  protected getTabLabelId(id: number): string {\n    return `bit-tab-label-${this._groupId}-${id}`;\n  }\n\n  selectTab(index: number) {\n    this.selectedIndex = index;\n  }\n\n  /**\n   * After content is checked, the tab group knows what tabs are defined and which index\n   * should be currently selected.\n   */\n  ngAfterContentChecked(): void {\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit({\n          index: indexToSelect,\n          tab: this.tabs.toArray()[indexToSelect],\n        });\n      }\n\n      // These values need to be updated after change detection as\n      // the checked content may have references to them.\n      Promise.resolve().then(() => {\n        this.tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n\n      // Manually update the _selectedIndex and keyManager active item\n      this._selectedIndex = indexToSelect;\n      if (this.keyManager) {\n        this.keyManager.setActiveItem(indexToSelect);\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.keyManager = new FocusKeyManager(this.tabLabels)\n      .withHorizontalOrientation(\"ltr\")\n      .withWrap()\n      .withHomeAndEnd();\n  }\n\n  ngAfterContentInit() {\n    // Subscribe to any changes in the number of tabs, in order to be able\n    // to re-render content when new tabs are added or removed.\n    this.tabs.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // If the selected tab didn't explicitly change, keep the previously\n      // selected tab selected/active\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this.tabs.toArray();\n        let selectedTab: TabComponent | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Set both _indexToSelect and _selectedIndex to avoid firing a change\n            // event which could cause an infinite loop if adding a tab within the\n            // selectedIndexChange event\n            this._indexToSelect = this._selectedIndex = i;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // No active tab found and a tab does exist means the active tab\n        // was removed, so a new active tab must be set manually\n        if (!selectedTab && tabs[indexToSelect]) {\n          tabs[indexToSelect].isActive = true;\n          this.selectedTabChange.emit({\n            index: indexToSelect,\n            tab: tabs[indexToSelect],\n          });\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _clampTabIndex(index: number): number {\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n  }\n}\n\nexport class BitTabChangeEvent {\n  /**\n   * The currently selected tab index\n   */\n  index: number;\n  /**\n   * The currently selected tab\n   */\n  tab: TabComponent;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 72
            },
            "implements": [
                "AfterContentChecked",
                "AfterContentInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "selectedIndex": {
                    "name": "selectedIndex",
                    "setSignature": {
                        "name": "selectedIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedIndex",
                        "type": "",
                        "returnType": "number | null",
                        "line": 53,
                        "rawdescription": "\nThe index of the active tab.",
                        "description": "<p>The index of the active tab.</p>\n"
                    }
                }
            },
            "templateData": "<bit-tab-header>\n  <div\n    bitTabListContainer\n    role=\"tablist\"\n    [attr.aria-label]=\"label\"\n    (keydown)=\"keyManager.onKeydown($event)\"\n  >\n    <button\n      bitTabListItem\n      *ngFor=\"let tab of tabs; let i = index\"\n      type=\"button\"\n      role=\"tab\"\n      [id]=\"getTabLabelId(i)\"\n      [active]=\"tab.isActive\"\n      [disabled]=\"tab.disabled\"\n      [attr.aria-selected]=\"selectedIndex === i\"\n      [attr.tabindex]=\"selectedIndex === i ? 0 : -1\"\n      (click)=\"selectTab(i)\"\n    >\n      <ng-container [ngTemplateOutlet]=\"content\"></ng-container>\n\n      <ng-template #content>\n        <ng-template [ngIf]=\"tab.templateLabel\" [ngIfElse]=\"tabTextLabel\">\n          <ng-container [ngTemplateOutlet]=\"tab.templateLabel.templateRef\"></ng-container>\n        </ng-template>\n\n        <ng-template #tabTextLabel>{{ tab.textLabel }}</ng-template>\n      </ng-template>\n    </button>\n  </div>\n</bit-tab-header>\n<div class=\"tw-px-4 tw-pt-5\">\n  <bit-tab-body\n    role=\"tabpanel\"\n    *ngFor=\"let tab of tabs; let i = index\"\n    [id]=\"getTabContentId(i)\"\n    [attr.tabindex]=\"tab.contentTabIndex\"\n    [attr.labeledby]=\"getTabLabelId(i)\"\n    [active]=\"tab.isActive\"\n    [content]=\"tab.content\"\n    [preserveContent]=\"preserveContent\"\n  >\n  </bit-tab-body>\n</div>\n"
        },
        {
            "name": "TabHeaderComponent",
            "id": "component-TabHeaderComponent-68c737c00a35b8ca3b9a62c80f8c599a544f00143f5eedb333b4fd9b7606487a1eb395bfc6c2935aa965380c7c62775c3710aebb2afd735c758302ddd87a5c67",
            "file": "src/tabs/shared/tab-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-header",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component used for styling the tab header/background for both content and navigation tabs</p>\n",
            "rawdescription": "\n\nComponent used for styling the tab header/background for both content and navigation tabs\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n/**\n * Component used for styling the tab header/background for both content and navigation tabs\n */\n@Component({\n  selector: \"bit-tab-header\",\n  host: {\n    class:\n      \"tw-h-16 tw-pl-4 tw-bg-background-alt tw-flex tw-items-end tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300\",\n  },\n  template: `<ng-content></ng-content>`,\n})\nexport class TabHeaderComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-0514945220b8e6cba682dcf2c10c807230648208a75c9711a0de75782450a743b37502709c9746e808d284e7b3cd07ef96a1757843231e126b89d52b4ede7a31",
            "file": "src/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-table\",\n  templateUrl: \"./table.component.html\",\n})\nexport class TableComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<table class=\"tw-w-full tw-table-auto tw-leading-normal tw-text-main\">\n  <thead\n    class=\"tw-text-bold tw-border-0 tw-border-b-2 tw-border-solid tw-border-secondary-300 tw-text-muted\"\n  >\n    <ng-content select=\"[header]\"></ng-content>\n  </thead>\n  <tbody>\n    <ng-content select=\"[body]\"></ng-content>\n  </tbody>\n</table>\n"
        },
        {
            "name": "TabLinkComponent",
            "id": "component-TabLinkComponent-114094660e4501b444f48eefb371f85ee160cd2e151d5899046f748aa78285c909057c7378140fa08e93853e21986cf6eb6649ab0334795cdfc2ea14ee44a6ac",
            "file": "src/tabs/tab-nav-bar/tab-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-link",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "tab-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "routerLinkActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterLinkActive",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'rla'"
                        }
                    ]
                },
                {
                    "name": "routerLinkMatchOptions",
                    "defaultValue": "{\n    queryParams: \"ignored\",\n    matrixParams: \"ignored\",\n    paths: \"subset\",\n    fragment: \"ignored\",\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IsActiveMatchOptions",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "tabItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabListItemDirective",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TabListItemDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FocusableOption } from \"@angular/cdk/a11y\";\nimport { AfterViewInit, Component, HostListener, Input, OnDestroy, ViewChild } from \"@angular/core\";\nimport { IsActiveMatchOptions, RouterLinkActive } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TabListItemDirective } from \"../shared/tab-list-item.directive\";\n\nimport { TabNavBarComponent } from \"./tab-nav-bar.component\";\n\n@Component({\n  selector: \"bit-tab-link\",\n  templateUrl: \"tab-link.component.html\",\n})\nexport class TabLinkComponent implements FocusableOption, AfterViewInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  @ViewChild(TabListItemDirective) tabItem: TabListItemDirective;\n  @ViewChild(\"rla\") routerLinkActive: RouterLinkActive;\n\n  readonly routerLinkMatchOptions: IsActiveMatchOptions = {\n    queryParams: \"ignored\",\n    matrixParams: \"ignored\",\n    paths: \"subset\",\n    fragment: \"ignored\",\n  };\n\n  @Input() route: string;\n  @Input() disabled = false;\n\n  @HostListener(\"keydown\", [\"$event\"]) onKeyDown(event: KeyboardEvent) {\n    if (event.code === \"Space\") {\n      this.tabItem.click();\n    }\n  }\n\n  get active() {\n    return this.routerLinkActive?.isActive ?? false;\n  }\n\n  constructor(private _tabNavBar: TabNavBarComponent) {}\n\n  focus(): void {\n    this.tabItem.focus();\n  }\n\n  ngAfterViewInit() {\n    // The active state of tab links are tracked via the routerLinkActive directive\n    // We need to watch for changes to tell the parent nav group when the tab is active\n    this.routerLinkActive.isActiveChange\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this._tabNavBar.updateActiveLink());\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_tabNavBar",
                        "type": "TabNavBarComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "_tabNavBar",
                        "type": "TabNavBarComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "FocusableOption",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "active": {
                    "name": "active",
                    "getSignature": {
                        "name": "active",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<a\n  bitTabListItem\n  [routerLink]=\"disabled ? null : route\"\n  routerLinkActive\n  [routerLinkActiveOptions]=\"routerLinkMatchOptions\"\n  #rla=\"routerLinkActive\"\n  [active]=\"rla.isActive\"\n  [disabled]=\"disabled\"\n  [attr.aria-disabled]=\"disabled\"\n  ariaCurrentWhenActive=\"page\"\n  role=\"link\"\n>\n  <ng-content></ng-content>\n</a>\n"
        },
        {
            "name": "TabNavBarComponent",
            "id": "component-TabNavBarComponent-5142716c4e3e0091f65e47a0d87525b171244d2e2dcebe0a5789e03ea1d78d814b3608fb0e141eea432138892712829f4dcadb568c135c3f1c54bb0832951814",
            "file": "src/tabs/tab-nav-bar/tab-nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-tab-nav-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "tab-nav-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "keyManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FocusKeyManager<TabLinkComponent>",
                    "optional": false,
                    "description": "<p>Focus key manager for keeping tab controls accessible.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\">https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions</a></p>\n",
                    "line": 25,
                    "rawdescription": "\n\nFocus key manager for keeping tab controls accessible.\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\n"
                },
                {
                    "name": "tabLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabLinkComponent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "undefined"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateActiveLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FocusKeyManager } from \"@angular/cdk/a11y\";\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  forwardRef,\n  Input,\n  QueryList,\n} from \"@angular/core\";\n\nimport { TabLinkComponent } from \"./tab-link.component\";\n\n@Component({\n  selector: \"bit-tab-nav-bar\",\n  templateUrl: \"tab-nav-bar.component.html\",\n})\nexport class TabNavBarComponent implements AfterContentInit {\n  @ContentChildren(forwardRef(() => TabLinkComponent)) tabLabels: QueryList<TabLinkComponent>;\n  @Input() label = \"\";\n\n  /**\n   * Focus key manager for keeping tab controls accessible.\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\n   */\n  keyManager: FocusKeyManager<TabLinkComponent>;\n\n  ngAfterContentInit(): void {\n    this.keyManager = new FocusKeyManager(this.tabLabels)\n      .withHorizontalOrientation(\"ltr\")\n      .withWrap()\n      .withHomeAndEnd();\n  }\n\n  updateActiveLink() {\n    // Keep the keyManager in sync with active tabs\n    const items = this.tabLabels.toArray();\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.keyManager.updateActiveItem(i);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<bit-tab-header>\n  <nav bitTabListContainer [attr.aria-label]=\"label\" (keydown)=\"keyManager.onKeydown($event)\">\n    <ng-content></ng-content>\n  </nav>\n</bit-tab-header>\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-8f89aa9c2e1511ec9d509168a379174952af22d9f9ec9a63a2a6aca432cacffd433064d37d518a6990f443e582c2ed90a3b32bd05eff1ed6d461f0e4f424307c",
            "file": "src/toggle-group/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-toggle",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classList",
                    "defaultValue": "[\"tw-group\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "nextId++",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "\"-1\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'tabIndex'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onInputInteraction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "[\"tw-group\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "\"-1\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HostBinding, Component, Input } from \"@angular/core\";\n\nimport { ToggleGroupComponent } from \"./toggle-group.component\";\n\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-toggle\",\n  templateUrl: \"./toggle.component.html\",\n  preserveWhitespaces: false,\n})\nexport class ToggleComponent {\n  id = nextId++;\n\n  @Input() value?: string;\n\n  constructor(private groupComponent: ToggleGroupComponent) {}\n\n  @HostBinding(\"tabIndex\") tabIndex = \"-1\";\n  @HostBinding(\"class\") classList = [\"tw-group\"];\n\n  get name() {\n    return this.groupComponent.name;\n  }\n\n  get selected() {\n    return this.groupComponent.selected === this.value;\n  }\n\n  get inputClasses() {\n    return [\"tw-peer\", \"tw-appearance-none\", \"tw-outline-none\"];\n  }\n\n  get labelClasses() {\n    return [\n      \"!tw-font-semibold\",\n      \"tw-transition\",\n      \"tw-text-center\",\n      \"tw-border-text-muted\",\n      \"!tw-text-muted\",\n      \"tw-border-solid\",\n      \"tw-border-y\",\n      \"tw-border-r\",\n      \"tw-border-l-0\",\n      \"tw-cursor-pointer\",\n      \"group-first-of-type:tw-border-l\",\n      \"group-first-of-type:tw-rounded-l\",\n      \"group-last-of-type:tw-rounded-r\",\n\n      \"peer-focus:tw-outline-none\",\n      \"peer-focus:tw-ring\",\n      \"peer-focus:tw-ring-offset-2\",\n      \"peer-focus:tw-ring-primary-500\",\n      \"peer-focus:tw-z-10\",\n      \"peer-focus:tw-bg-primary-500\",\n      \"peer-focus:tw-border-primary-500\",\n      \"peer-focus:!tw-text-contrast\",\n\n      \"hover:tw-no-underline\",\n      \"hover:tw-bg-text-muted\",\n      \"hover:tw-border-text-muted\",\n      \"hover:!tw-text-contrast\",\n\n      \"peer-checked:tw-bg-primary-500\",\n      \"peer-checked:tw-border-primary-500\",\n      \"peer-checked:!tw-text-contrast\",\n      \"tw-py-1.5\",\n      \"tw-px-3\",\n\n      // Fix for badge being pushed slightly lower when inside a button.\n      // Insipired by bootstrap, which does the same.\n      \"[&>[bitBadge]]:tw-relative\",\n      \"[&>[bitBadge]]:tw--top-px\",\n    ];\n  }\n\n  onInputInteraction() {\n    this.groupComponent.onInputInteraction(this.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupComponent",
                        "type": "ToggleGroupComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "groupComponent",
                        "type": "ToggleGroupComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                },
                "selected": {
                    "name": "selected",
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                },
                "inputClasses": {
                    "name": "inputClasses",
                    "getSignature": {
                        "name": "inputClasses",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                },
                "labelClasses": {
                    "name": "labelClasses",
                    "getSignature": {
                        "name": "labelClasses",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            },
            "templateData": "<input\n  type=\"radio\"\n  id=\"bit-toggle-{{ id }}\"\n  [name]=\"name\"\n  [ngClass]=\"inputClasses\"\n  [checked]=\"selected\"\n  (change)=\"onInputInteraction()\"\n/>\n<label for=\"bit-toggle-{{ id }}\" [ngClass]=\"labelClasses\">\n  <ng-content></ng-content>\n</label>\n"
        },
        {
            "name": "ToggleGroupComponent",
            "id": "component-ToggleGroupComponent-abe66cf3ee7df19d568979dac801cb0a5a2ec8c49da250b0b1dd2e8d32cf76088cf6257a6b29900c592e3e307a2d9c99a10efc66a2e982e64cc5d7584a1bdfbd",
            "file": "src/toggle-group/toggle-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-toggle-group",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toggle-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedChange",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "classList",
                    "defaultValue": "[\"tw-flex\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "nextId++",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "`bit-toggle-group-${this.id}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "role",
                    "defaultValue": "\"radiogroup\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.role'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onInputInteraction",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "\"radiogroup\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "[\"tw-flex\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "{}",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, Input, Output } from \"@angular/core\";\n\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-toggle-group\",\n  templateUrl: \"./toggle-group.component.html\",\n  preserveWhitespaces: false,\n})\nexport class ToggleGroupComponent {\n  private id = nextId++;\n  name = `bit-toggle-group-${this.id}`;\n\n  @Input() selected?: unknown;\n  @Output() selectedChange = new EventEmitter<unknown>();\n\n  @HostBinding(\"attr.role\") role = \"radiogroup\";\n  @HostBinding(\"class\") classList = [\"tw-flex\"];\n\n  onInputInteraction(value: unknown) {\n    this.selected = value;\n    this.selectedChange.emit(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "preserveWhitespaces": false,
            "templateData": "<ng-content></ng-content>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-97efc3d9e6e824223523d393c87e284e20a15877750d2d1a629862e27525448ea4349323d888a5520c7f6485418a8b561adfb86b92250b193c50c20d533f8d62",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\n\nimport { AppComponent } from \"./app.component\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, CommonModule],\n  providers: [{ provide: \"WINDOW\", useValue: window }],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AsyncActionsModule",
            "id": "module-AsyncActionsModule-5a7363d52d8fe7b3b91ddd32541a0d7cbc9f297f358dd88f64816516c4e88a0e5da7bbd905458173ee792099b5f0a68784a1e06b80249cfba2bf85c3db999d54",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/async-actions/async-actions.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"../shared\";\n\nimport { BitActionDirective } from \"./bit-action.directive\";\nimport { BitSubmitDirective } from \"./bit-submit.directive\";\nimport { BitFormButtonDirective } from \"./form-button.directive\";\n\n@NgModule({\n  imports: [SharedModule],\n  declarations: [BitActionDirective, BitFormButtonDirective, BitSubmitDirective],\n  exports: [BitActionDirective, BitFormButtonDirective, BitSubmitDirective],\n})\nexport class AsyncActionsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BitActionDirective"
                        },
                        {
                            "name": "BitFormButtonDirective"
                        },
                        {
                            "name": "BitSubmitDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BitActionDirective"
                        },
                        {
                            "name": "BitFormButtonDirective"
                        },
                        {
                            "name": "BitSubmitDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AvatarModule",
            "id": "module-AvatarModule-aacc67a5a3a5f1dfce7cabe2f68420ea2a43bbd65007eb96138222706dbe0ebb76388742c76fd2aa8ad91f05766820583d6e4bfa03f6d26f8b030152ac012c48",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { AvatarComponent } from \"./avatar.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [AvatarComponent],\n  declarations: [AvatarComponent],\n})\nexport class AvatarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BadgeModule",
            "id": "module-BadgeModule-ebc586c787d1dd5ed17c84dc9d5043fb314020fd5867a5b380f89ace32bee78f1c437df44c00051549f9782591c26e6330993dfbf139689436d20d822a63fa66",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/badge/badge.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { BadgeDirective } from \"./badge.directive\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [BadgeDirective],\n  declarations: [BadgeDirective],\n})\nexport class BadgeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BadgeDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BannerModule",
            "id": "module-BannerModule-77a90b5c15021d7582924591de5d117e5614f35452bcbd9c9da95b106baa232a1c888387433f94ea2e827881f5a81c13bedc2d6110a0f9976ae3ad61b295397a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/banner/banner.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { IconButtonModule } from \"../icon-button\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { BannerComponent } from \"./banner.component\";\n\n@NgModule({\n  imports: [CommonModule, SharedModule, IconButtonModule],\n  exports: [BannerComponent],\n  declarations: [BannerComponent],\n})\nexport class BannerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BannerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconButtonModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BannerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-3c21dfb9c7ffe58bf1f40c3ec7b0519d1515e3d018d8dcdf9704158e88ba79aa955650ddd28d59fe7b52af523e56c6cbe18effd0838da59606b6fef79fc9475d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { ButtonComponent } from \"./button.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [ButtonComponent],\n  declarations: [ButtonComponent],\n})\nexport class ButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CalloutModule",
            "id": "module-CalloutModule-d40919fd9ba2d9fd049b60bc15c24a7254e08ffe783b8017259aa6f4b07fc0ba29f400b860bd53a99c9505db10e3e8b19636adc1bfa79f81b571f19b4137f3ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/callout/callout.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { CalloutComponent } from \"./callout.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [CalloutComponent],\n  declarations: [CalloutComponent],\n})\nexport class CalloutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CalloutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CalloutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ColorPasswordModule",
            "id": "module-ColorPasswordModule-ab55996dacbb5319b2b73348918d08a65b3e4cba3ac6b0da331790ffe9a1cb77c6709cffa14a65e17ba825a4743eb6267eb494367e9cd812f0d7350a7d509bae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/color-password/color-password.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { ColorPasswordComponent } from \"./color-password.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [ColorPasswordComponent],\n  declarations: [ColorPasswordComponent],\n})\nexport class ColorPasswordModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColorPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColorPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "id": "module-DialogModule-f0935b35331fa545765bc8e3e2d96985c73707df0601529a9ce32118c12c0d1027b5f28d978383ecc71527f3b4a2515df95852db8936740684e3ee8b1ddde14e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { DialogModule as CdkDialogModule } from \"@angular/cdk/dialog\";\nimport { NgModule } from \"@angular/core\";\n\nimport { IconButtonModule } from \"../icon-button\";\nimport { SharedModule } from \"../shared\";\n\nimport { DialogService } from \"./dialog.service\";\nimport { DialogComponent } from \"./dialog/dialog.component\";\nimport { DialogCloseDirective } from \"./directives/dialog-close.directive\";\nimport { DialogTitleContainerDirective } from \"./directives/dialog-title-container.directive\";\nimport { SimpleDialogComponent } from \"./simple-dialog/simple-dialog.component\";\n\n@NgModule({\n  imports: [SharedModule, IconButtonModule, CdkDialogModule],\n  declarations: [\n    DialogCloseDirective,\n    DialogTitleContainerDirective,\n    DialogComponent,\n    SimpleDialogComponent,\n  ],\n  exports: [CdkDialogModule, DialogComponent, SimpleDialogComponent],\n  providers: [DialogService],\n})\nexport class DialogModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogCloseDirective"
                        },
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "DialogTitleContainerDirective"
                        },
                        {
                            "name": "SimpleDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconButtonModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "SimpleDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormFieldModule",
            "id": "module-FormFieldModule-cfc2882afa426747480d46594d70e44d4c5d6ae2b5eac1a48cd6904e5cd280761c2856af443d54cd21c737d5f1275e1907dcc05b37b29e499dcb5f111a5bc765",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/form-field/form-field.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\n\nimport { BitInputDirective } from \"../input/input.directive\";\nimport { InputModule } from \"../input/input.module\";\nimport { MultiSelectComponent } from \"../multi-select/multi-select.component\";\nimport { MultiSelectModule } from \"../multi-select/multi-select.module\";\nimport { SharedModule } from \"../shared\";\n\nimport { BitErrorSummary } from \"./error-summary.component\";\nimport { BitErrorComponent } from \"./error.component\";\nimport { BitFormFieldComponent } from \"./form-field.component\";\nimport { BitHintComponent } from \"./hint.component\";\nimport { BitLabel } from \"./label.directive\";\nimport { BitPrefixDirective } from \"./prefix.directive\";\nimport { BitSuffixDirective } from \"./suffix.directive\";\n\n@NgModule({\n  imports: [SharedModule, InputModule, MultiSelectModule],\n  exports: [\n    BitErrorComponent,\n    BitErrorSummary,\n    BitFormFieldComponent,\n    BitHintComponent,\n    BitLabel,\n    BitPrefixDirective,\n    BitSuffixDirective,\n    BitInputDirective,\n    MultiSelectComponent,\n  ],\n  declarations: [\n    BitErrorComponent,\n    BitErrorSummary,\n    BitFormFieldComponent,\n    BitHintComponent,\n    BitLabel,\n    BitPrefixDirective,\n    BitSuffixDirective,\n  ],\n})\nexport class FormFieldModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BitErrorComponent"
                        },
                        {
                            "name": "BitErrorSummary"
                        },
                        {
                            "name": "BitFormFieldComponent"
                        },
                        {
                            "name": "BitHintComponent"
                        },
                        {
                            "name": "BitLabel"
                        },
                        {
                            "name": "BitPrefixDirective"
                        },
                        {
                            "name": "BitSuffixDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MultiSelectModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BitErrorComponent"
                        },
                        {
                            "name": "BitErrorSummary"
                        },
                        {
                            "name": "BitFormFieldComponent"
                        },
                        {
                            "name": "BitHintComponent"
                        },
                        {
                            "name": "BitInputDirective"
                        },
                        {
                            "name": "BitLabel"
                        },
                        {
                            "name": "BitPrefixDirective"
                        },
                        {
                            "name": "BitSuffixDirective"
                        },
                        {
                            "name": "MultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconButtonModule",
            "id": "module-IconButtonModule-e6175ec4d3437233a4ad4c053387a77e33405d70d1ca85b58c1a3301eb50ed6f4a844ad20f0b78e1b012829783e207344045bbbc870beb8b41bf5c35903fa371",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/icon-button/icon-button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { BitIconButtonComponent } from \"./icon-button.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BitIconButtonComponent],\n  exports: [BitIconButtonComponent],\n})\nexport class IconButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BitIconButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BitIconButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "id": "module-IconModule-50d998f7c550630b0344c22a3544ecd1ff91e4fc8485664cfacb38c471183dc49a3e44e6f7efdc8f957b369012ff41bdda505fdb99713cb30f451ac9960a4f38",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { BitIconComponent } from \"./icon.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BitIconComponent],\n  exports: [BitIconComponent],\n})\nexport class IconModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BitIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BitIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-312bf0c5f34e340addfd60ddd2a363cf953ce0b448ac4e847040eb328236f6ddd06cfca582ec43c466db6b542eb5098564f9091507b37979c613d2bee9666286",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { BitInputDirective } from \"./input.directive\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BitInputDirective],\n  exports: [BitInputDirective],\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BitInputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BitInputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LinkModule",
            "id": "module-LinkModule-c8e4adc55589efa02749607afa9c8c27e92737a547411fa1abba4c92894d0b525df6a2211156bc1d0b6fcb4a888676285afaa05c5f2c7a118033acfd117f35b6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/link/link.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { LinkDirective } from \"./link.directive\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [LinkDirective],\n  declarations: [LinkDirective],\n})\nexport class LinkModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LinkDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LinkDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "id": "module-MenuModule-609aeb0d06d55924e29257bdb304172948d8cd0c98522a3a1cff8dc538431a504978e3887c2fe9b4dad7311092783fdd64f7d5af7b0928ce7d4e9d039d080101",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { MenuDividerComponent } from \"./menu-divider.component\";\nimport { MenuItemDirective } from \"./menu-item.directive\";\nimport { MenuTriggerForDirective } from \"./menu-trigger-for.directive\";\nimport { MenuComponent } from \"./menu.component\";\n\n@NgModule({\n  imports: [CommonModule, OverlayModule],\n  declarations: [MenuComponent, MenuTriggerForDirective, MenuItemDirective, MenuDividerComponent],\n  exports: [MenuComponent, MenuTriggerForDirective, MenuItemDirective, MenuDividerComponent],\n})\nexport class MenuModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuDividerComponent"
                        },
                        {
                            "name": "MenuItemDirective"
                        },
                        {
                            "name": "MenuTriggerForDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuDividerComponent"
                        },
                        {
                            "name": "MenuItemDirective"
                        },
                        {
                            "name": "MenuTriggerForDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MultiSelectModule",
            "id": "module-MultiSelectModule-3ab0cbc3d24a6356ddf96d452a22ac92316cb1fbc9aa18541c6c11221051862c16deb9262d6c5fc84a88cfda90af45a27bdebe958f817c49cfc78e469150ed41",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/multi-select/multi-select.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { NgSelectModule } from \"@ng-select/ng-select\";\n\nimport { BadgeModule } from \"../badge\";\nimport { SharedModule } from \"../shared\";\n\nimport { MultiSelectComponent } from \"./multi-select.component\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, NgSelectModule, BadgeModule, SharedModule],\n  exports: [MultiSelectComponent],\n  declarations: [MultiSelectComponent],\n})\nexport class MultiSelectModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BadgeModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-dfc66adeb2d0d660698b262773f4bb1bea3a41d8926475128e19979bbc608eb458cc34fee46b9f30462eb105326847f4ff030ee500a20fb615c93f52d6fde478",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { I18nPipe } from \"./i18n.pipe\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [I18nPipe],\n  exports: [CommonModule, I18nPipe],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "I18nPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "I18nPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-d0b264c9ea8598bedb6ea797dc0baa133f266e020bd5588322dd634dceeb025f3c93bc45c94d30978b78f6e14a8a9fe86ce8f72c82b16f772c0da2224d80cb50",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { CellDirective } from \"./cell.directive\";\nimport { RowDirective } from \"./row.directive\";\nimport { TableComponent } from \"./table.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TableComponent, CellDirective, RowDirective],\n  exports: [TableComponent, CellDirective, RowDirective],\n})\nexport class TableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CellDirective"
                        },
                        {
                            "name": "RowDirective"
                        },
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CellDirective"
                        },
                        {
                            "name": "RowDirective"
                        },
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-d1a911f48fe5da8f522cf7ffbcfa1b33a8101a7495da9bd01e4b5f4bc614f0df1a1f5f2cc21b6ac516680665f4c828a1cbdedb7122ab9923ed43a75965f0094b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { PortalModule } from \"@angular/cdk/portal\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { TabHeaderComponent } from \"./shared/tab-header.component\";\nimport { TabListContainerDirective } from \"./shared/tab-list-container.directive\";\nimport { TabListItemDirective } from \"./shared/tab-list-item.directive\";\nimport { TabBodyComponent } from \"./tab-group/tab-body.component\";\nimport { TabGroupComponent } from \"./tab-group/tab-group.component\";\nimport { TabLabelDirective } from \"./tab-group/tab-label.directive\";\nimport { TabComponent } from \"./tab-group/tab.component\";\nimport { TabLinkComponent } from \"./tab-nav-bar/tab-link.component\";\nimport { TabNavBarComponent } from \"./tab-nav-bar/tab-nav-bar.component\";\n\n@NgModule({\n  imports: [CommonModule, RouterModule, PortalModule],\n  exports: [\n    TabGroupComponent,\n    TabComponent,\n    TabLabelDirective,\n    TabNavBarComponent,\n    TabLinkComponent,\n  ],\n  declarations: [\n    TabGroupComponent,\n    TabComponent,\n    TabLabelDirective,\n    TabListContainerDirective,\n    TabListItemDirective,\n    TabHeaderComponent,\n    TabNavBarComponent,\n    TabLinkComponent,\n    TabBodyComponent,\n  ],\n})\nexport class TabsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabBodyComponent"
                        },
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabGroupComponent"
                        },
                        {
                            "name": "TabHeaderComponent"
                        },
                        {
                            "name": "TabLabelDirective"
                        },
                        {
                            "name": "TabLinkComponent"
                        },
                        {
                            "name": "TabListContainerDirective"
                        },
                        {
                            "name": "TabListItemDirective"
                        },
                        {
                            "name": "TabNavBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabGroupComponent"
                        },
                        {
                            "name": "TabLabelDirective"
                        },
                        {
                            "name": "TabLinkComponent"
                        },
                        {
                            "name": "TabNavBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToggleGroupModule",
            "id": "module-ToggleGroupModule-a1206130cfb909db5033bca6f3c46d08e86778935bfa7c22f76560be78b925bea77c65e348a6457d9d3f957baf9e8848d0aec5eb09899971425df9d1b66ab91b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/toggle-group/toggle-group.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { BadgeModule } from \"../badge\";\n\nimport { ToggleGroupComponent } from \"./toggle-group.component\";\nimport { ToggleComponent } from \"./toggle.component\";\n\n@NgModule({\n  imports: [CommonModule, BadgeModule],\n  exports: [ToggleGroupComponent, ToggleComponent],\n  declarations: [ToggleGroupComponent, ToggleComponent],\n})\nexport class ToggleGroupModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToggleComponent"
                        },
                        {
                            "name": "ToggleGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BadgeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToggleComponent"
                        },
                        {
                            "name": "ToggleGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  onItemsConfirmed: action(\"onItemsConfirmed\"),\n}"
            },
            {
                "name": "AllStylesTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <button bitButton [disabled]=\"disabled\" [loading]=\"loading\" [block]=\"block\" buttonType=\"primary\" class=\"tw-mr-2\">Primary</button>\n    <button bitButton [disabled]=\"disabled\" [loading]=\"loading\" [block]=\"block\" buttonType=\"secondary\" class=\"tw-mr-2\">Secondary</button>\n    <button bitButton [disabled]=\"disabled\" [loading]=\"loading\" [block]=\"block\" buttonType=\"danger\" class=\"tw-mr-2\">Danger</button>\n  `,\n})"
            },
            {
                "name": "Anchors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/link/link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AnchorTemplate.bind({})"
            },
            {
                "name": "AnchorTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/link/link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LinkDirective>",
                "defaultValue": "(args: LinkDirective) => ({\n  props: args,\n  template: `\n  <div class=\"tw-p-2\" [ngClass]=\"{ 'tw-bg-transparent': linkType != 'contrast', 'tw-bg-primary-500': linkType === 'contrast' }\">\n    <div class=\"tw-block tw-p-2\">\n      <a bitLink [linkType]=\"linkType\" href=\"#\">Anchor</a>\n    </div>\n    <div class=\"tw-block tw-p-2\">\n      <a bitLink [linkType]=\"linkType\" href=\"#\">\n        <i class=\"bwi bwi-fw bwi-plus-circle\" aria-hidden=\"true\"></i>\n        Add Icon Anchor\n      </a>\n    </div>\n    <div class=\"tw-block tw-p-2\">\n      <a bitLink [linkType]=\"linkType\" href=\"#\">\n        Chevron Icon Anchor\n        <i class=\"bwi bwi-fw bwi-sm bwi-angle-down\" aria-hidden=\"true\"></i>\n      </a>\n    </div>\n    <div class=\"tw-block tw-p-2\">\n      <a bitLink [linkType]=\"linkType\" class=\"tw-text-sm\" href=\"#\">Small Anchor</a>\n    </div>\n  </div>\n  `,\n})"
            },
            {
                "name": "Block",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BlockTemplate.bind({})"
            },
            {
                "name": "BlockTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n  template: `\n    <span class=\"tw-flex\">\n      <button bitButton [buttonType]=\"buttonType\" [block]=\"block\">[block]=\"true\" Button</button>\n      <a bitButton [buttonType]=\"buttonType\" [block]=\"block\" href=\"#\" class=\"tw-ml-2\">[block]=\"true\" Link</a>\n\n      <button bitButton [buttonType]=\"buttonType\" block class=\"tw-ml-2\">block Button</button>\n      <a bitButton [buttonType]=\"buttonType\" block href=\"#\" class=\"tw-ml-2\">block Link</a>\n    </span>\n  `,\n})"
            },
            {
                "name": "Border",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ButtonGroupTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput placeholder=\"Placeholder\" />\n      <button bitSuffix bitButton>\n        <i aria-hidden=\"true\" class=\"bwi bwi-lg bwi-eye\"></i>\n      </button>\n      <button bitSuffix bitButton>\n        <i aria-hidden=\"true\" class=\"bwi bwi-lg bwi-clone\"></i>\n      </button>\n    </bit-form-field>\n  `,\n})"
            },
            {
                "name": "ButtonInputGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonGroupTemplate.bind({})"
            },
            {
                "name": "Buttons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/link/link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonTemplate.bind({})"
            },
            {
                "name": "buttonStyles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<ButtonTypes, string[]>",
                "defaultValue": "{\n  primary: [\n    \"tw-border-primary-500\",\n    \"tw-bg-primary-500\",\n    \"!tw-text-contrast\",\n    \"hover:tw-bg-primary-700\",\n    \"hover:tw-border-primary-700\",\n    \"disabled:tw-bg-primary-500/60\",\n    \"disabled:tw-border-primary-500/60\",\n    \"disabled:!tw-text-contrast/60\",\n    \"disabled:tw-bg-clip-padding\",\n  ],\n  secondary: [\n    \"tw-bg-transparent\",\n    \"tw-border-text-muted\",\n    \"!tw-text-muted\",\n    \"hover:tw-bg-secondary-500\",\n    \"hover:tw-border-secondary-500\",\n    \"hover:!tw-text-contrast\",\n    \"disabled:tw-bg-transparent\",\n    \"disabled:tw-border-text-muted/60\",\n    \"disabled:!tw-text-muted/60\",\n  ],\n  danger: [\n    \"tw-bg-transparent\",\n    \"tw-border-danger-500\",\n    \"!tw-text-danger\",\n    \"hover:tw-bg-danger-500\",\n    \"hover:tw-border-danger-500\",\n    \"hover:!tw-text-contrast\",\n    \"disabled:tw-bg-transparent\",\n    \"disabled:tw-border-danger-500/60\",\n    \"disabled:!tw-text-danger/60\",\n  ],\n}"
            },
            {
                "name": "ButtonTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/link/link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LinkDirective>",
                "defaultValue": "(args: LinkDirective) => ({\n  props: args,\n  template: `\n  <div class=\"tw-p-2\" [ngClass]=\"{ 'tw-bg-transparent': linkType != 'contrast', 'tw-bg-primary-500': linkType === 'contrast' }\">\n    <button bitLink [linkType]=\"linkType\" class=\"tw-mb-2 tw-block\">Button</button>\n    <button bitLink [linkType]=\"linkType\" class=\"tw-mb-2 tw-block\">\n      <i class=\"bwi bwi-fw bwi-plus-circle\" aria-hidden=\"true\"></i>\n      Add Icon Button\n    </button>\n    <button bitLink [linkType]=\"linkType\" class=\"tw-mb-2 tw-block\">\n      Chevron Icon Button\n      <i class=\"bwi bwi-fw bwi-sm bwi-angle-down\" aria-hidden=\"true\"></i>\n    </button>\n    <button bitLink [linkType]=\"linkType\" class=\"tw-text-sm tw-block\">Small Button</button>\n  </div>\n  `,\n})"
            },
            {
                "name": "buttonTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IconButtonType[]",
                "defaultValue": "[\n  \"contrast\",\n  \"main\",\n  \"muted\",\n  \"primary\",\n  \"secondary\",\n  \"danger\",\n]"
            },
            {
                "name": "ClosedMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateWithButton.bind({})"
            },
            {
                "name": "Collections",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MultiSelectTemplate.bind({})"
            },
            {
                "name": "ColorByID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ColorByText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ColorPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/color-password/color-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ColorPasswordCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/color-password/color-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ContentTabGroupTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabGroupComponent>",
                "defaultValue": "(args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Main Content Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"First Tab\">First Tab Content</bit-tab>\n        <bit-tab label=\"Second Tab\">Second Tab Content</bit-tab>\n        <bit-tab>\n          <ng-template bitTabLabel>\n            <i class=\"bwi bwi-search tw-pr-1\"></i> Template Label\n          </ng-template>\n          Template Label Content\n        </bit-tab>\n        <bit-tab [disabled]=\"true\" label=\"Disabled\">\n          Disabled Content\n        </bit-tab>\n    </bit-tab-group>\n  `,\n})"
            },
            {
                "name": "ContentTabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ContentTabGroupTemplate.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context(\"./\", true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CustomIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateWithIcon.bind({})"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/banner/banner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/callout/callout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog.service.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/simple-dialog.service.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/error-summary.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/toggle-group/toggle-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultFormObj",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "fb.group({\n  name: [\"\", [Validators.required]],\n  email: [\"\", [Validators.required, Validators.email, forbiddenNameValidator(/bit/i)]],\n})"
            },
            {
                "name": "defaultI18n",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/callout/callout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<Record<CalloutTypes, string>>",
                "defaultValue": "{\n  warning: \"warning\",\n  danger: \"error\",\n}"
            },
            {
                "name": "defaultIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/banner/banner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<BannerTypes, string>",
                "defaultValue": "{\n  premium: \"bwi-star\",\n  info: \"bwi-info-circle\",\n  warning: \"bwi-exclamation-triangle\",\n  danger: \"bwi-error\",\n}"
            },
            {
                "name": "defaultIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/callout/callout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<CalloutTypes, string>",
                "defaultValue": "{\n  success: \"bwi-check\",\n  info: \"bwi-info-circle\",\n  warning: \"bwi-exclamation-triangle\",\n  danger: \"bwi-error\",\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AllStylesTemplate.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DisabledTemplate.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MultiSelectTemplate.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/link/link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DisabledTemplate.bind({})"
            },
            {
                "name": "DisabledButtonInputGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DisabledButtonInputGroupTemplate.bind({})"
            },
            {
                "name": "DisabledButtonInputGroupTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(\n  args: BitFormFieldComponent\n) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput placeholder=\"Placeholder\" disabled />\n      <button bitSuffix bitButton disabled>\n        <i aria-hidden=\"true\" class=\"bwi bwi-lg bwi-eye\"></i>\n      </button>\n      <button bitSuffix bitButton>\n        <i aria-hidden=\"true\" class=\"bwi bwi-lg bwi-clone\"></i>\n      </button>\n    </bit-form-field>\n  `,\n})"
            },
            {
                "name": "DisabledTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput placeholder=\"Placeholder\" disabled />\n    </bit-form-field>\n  `,\n})"
            },
            {
                "name": "DisabledTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/link/link.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <button bitLink disabled linkType=\"primary\" class=\"tw-mr-2\">Primary</button>\n    <button bitLink disabled linkType=\"secondary\" class=\"tw-mr-2\">Secondary</button>\n    <div class=\"tw-bg-primary-500 tw-p-2 tw-inline-block\">\n      <button bitLink disabled linkType=\"contrast\" class=\"tw-mr-2\">Contrast</button>\n    </div>\n  `,\n})"
            },
            {
                "name": "DisabledWithAttribute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DisabledWithAttributeTemplate.bind({})"
            },
            {
                "name": "DisabledWithAttributeTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ng-container *ngIf=\"disabled\">\n      <button bitButton disabled [loading]=\"loading\" [block]=\"block\" buttonType=\"primary\" class=\"tw-mr-2\">Primary</button>\n      <button bitButton disabled [loading]=\"loading\" [block]=\"block\" buttonType=\"secondary\" class=\"tw-mr-2\">Secondary</button>\n      <button bitButton disabled [loading]=\"loading\" [block]=\"block\" buttonType=\"danger\" class=\"tw-mr-2\">Danger</button>\n    </ng-container>\n    <ng-container *ngIf=\"!disabled\">\n      <button bitButton [loading]=\"loading\" [block]=\"block\" buttonType=\"primary\" class=\"tw-mr-2\">Primary</button>\n      <button bitButton [loading]=\"loading\" [block]=\"block\" buttonType=\"secondary\" class=\"tw-mr-2\">Secondary</button>\n      <button bitButton [loading]=\"loading\" [block]=\"block\" buttonType=\"danger\" class=\"tw-mr-2\">Danger</button>\n    </ng-container>\n  `,\n})"
            },
            {
                "name": "examplePassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/color-password/color-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"Wq$Jk😀7jDX#rS5Sdi!z\""
            },
            {
                "name": "fb",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/error-summary.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new UntypedFormBuilder()"
            },
            {
                "name": "fb",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new UntypedFormBuilder()"
            },
            {
                "name": "fb",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormBuilder()"
            },
            {
                "name": "formObj",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/error-summary.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "fb.group({\n  name: [\"\", [Validators.required]],\n  email: [\"\", [Validators.required, Validators.email]],\n})"
            },
            {
                "name": "formObj",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "fb.group({\n  test: [\"\"],\n  required: [\"\", [Validators.required]],\n})"
            },
            {
                "name": "formObjFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() =>\n  fb.group({\n    select: [[], [Validators.required]],\n  })"
            },
            {
                "name": "Groups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MultiSelectTemplate.bind({})"
            },
            {
                "name": "GroupTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput placeholder=\"Placeholder\" />\n      <span bitPrefix>$</span>\n      <span bitSuffix>USD</span>\n    </bit-form-field>\n  `,\n})"
            },
            {
                "name": "Hint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "HintTemplate.bind({})"
            },
            {
                "name": "HintTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: {\n    formObj: formObj,\n    ...args,\n  },\n  template: `\n    <bit-form-field [formGroup]=\"formObj\">\n      <bit-label>FormControl</bit-label>\n      <input bitInput formControlName=\"required\" placeholder=\"Placeholder\" />\n      <bit-hint>Long hint text</bit-hint>\n    </bit-form-field>\n  `,\n})"
            },
            {
                "name": "hoverStyles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<BadgeTypes, string[]>",
                "defaultValue": "{\n  primary: [\"hover:tw-bg-primary-700\"],\n  secondary: [\"hover:tw-bg-secondary-700\"],\n  success: [\"hover:tw-bg-success-700\"],\n  danger: [\"hover:tw-bg-danger-700\"],\n  warning: [\"hover:tw-bg-warning-700\"],\n  info: [\"hover:tw-bg-info-700\"],\n}"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/banner/banner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/callout/callout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "InputGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "GroupTemplate.bind({})"
            },
            {
                "name": "KeyboardNavigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "KeyboardNavTabGroupTemplate.bind({})"
            },
            {
                "name": "KeyboardNavTabGroupTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabGroupComponent>",
                "defaultValue": "(args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Keyboard Navigation Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"Form Tab\">\n          <p>\n            You can navigate through all tab labels, form inputs, and the button that is outside the tab group via\n            the keyboard.\n          </p>\n          <bit-form-field>\n            <bit-label>First Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>Second Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"No Focusable Content Tab\" [contentTabIndex]=\"0\">\n          <p>This tab has no focusable content, but the panel should still be focusable</p>\n        </bit-tab>\n    </bit-tab-group>\n    <button bitButton buttonType=\"primary\" class=\"tw-mt-5\">External Button</button>\n`,\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LightBackground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "linkStyles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/link/link.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<LinkType, string[]>",
                "defaultValue": "{\n  primary: [\n    \"!tw-text-primary-500\",\n    \"hover:!tw-text-primary-500\",\n    \"focus-visible:tw-ring-primary-700\",\n    \"disabled:!tw-text-primary-500/60\",\n  ],\n  secondary: [\n    \"!tw-text-main\",\n    \"hover:!tw-text-main\",\n    \"focus-visible:tw-ring-primary-700\",\n    \"disabled:!tw-text-muted/60\",\n  ],\n  contrast: [\n    \"!tw-text-contrast\",\n    \"hover:!tw-text-contrast\",\n    \"focus-visible:tw-ring-text-contrast\",\n    \"disabled:!tw-text-contrast/60\",\n  ],\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AllStylesTemplate.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MultiSelectTemplate.bind({})"
            },
            {
                "name": "Members",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MultiSelectTemplate.bind({})"
            },
            {
                "name": "MembersAndGroups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MultiSelectTemplate.bind({})"
            },
            {
                "name": "MultiSelectTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MultiSelectComponent>",
                "defaultValue": "(args: MultiSelectComponent) => ({\n  props: {\n    formObj: formObjFactory(),\n    submit: submit,\n    ...args,\n    onItemsConfirmed: actionsData.onItemsConfirmed,\n  },\n  template: `\n    <form [formGroup]=\"formObj\" (ngSubmit)=\"submit(formObj)\">\n      <bit-form-field>\n        <bit-label>{{ name }}</bit-label>\n        <bit-multi-select\n          class=\"tw-w-full\"\n          formControlName=\"select\"\n          [baseItems]=\"baseItems\"\n          [removeSelectedItems]=\"removeSelectedItems\"\n          [loading]=\"loading\"\n          [disabled]=\"disabled\"\n          (onItemsConfirmed)=\"onItemsConfirmed($event)\">\n        </bit-multi-select>\n        <bit-hint>{{ hint }}</bit-hint>\n      </bit-form-field>\n      <button type=\"submit\" bitButton buttonType=\"primary\">Submit</button>\n    </form>\n  `,\n})"
            },
            {
                "name": "NavigationTabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "NavTabGroupTemplate.bind({})"
            },
            {
                "name": "NavTabGroupTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabGroupComponent>",
                "defaultValue": "(args: TabGroupComponent) => ({\n  props: args,\n  template: `\n    <bit-tab-nav-bar label=\"Main\">\n      <bit-tab-link [route]=\"['active']\">Active</bit-tab-link>\n      <bit-tab-link [route]=\"['item-2']\">Item 2</bit-tab-link>\n      <bit-tab-link [route]=\"['item-3']\">Item 3</bit-tab-link>\n      <bit-tab-link [route]=\"['disable']\" [disabled]=\"true\">Disabled</bit-tab-link>\n    </bit-tab-nav-bar>\n    <div class=\"tw-bg-transparent tw-text-semibold tw-text-center tw-text-main tw-py-10\">\n      <router-outlet></router-outlet>\n    </div>\n  `,\n})"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/error.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/hint.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/input/input.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/multi-select/multi-select.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/toggle-group/toggle-group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/toggle-group/toggle.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/directives/dialog-title-container.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tab-group/tab-group.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Used to generate unique ID's for each tab component",
                "description": "<p>Used to generate unique ID&#39;s for each tab component</p>\n"
            },
            {
                "name": "ObservableTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/in-forms.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PromiseExampleComponent>",
                "defaultValue": "(args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-observable-example></app-observable-example>`,\n})"
            },
            {
                "name": "ObservableTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/standalone.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ObservableExampleComponent>",
                "defaultValue": "(\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-observable-example></app-observable-example>`,\n})"
            },
            {
                "name": "OpenMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrefixClasses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/prefix.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  \"tw-block\",\n  \"tw-px-3\",\n  \"tw-py-1.5\",\n  \"tw-bg-background-alt\",\n  \"tw-border\",\n  \"tw-border-solid\",\n  \"tw-border-secondary-500\",\n  \"tw-text-muted\",\n  \"tw-rounded-none\",\n  \"disabled:!tw-text-muted\",\n  \"disabled:tw-border-secondary-500\",\n]"
            },
            {
                "name": "Premium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/banner/banner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PreserveContentTabGroupTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabGroupComponent>",
                "defaultValue": "(args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Preserve Content Tabs\" [preserveContent]=\"true\" class=\"tw-text-main\">\n        <bit-tab label=\"Text Tab\">\n          <p>\n            Play the video in the other tab and switch back to hear the video is still playing.\n          </p>\n        </bit-tab>\n        <bit-tab label=\"Video Tab\">\n          <iframe\n              width=\"560\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/H0-yWbe5XG4\"\n             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n             allowfullscreen></iframe>\n        </bit-tab>\n    </bit-tab-group>\n  `,\n})"
            },
            {
                "name": "PreserveContentTabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PreserveContentTabGroupTemplate.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PromiseTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/in-forms.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PromiseExampleComponent>",
                "defaultValue": "(args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n})"
            },
            {
                "name": "PromiseTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/standalone.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PromiseExampleComponent>",
                "defaultValue": "(args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n})"
            },
            {
                "name": "RejectedPromise",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/standalone.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "RejectedPromiseTemplate.bind({})"
            },
            {
                "name": "RejectedPromiseTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/standalone.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ObservableExampleComponent>",
                "defaultValue": "(\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-rejected-promise-example></app-rejected-promise-example>`,\n})"
            },
            {
                "name": "RemoveSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MultiSelectTemplate.bind({})"
            },
            {
                "name": "ReportExposedPasswords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.setup.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Required",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "RequiredTemplate.bind({})"
            },
            {
                "name": "RequiredTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: {\n    formObj: formObj,\n    ...args,\n  },\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput required placeholder=\"Placeholder\" />\n    </bit-form-field>\n\n    <bit-form-field [formGroup]=\"formObj\">\n      <bit-label>FormControl</bit-label>\n      <input bitInput formControlName=\"required\" placeholder=\"Placeholder\" />\n    </bit-form-field>\n  `,\n})"
            },
            {
                "name": "ScrollingContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateScrolling.bind({})"
            },
            {
                "name": "ScrollingContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateScroll.bind({})"
            },
            {
                "name": "Search",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon/icons/search.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "svgIcon`\n<svg width=\"120\" height=\"120\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g opacity=\".49\">\n    <path class=\"tw-fill-secondary-300\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M40.36 73.256a30.004 30.004 0 0 0 10.346 1.826c16.282 0 29.482-12.912 29.482-28.84 0-.384-.008-.766-.023-1.145h28.726v39.57H40.36v-11.41Z\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M21.546 46.241c0 15.929 13.2 28.841 29.482 28.841S80.51 62.17 80.51 46.241c0-15.928-13.2-28.841-29.482-28.841S21.546 30.313 21.546 46.241Z\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n    <path class=\"tw-fill-secondary-500\" d=\"M35.36 70.595a1.2 1.2 0 0 0-2.4 0h2.4Zm77.475-30.356a2.343 2.343 0 0 1 2.365 2.33h2.4c0-2.593-2.107-4.73-4.765-4.73v2.4Zm2.365 2.33v46.047h2.4V42.57h-2.4Zm0 46.047c0 1.293-1.058 2.33-2.365 2.33v2.4c2.59 0 4.765-2.069 4.765-4.73h-2.4Zm-2.365 2.33h-75.11v2.4h75.11v-2.4Zm-75.11 0a2.343 2.343 0 0 1-2.365-2.33h-2.4c0 2.594 2.107 4.73 4.766 4.73v-2.4Zm-2.365-2.33v-18.02h-2.4v18.02h2.4Zm44.508-48.377h32.967v-2.4H79.868v2.4Z\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M79.907 45.287h29.114v39.57H40.487V73.051\" stroke-width=\"2\" stroke-linejoin=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M57.356 102.56h35.849\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M68.954 92.147v10.413m11.599-10.413v10.413\" stroke-width=\"4\" stroke-linejoin=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"m27.44 64.945-4.51 4.51L5.72 86.663a3 3 0 0 0 0 4.243l1.238 1.238a3 3 0 0 0 4.243 0L28.41 74.936l4.51-4.51\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M101.293 53.154H85.178m16.115 6.043H90.214m-5.036 0h-7.553m23.668 6.043h-7.05m-5.54 0h-15.61m28.2 6.042H85.178m-5.538 0h-8.562m30.215 6.043H78.632m-5.539 0H60m-5.54 0h-8.057\" stroke-width=\"2\" stroke-linecap=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M29.164 33.01h41.529a2.4 2.4 0 0 1 2.4 2.4v6.28a2.4 2.4 0 0 1-2.4 2.4h-41.53a2.4 2.4 0 0 1-2.4-2.4v-6.28a2.4 2.4 0 0 1 2.4-2.4Z\" stroke-width=\"4\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M22.735 54.16h34.361a2.4 2.4 0 0 1 2.4 2.4v6.28a2.4 2.4 0 0 1-2.4 2.4H28.778m50.358-11.08h-6.161a2.4 2.4 0 0 0-2.4 2.4v6.414a2.266 2.266 0 0 0 2.266 2.265\" stroke-width=\"4\" stroke-linecap=\"round\" />\n  </g>\n</svg>\n`"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SelectTemplate.bind({})"
            },
            {
                "name": "SelectTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <select bitInput>\n        <option>Select</option>\n        <option>Other</option>\n      </select>\n    </bit-form-field>\n  `,\n})"
            },
            {
                "name": "SizeClasses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<SizeTypes, string[]>",
                "defaultValue": "{\n  large: [\"tw-h-16\", \"tw-w-16\"],\n  default: [\"tw-h-12\", \"tw-w-12\"],\n  small: [\"tw-h-7\", \"tw-w-7\"],\n}"
            },
            {
                "name": "sizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon-button/icon-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<IconButtonSize, string[]>",
                "defaultValue": "{\n  default: [\"tw-px-2.5\", \"tw-py-1.5\"],\n  small: [\"tw-leading-none\", \"tw-text-base\", \"tw-p-1\"],\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Standalone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "StandaloneTemplate.bind({})"
            },
            {
                "name": "StandaloneTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MultiSelectComponent>",
                "defaultValue": "(args: MultiSelectComponent) => ({\n  props: {\n    ...args,\n    onItemsConfirmed: actionsData.onItemsConfirmed,\n  },\n  template: `\n    <bit-multi-select\n      class=\"tw-w-full\"\n      [baseItems]=\"baseItems\"\n      [removeSelectedItems]=\"removeSelectedItems\"\n      [loading]=\"loading\"\n      [disabled]=\"disabled\"\n      (onItemsConfirmed)=\"onItemsConfirmed($event)\">\n    </bit-multi-select>\n  `,\n})"
            },
            {
                "name": "styles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<BadgeTypes, string[]>",
                "defaultValue": "{\n  primary: [\"tw-bg-primary-500\"],\n  secondary: [\"tw-bg-text-muted\"],\n  success: [\"tw-bg-success-500\"],\n  danger: [\"tw-bg-danger-500\"],\n  warning: [\"tw-bg-warning-500\"],\n  info: [\"tw-bg-info-500\"],\n}"
            },
            {
                "name": "styles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon-button/icon-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<IconButtonType, string[]>",
                "defaultValue": "{\n  contrast: [\n    \"tw-bg-transparent\",\n    \"!tw-text-contrast\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-text-contrast\",\n    \"focus-visible:before:tw-ring-text-contrast\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  main: [\n    \"tw-bg-transparent\",\n    \"!tw-text-main\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-text-main\",\n    \"focus-visible:before:tw-ring-text-main\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  muted: [\n    \"tw-bg-transparent\",\n    \"!tw-text-muted\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-primary-700\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  primary: [\n    \"tw-bg-primary-500\",\n    \"!tw-text-contrast\",\n    \"tw-border-primary-500\",\n    \"hover:tw-bg-primary-700\",\n    \"hover:tw-border-primary-700\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-primary-500\",\n    \"disabled:hover:tw-bg-primary-500\",\n  ],\n  secondary: [\n    \"tw-bg-transparent\",\n    \"!tw-text-muted\",\n    \"tw-border-text-muted\",\n    \"hover:!tw-text-contrast\",\n    \"hover:tw-bg-text-muted\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-text-muted\",\n    \"disabled:hover:tw-bg-transparent\",\n    \"disabled:hover:!tw-text-muted\",\n    \"disabled:hover:tw-border-text-muted\",\n  ],\n  danger: [\n    \"tw-bg-transparent\",\n    \"!tw-text-danger\",\n    \"tw-border-danger-500\",\n    \"hover:!tw-text-contrast\",\n    \"hover:tw-bg-danger-500\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-danger-500\",\n    \"disabled:hover:tw-bg-transparent\",\n    \"disabled:hover:!tw-text-danger\",\n    \"disabled:hover:tw-border-danger-500\",\n  ],\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/callout/callout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TabContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTabbed.bind({})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/in-forms.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n  <form [formGroup]=\"formObj\" [bitSubmit]=\"submit\">\n    <bit-form-field>\n      <bit-label>Name</bit-label>\n      <input bitInput formControlName=\"name\" />\n    </bit-form-field>\n\n    <bit-form-field>\n      <bit-label>Email</bit-label>\n      <input bitInput formControlName=\"email\" />\n    </bit-form-field>\n\n    <button class=\"tw-mr-2\" type=\"submit\" buttonType=\"primary\" bitButton bitFormButton>Submit</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitButton bitFormButton>Cancel</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"danger\" bitButton bitFormButton [bitAction]=\"delete\">Delete</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitIconButton=\"bwi-star\" bitFormButton [bitAction]=\"delete\">Delete</button>\n  </form>`"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/standalone.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n  <button bitButton buttonType=\"primary\" [bitAction]=\"action\" class=\"tw-mr-2\">\n    Perform action\n  </button>\n  <button bitIconButton=\"bwi-trash\" buttonType=\"danger\" [bitAction]=\"action\"></button>`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AvatarComponent>",
                "defaultValue": "(args: AvatarComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/banner/banner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BannerComponent>",
                "defaultValue": "(args: BannerComponent) => ({\n  props: args,\n  template: `\n    <bit-banner [bannerType]=\"bannerType\" (onClose)=\"onClose($event)\">\n        Content Really Long Text Lorem Ipsum Ipsum Ipsum\n        <button>Button</button>\n    </bit-banner>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BadgeDirective>",
                "defaultValue": "(args: BadgeDirective) => ({\n  props: args,\n  template: `\n    <span class=\"tw-text-main\">Span </span><span bitBadge [badgeType]=\"badgeType\">Badge</span>\n    <br><br>\n    <span class=\"tw-text-main\">Link </span><a href=\"#\" bitBadge [badgeType]=\"badgeType\">Badge</a>\n    <br><br>\n    <span class=\"tw-text-main\">Button </span><button bitBadge [badgeType]=\"badgeType\">Badge</button>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n  template: `\n    <button bitButton [disabled]=\"disabled\" [loading]=\"loading\" [buttonType]=\"buttonType\" [block]=\"block\">Button</button>\n    <a bitButton [disabled]=\"disabled\" [loading]=\"loading\" [buttonType]=\"buttonType\" [block]=\"block\" href=\"#\" class=\"tw-ml-2\">Link</a>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/callout/callout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CalloutComponent>",
                "defaultValue": "(args: CalloutComponent) => ({\n  props: args,\n  template: `\n    <bit-callout [type]=\"type\" [title]=\"title\">Content</bit-callout>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/color-password/color-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ColorPasswordComponent>",
                "defaultValue": "(args: ColorPasswordComponent) => ({\n  props: args,\n  template: `\n  <bit-color-password class=\"tw-text-base\" [password]=\"password\" [showCount]=\"showCount\"></bit-color-password>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog.service.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoryDialogComponent>",
                "defaultValue": "(args: StoryDialogComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/simple-dialog.service.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoryDialogComponent>",
                "defaultValue": "(args: StoryDialogComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/error-summary.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: {\n    formObj: formObj,\n    submit: submit,\n    ...args,\n  },\n  template: `\n    <form [formGroup]=\"formObj\" (ngSubmit)=\"submit()\">\n      <bit-form-field>\n        <bit-label>Name</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n\n      <bit-form-field>\n        <bit-label>Email</bit-label>\n        <input bitInput formControlName=\"email\" />\n      </bit-form-field>\n\n      <button type=\"submit\" bitButton buttonType=\"primary\">Submit</button>\n      <bit-error-summary [formGroup]=\"formObj\"></bit-error-summary>\n    </form>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: {\n    formObj: defaultFormObj,\n    submit: submit,\n    ...args,\n  },\n  template: `\n    <form [formGroup]=\"formObj\" (ngSubmit)=\"submit()\">\n      <bit-form-field>\n        <bit-label>Name</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n\n      <bit-form-field>\n        <bit-label>Email</bit-label>\n        <input bitInput formControlName=\"email\" />\n      </bit-form-field>\n\n      <button type=\"submit\" bitButton buttonType=\"primary\">Submit</button>\n    </form>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitIconComponent>",
                "defaultValue": "(args: BitIconComponent) => ({\n  props: args,\n  template: `\n  <div class=\"tw-bg-primary-500 tw-p-5\">\n    <bit-icon [icon]=\"icon\" class=\"tw-text-primary-300\"></bit-icon>\n  </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitIconButtonComponent>",
                "defaultValue": "(args: BitIconButtonComponent) => ({\n  props: { ...args, buttonTypes },\n  template: `\n  <table class=\"tw-border-spacing-2 tw-text-center tw-text-main\">\n    <thead>\n      <tr>\n        <td></td>\n        <td *ngFor=\"let buttonType of buttonTypes\" class=\"tw-capitalize tw-font-bold tw-p-4\"\n          [class.tw-text-contrast]=\"buttonType === 'contrast'\"\n          [class.tw-bg-primary-500]=\"buttonType === 'contrast'\">{{buttonType}}</td>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr>\n        <td class=\"tw-font-bold tw-p-4 tw-text-left\">Default</td>\n          <td *ngFor=\"let buttonType of buttonTypes\" class=\"tw-p-2\" [class.tw-bg-primary-500]=\"buttonType === 'contrast'\">\n            <button\n              [bitIconButton]=\"bitIconButton\"\n              [buttonType]=\"buttonType\"\n              [size]=\"size\"\n              title=\"Example icon button\"\n              aria-label=\"Example icon button\"></button>\n          </td>\n      </tr>\n\n      <tr>\n        <td class=\"tw-font-bold tw-p-4 tw-text-left\">Disabled</td>\n          <td *ngFor=\"let buttonType of buttonTypes\" class=\"tw-p-2\" [class.tw-bg-primary-500]=\"buttonType === 'contrast'\">\n            <button\n              [bitIconButton]=\"bitIconButton\"\n              [buttonType]=\"buttonType\"\n              [size]=\"size\"\n              disabled\n              title=\"Example icon button\"\n              aria-label=\"Example icon button\"></button>\n          </td>\n      </tr>\n\n      <tr>\n        <td class=\"tw-font-bold tw-p-4 tw-text-left\">Loading</td>\n          <td *ngFor=\"let buttonType of buttonTypes\" class=\"tw-p-2\" [class.tw-bg-primary-500]=\"buttonType === 'contrast'\">\n            <button\n              [bitIconButton]=\"bitIconButton\"\n              [buttonType]=\"buttonType\"\n              [size]=\"size\"\n              loading=\"true\"\n              title=\"Example icon button\"\n              aria-label=\"Example icon button\"></button>\n          </td>\n      </tr>\n    </tbody>\n  </table>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MenuTriggerForDirective>",
                "defaultValue": "(args: MenuTriggerForDirective) => ({\n  props: args,\n  template: `\n    <bit-menu #myMenu=\"menuComponent\">\n      <a href=\"#\" bitMenuItem>Anchor link</a>\n      <a href=\"#\" bitMenuItem>Another link</a>\n      <button type=\"button\" bitMenuItem>Button</button>\n      <bit-menu-divider></bit-menu-divider>\n      <button type=\"button\" bitMenuItem>Button after divider</button>\n    </bit-menu>\n\n    <div class=\"tw-h-40\">\n      <div class=\"cdk-overlay-pane bit-menu-panel\">\n        <ng-container *ngTemplateOutlet=\"myMenu.templateRef\"></ng-container>\n      </div>\n    </div>\n    `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>Header 1</th>\n          <th bitCell>Header 2</th>\n          <th bitCell>Header 3</th>\n        </tr>\n      </ng-container>\n      <ng-container body>\n        <tr bitRow [alignContent]=\"alignRowContent\">\n          <td bitCell>Cell 1</td>\n          <td bitCell>Cell 2 <br> Multiline Cell</td>\n          <td bitCell>Cell 3</td>\n        </tr>\n        <tr bitRow [alignContent]=\"alignRowContent\">\n          <td bitCell>Cell 4</td>\n          <td bitCell>Cell 5</td>\n          <td bitCell>Cell 6</td>\n        </tr>\n        <tr bitRow [alignContent]=\"alignRowContent\">\n          <td bitCell>Cell 7 <br> Multiline Cell</td>\n          <td bitCell>Cell 8</td>\n          <td bitCell>Cell 9</td>\n        </tr>\n      </ng-container>\n    </bit-table>\n\n    `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/toggle-group/toggle-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ToggleGroupComponent>",
                "defaultValue": "(args: ToggleGroupComponent) => ({\n  props: args,\n  template: `\n    <bit-toggle-group [(selected)]=\"selected\" aria-label=\"People list filter\">\n      <bit-toggle value=\"all\">\n        All <span bitBadge badgeType=\"info\">3</span>\n      </bit-toggle>\n\n      <bit-toggle value=\"invited\">\n        Invited\n      </bit-toggle>\n\n      <bit-toggle value=\"accepted\">\n        Accepted <span bitBadge badgeType=\"info\">2</span>\n      </bit-toggle>\n\n      <bit-toggle value=\"deactivated\">\n        Deactivated\n      </bit-toggle>\n    </bit-toggle-group>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DialogComponent>",
                "defaultValue": "(args: DialogComponent) => ({\n  props: args,\n  template: `\n  <bit-dialog [dialogSize]=\"dialogSize\" [disablePadding]=\"disablePadding\">\n    <span bitDialogTitle>{{title}}</span>\n    <span bitDialogContent>Dialog body text goes here.</span>\n    <div bitDialogFooter class=\"tw-flex tw-items-center tw-flex-row tw-gap-2\">\n      <button bitButton buttonType=\"primary\">Save</button>\n      <button bitButton buttonType=\"secondary\">Cancel</button>\n      <button\n        class=\"tw-ml-auto\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        size=\"default\"\n        title=\"Delete\"\n        aria-label=\"Delete\"></button>\n    </div>\n  </bit-dialog>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SimpleDialogComponent>",
                "defaultValue": "(args: SimpleDialogComponent) => ({\n  props: args,\n  template: `\n  <bit-simple-dialog>\n      <span bitDialogTitle>Alert Dialog</span>\n      <span bitDialogContent>Message Content</span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\">Yes</button>\n        <button bitButton buttonType=\"secondary\">No</button>\n      </div>\n  </bit-simple-dialog>\n  `,\n})"
            },
            {
                "name": "TemplateScroll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SimpleDialogComponent>",
                "defaultValue": "(args: SimpleDialogComponent) => ({\n  props: args,\n  template: `\n  <bit-simple-dialog>\n      <span bitDialogTitle>Alert Dialog</span>\n      <span bitDialogContent>\n        Message Content\n        Message text goes here.<br>\n        <ng-container *ngFor=\"let _ of [].constructor(100)\">\n          repeating lines of characters <br>\n        </ng-container>\n        end of sequence!\n      </span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\">Yes</button>\n        <button bitButton buttonType=\"secondary\">No</button>\n      </div>\n  </bit-simple-dialog>\n  `,\n})"
            },
            {
                "name": "TemplateScrolling",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DialogComponent>",
                "defaultValue": "(args: DialogComponent) => ({\n  props: args,\n  template: `\n  <bit-dialog [dialogSize]=\"dialogSize\" [disablePadding]=\"disablePadding\">\n  <span bitDialogTitle>Scrolling Example</span>\n  <span bitDialogContent>\n    Dialog body text goes here.<br>\n    <ng-container *ngFor=\"let _ of [].constructor(100)\">\n      repeating lines of characters <br>\n    </ng-container>\n    end of sequence!\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n    <button bitButton buttonType=\"primary\">Save</button>\n    <button bitButton buttonType=\"secondary\">Cancel</button>\n  </div>\n  </bit-dialog>\n  `,\n})"
            },
            {
                "name": "TemplateTabbed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DialogComponent>",
                "defaultValue": "(args: DialogComponent) => ({\n  props: args,\n  template: `\n  <bit-dialog [dialogSize]=\"dialogSize\" [disablePadding]=\"disablePadding\">\n  <span bitDialogTitle>Tab Content Example</span>\n  <span bitDialogContent>\n    <bit-tab-group>\n        <bit-tab label=\"First Tab\">First Tab Content</bit-tab>\n        <bit-tab label=\"Second Tab\">Second Tab Content</bit-tab>\n        <bit-tab label=\"Third Tab\">Third Tab Content</bit-tab>\n    </bit-tab-group>\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n    <button bitButton buttonType=\"primary\">Save</button>\n    <button bitButton buttonType=\"secondary\">Cancel</button>\n  </div>\n  </bit-dialog>\n  `,\n})"
            },
            {
                "name": "TemplateWithButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/menu/menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MenuTriggerForDirective>",
                "defaultValue": "(args: MenuTriggerForDirective) => ({\n  props: args,\n  template: `\n    <div class=\"tw-h-40\">\n      <button bitButton buttonType=\"secondary\" [bitMenuTriggerFor]=\"myMenu\">Open menu</button>\n    </div>\n\n    <bit-menu #myMenu>\n      <a href=\"#\" bitMenuItem>Anchor link</a>\n      <a href=\"#\" bitMenuItem>Another link</a>\n      <button type=\"button\" bitMenuItem>Button</button>\n      <bit-menu-divider></bit-menu-divider>\n      <button type=\"button\" bitMenuItem>Button after divider</button>\n    </bit-menu>`,\n})"
            },
            {
                "name": "TemplateWithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SimpleDialogComponent>",
                "defaultValue": "(args: SimpleDialogComponent) => ({\n  props: args,\n  template: `\n  <bit-simple-dialog>\n      <i bit-dialog-icon class=\"bwi bwi-star tw-text-3xl tw-text-success\" aria-hidden=\"true\"></i>\n      <span bitDialogTitle>Premium Subscription Available</span>\n      <span bitDialogContent> Message Content</span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\">Yes</button>\n        <button bitButton buttonType=\"secondary\">No</button>\n      </div>\n  </bit-simple-dialog>\n  `,\n})"
            },
            {
                "name": "Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TextareaTemplate.bind({})"
            },
            {
                "name": "TextareaTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/form-field/form-field.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BitFormFieldComponent>",
                "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Textarea</bit-label>\n      <textarea bitInput rows=\"4\"></textarea>\n    </bit-form-field>\n  `,\n})"
            },
            {
                "name": "UnknownIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "UsingObservable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/in-forms.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ObservableTemplate.bind({})"
            },
            {
                "name": "UsingObservable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/standalone.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ObservableTemplate.bind({})"
            },
            {
                "name": "UsingPromise",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/in-forms.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PromiseTemplate.bind({})"
            },
            {
                "name": "UsingPromise",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/async-actions/standalone.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PromiseTemplate.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/banner/banner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/callout/callout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WrappedColorPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/color-password/color-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "WrappedTemplate.bind({})"
            },
            {
                "name": "WrappedColorPasswordCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/color-password/color-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "WrappedTemplate.bind({})"
            },
            {
                "name": "WrappedTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/color-password/color-password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ColorPasswordComponent>",
                "defaultValue": "(args: ColorPasswordComponent) => ({\n  props: args,\n  template: `\n  <div class=\"tw-max-w-32\">\n    <bit-color-password class=\"tw-text-base\" [password]=\"password\" [showCount]=\"showCount\"></bit-color-password>\n  </div>\n  `,\n})"
            }
        ],
        "functions": [
            {
                "name": "forbiddenNameValidator",
                "file": "src/form-field/form-field.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nameRe",
                        "type": "RegExp",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "nameRe",
                        "type": "RegExp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "functionToObservable",
                "file": "src/utils/function-to-observable.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "func",
                        "type": "FunctionReturningAwaitable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<>",
                "jsdoctags": [
                    {
                        "name": "func",
                        "type": "FunctionReturningAwaitable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isIcon",
                "file": "src/icon/icon.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "icon",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Icon",
                "jsdoctags": [
                    {
                        "name": "icon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "submit",
                "file": "src/form-field/error-summary.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "submit",
                "file": "src/form-field/form-field.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "submit",
                "file": "src/form-field/multi-select.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "formObj",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "formObj",
                        "type": "FormGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "svgIcon",
                "file": "src/icon/icon.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "strings",
                        "type": "TemplateStringsArray",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "values",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "Icon",
                "jsdoctags": [
                    {
                        "name": "strings",
                        "type": "TemplateStringsArray",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "values",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BadgeTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\"",
                "file": "src/badge/badge.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "BannerTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"premium\" | \"info\" | \"warning\" | \"danger\"",
                "file": "src/banner/banner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ButtonTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"danger\"",
                "file": "src/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "CalloutTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"info\" | \"warning\" | \"danger\"",
                "file": "src/callout/callout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "FunctionReturningAwaitable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " |  | ",
                "file": "src/utils/function-to-observable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"small\"",
                "file": "src/icon-button/icon-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"contrast\" | \"main\" | \"muted\" | \"primary\" | \"secondary\" | \"danger\"",
                "file": "src/icon-button/icon-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "LinkType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"contrast\"",
                "file": "src/link/link.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SelectItemView",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/multi-select/models/select-item-view.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "SizeTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"large\" | \"default\" | \"small\"",
                "file": "src/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "CharacterType",
                "childs": [
                    {
                        "name": "Letter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Emoji",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Special",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/color-password/color-password.component.ts"
            }
        ],
        "groupedVariables": {
            "src/form-field/multi-select.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  onItemsConfirmed: action(\"onItemsConfirmed\"),\n}"
                },
                {
                    "name": "Collections",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MultiSelectTemplate.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MultiSelectTemplate.bind({})"
                },
                {
                    "name": "fb",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormBuilder()"
                },
                {
                    "name": "formObjFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() =>\n  fb.group({\n    select: [[], [Validators.required]],\n  })"
                },
                {
                    "name": "Groups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MultiSelectTemplate.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MultiSelectTemplate.bind({})"
                },
                {
                    "name": "Members",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MultiSelectTemplate.bind({})"
                },
                {
                    "name": "MembersAndGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MultiSelectTemplate.bind({})"
                },
                {
                    "name": "MultiSelectTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MultiSelectComponent>",
                    "defaultValue": "(args: MultiSelectComponent) => ({\n  props: {\n    formObj: formObjFactory(),\n    submit: submit,\n    ...args,\n    onItemsConfirmed: actionsData.onItemsConfirmed,\n  },\n  template: `\n    <form [formGroup]=\"formObj\" (ngSubmit)=\"submit(formObj)\">\n      <bit-form-field>\n        <bit-label>{{ name }}</bit-label>\n        <bit-multi-select\n          class=\"tw-w-full\"\n          formControlName=\"select\"\n          [baseItems]=\"baseItems\"\n          [removeSelectedItems]=\"removeSelectedItems\"\n          [loading]=\"loading\"\n          [disabled]=\"disabled\"\n          (onItemsConfirmed)=\"onItemsConfirmed($event)\">\n        </bit-multi-select>\n        <bit-hint>{{ hint }}</bit-hint>\n      </bit-form-field>\n      <button type=\"submit\" bitButton buttonType=\"primary\">Submit</button>\n    </form>\n  `,\n})"
                },
                {
                    "name": "RemoveSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MultiSelectTemplate.bind({})"
                },
                {
                    "name": "Standalone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "StandaloneTemplate.bind({})"
                },
                {
                    "name": "StandaloneTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MultiSelectComponent>",
                    "defaultValue": "(args: MultiSelectComponent) => ({\n  props: {\n    ...args,\n    onItemsConfirmed: actionsData.onItemsConfirmed,\n  },\n  template: `\n    <bit-multi-select\n      class=\"tw-w-full\"\n      [baseItems]=\"baseItems\"\n      [removeSelectedItems]=\"removeSelectedItems\"\n      [loading]=\"loading\"\n      [disabled]=\"disabled\"\n      (onItemsConfirmed)=\"onItemsConfirmed($event)\">\n    </bit-multi-select>\n  `,\n})"
                }
            ],
            "src/button/button.stories.ts": [
                {
                    "name": "AllStylesTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <button bitButton [disabled]=\"disabled\" [loading]=\"loading\" [block]=\"block\" buttonType=\"primary\" class=\"tw-mr-2\">Primary</button>\n    <button bitButton [disabled]=\"disabled\" [loading]=\"loading\" [block]=\"block\" buttonType=\"secondary\" class=\"tw-mr-2\">Secondary</button>\n    <button bitButton [disabled]=\"disabled\" [loading]=\"loading\" [block]=\"block\" buttonType=\"danger\" class=\"tw-mr-2\">Danger</button>\n  `,\n})"
                },
                {
                    "name": "Block",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BlockTemplate.bind({})"
                },
                {
                    "name": "BlockTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n  template: `\n    <span class=\"tw-flex\">\n      <button bitButton [buttonType]=\"buttonType\" [block]=\"block\">[block]=\"true\" Button</button>\n      <a bitButton [buttonType]=\"buttonType\" [block]=\"block\" href=\"#\" class=\"tw-ml-2\">[block]=\"true\" Link</a>\n\n      <button bitButton [buttonType]=\"buttonType\" block class=\"tw-ml-2\">block Button</button>\n      <a bitButton [buttonType]=\"buttonType\" block href=\"#\" class=\"tw-ml-2\">block Link</a>\n    </span>\n  `,\n})"
                },
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AllStylesTemplate.bind({})"
                },
                {
                    "name": "DisabledWithAttribute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DisabledWithAttributeTemplate.bind({})"
                },
                {
                    "name": "DisabledWithAttributeTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ng-container *ngIf=\"disabled\">\n      <button bitButton disabled [loading]=\"loading\" [block]=\"block\" buttonType=\"primary\" class=\"tw-mr-2\">Primary</button>\n      <button bitButton disabled [loading]=\"loading\" [block]=\"block\" buttonType=\"secondary\" class=\"tw-mr-2\">Secondary</button>\n      <button bitButton disabled [loading]=\"loading\" [block]=\"block\" buttonType=\"danger\" class=\"tw-mr-2\">Danger</button>\n    </ng-container>\n    <ng-container *ngIf=\"!disabled\">\n      <button bitButton [loading]=\"loading\" [block]=\"block\" buttonType=\"primary\" class=\"tw-mr-2\">Primary</button>\n      <button bitButton [loading]=\"loading\" [block]=\"block\" buttonType=\"secondary\" class=\"tw-mr-2\">Secondary</button>\n      <button bitButton [loading]=\"loading\" [block]=\"block\" buttonType=\"danger\" class=\"tw-mr-2\">Danger</button>\n    </ng-container>\n  `,\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AllStylesTemplate.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n  template: `\n    <button bitButton [disabled]=\"disabled\" [loading]=\"loading\" [buttonType]=\"buttonType\" [block]=\"block\">Button</button>\n    <a bitButton [disabled]=\"disabled\" [loading]=\"loading\" [buttonType]=\"buttonType\" [block]=\"block\" href=\"#\" class=\"tw-ml-2\">Link</a>\n  `,\n})"
                }
            ],
            "src/link/link.stories.ts": [
                {
                    "name": "Anchors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/link/link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AnchorTemplate.bind({})"
                },
                {
                    "name": "AnchorTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/link/link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LinkDirective>",
                    "defaultValue": "(args: LinkDirective) => ({\n  props: args,\n  template: `\n  <div class=\"tw-p-2\" [ngClass]=\"{ 'tw-bg-transparent': linkType != 'contrast', 'tw-bg-primary-500': linkType === 'contrast' }\">\n    <div class=\"tw-block tw-p-2\">\n      <a bitLink [linkType]=\"linkType\" href=\"#\">Anchor</a>\n    </div>\n    <div class=\"tw-block tw-p-2\">\n      <a bitLink [linkType]=\"linkType\" href=\"#\">\n        <i class=\"bwi bwi-fw bwi-plus-circle\" aria-hidden=\"true\"></i>\n        Add Icon Anchor\n      </a>\n    </div>\n    <div class=\"tw-block tw-p-2\">\n      <a bitLink [linkType]=\"linkType\" href=\"#\">\n        Chevron Icon Anchor\n        <i class=\"bwi bwi-fw bwi-sm bwi-angle-down\" aria-hidden=\"true\"></i>\n      </a>\n    </div>\n    <div class=\"tw-block tw-p-2\">\n      <a bitLink [linkType]=\"linkType\" class=\"tw-text-sm\" href=\"#\">Small Anchor</a>\n    </div>\n  </div>\n  `,\n})"
                },
                {
                    "name": "Buttons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/link/link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonTemplate.bind({})"
                },
                {
                    "name": "ButtonTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/link/link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LinkDirective>",
                    "defaultValue": "(args: LinkDirective) => ({\n  props: args,\n  template: `\n  <div class=\"tw-p-2\" [ngClass]=\"{ 'tw-bg-transparent': linkType != 'contrast', 'tw-bg-primary-500': linkType === 'contrast' }\">\n    <button bitLink [linkType]=\"linkType\" class=\"tw-mb-2 tw-block\">Button</button>\n    <button bitLink [linkType]=\"linkType\" class=\"tw-mb-2 tw-block\">\n      <i class=\"bwi bwi-fw bwi-plus-circle\" aria-hidden=\"true\"></i>\n      Add Icon Button\n    </button>\n    <button bitLink [linkType]=\"linkType\" class=\"tw-mb-2 tw-block\">\n      Chevron Icon Button\n      <i class=\"bwi bwi-fw bwi-sm bwi-angle-down\" aria-hidden=\"true\"></i>\n    </button>\n    <button bitLink [linkType]=\"linkType\" class=\"tw-text-sm tw-block\">Small Button</button>\n  </div>\n  `,\n})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/link/link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DisabledTemplate.bind({})"
                },
                {
                    "name": "DisabledTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/link/link.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <button bitLink disabled linkType=\"primary\" class=\"tw-mr-2\">Primary</button>\n    <button bitLink disabled linkType=\"secondary\" class=\"tw-mr-2\">Secondary</button>\n    <div class=\"tw-bg-primary-500 tw-p-2 tw-inline-block\">\n      <button bitLink disabled linkType=\"contrast\" class=\"tw-mr-2\">Contrast</button>\n    </div>\n  `,\n})"
                }
            ],
            "src/avatar/avatar.stories.ts": [
                {
                    "name": "Border",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ColorByID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ColorByText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LightBackground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "(args: AvatarComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/form-field/form-field.stories.ts": [
                {
                    "name": "ButtonGroupTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput placeholder=\"Placeholder\" />\n      <button bitSuffix bitButton>\n        <i aria-hidden=\"true\" class=\"bwi bwi-lg bwi-eye\"></i>\n      </button>\n      <button bitSuffix bitButton>\n        <i aria-hidden=\"true\" class=\"bwi bwi-lg bwi-clone\"></i>\n      </button>\n    </bit-form-field>\n  `,\n})"
                },
                {
                    "name": "ButtonInputGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonGroupTemplate.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultFormObj",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "fb.group({\n  name: [\"\", [Validators.required]],\n  email: [\"\", [Validators.required, Validators.email, forbiddenNameValidator(/bit/i)]],\n})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DisabledTemplate.bind({})"
                },
                {
                    "name": "DisabledButtonInputGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DisabledButtonInputGroupTemplate.bind({})"
                },
                {
                    "name": "DisabledButtonInputGroupTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(\n  args: BitFormFieldComponent\n) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput placeholder=\"Placeholder\" disabled />\n      <button bitSuffix bitButton disabled>\n        <i aria-hidden=\"true\" class=\"bwi bwi-lg bwi-eye\"></i>\n      </button>\n      <button bitSuffix bitButton>\n        <i aria-hidden=\"true\" class=\"bwi bwi-lg bwi-clone\"></i>\n      </button>\n    </bit-form-field>\n  `,\n})"
                },
                {
                    "name": "DisabledTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput placeholder=\"Placeholder\" disabled />\n    </bit-form-field>\n  `,\n})"
                },
                {
                    "name": "fb",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new UntypedFormBuilder()"
                },
                {
                    "name": "formObj",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "fb.group({\n  test: [\"\"],\n  required: [\"\", [Validators.required]],\n})"
                },
                {
                    "name": "GroupTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput placeholder=\"Placeholder\" />\n      <span bitPrefix>$</span>\n      <span bitSuffix>USD</span>\n    </bit-form-field>\n  `,\n})"
                },
                {
                    "name": "Hint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "HintTemplate.bind({})"
                },
                {
                    "name": "HintTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: {\n    formObj: formObj,\n    ...args,\n  },\n  template: `\n    <bit-form-field [formGroup]=\"formObj\">\n      <bit-label>FormControl</bit-label>\n      <input bitInput formControlName=\"required\" placeholder=\"Placeholder\" />\n      <bit-hint>Long hint text</bit-hint>\n    </bit-form-field>\n  `,\n})"
                },
                {
                    "name": "InputGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "GroupTemplate.bind({})"
                },
                {
                    "name": "Required",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "RequiredTemplate.bind({})"
                },
                {
                    "name": "RequiredTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: {\n    formObj: formObj,\n    ...args,\n  },\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <input bitInput required placeholder=\"Placeholder\" />\n    </bit-form-field>\n\n    <bit-form-field [formGroup]=\"formObj\">\n      <bit-label>FormControl</bit-label>\n      <input bitInput formControlName=\"required\" placeholder=\"Placeholder\" />\n    </bit-form-field>\n  `,\n})"
                },
                {
                    "name": "Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SelectTemplate.bind({})"
                },
                {
                    "name": "SelectTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Label</bit-label>\n      <select bitInput>\n        <option>Select</option>\n        <option>Other</option>\n      </select>\n    </bit-form-field>\n  `,\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: {\n    formObj: defaultFormObj,\n    submit: submit,\n    ...args,\n  },\n  template: `\n    <form [formGroup]=\"formObj\" (ngSubmit)=\"submit()\">\n      <bit-form-field>\n        <bit-label>Name</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n\n      <bit-form-field>\n        <bit-label>Email</bit-label>\n        <input bitInput formControlName=\"email\" />\n      </bit-form-field>\n\n      <button type=\"submit\" bitButton buttonType=\"primary\">Submit</button>\n    </form>\n  `,\n})"
                },
                {
                    "name": "Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TextareaTemplate.bind({})"
                },
                {
                    "name": "TextareaTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/form-field.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: args,\n  template: `\n    <bit-form-field>\n      <bit-label>Textarea</bit-label>\n      <textarea bitInput rows=\"4\"></textarea>\n    </bit-form-field>\n  `,\n})"
                }
            ],
            "src/button/button.component.ts": [
                {
                    "name": "buttonStyles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<ButtonTypes, string[]>",
                    "defaultValue": "{\n  primary: [\n    \"tw-border-primary-500\",\n    \"tw-bg-primary-500\",\n    \"!tw-text-contrast\",\n    \"hover:tw-bg-primary-700\",\n    \"hover:tw-border-primary-700\",\n    \"disabled:tw-bg-primary-500/60\",\n    \"disabled:tw-border-primary-500/60\",\n    \"disabled:!tw-text-contrast/60\",\n    \"disabled:tw-bg-clip-padding\",\n  ],\n  secondary: [\n    \"tw-bg-transparent\",\n    \"tw-border-text-muted\",\n    \"!tw-text-muted\",\n    \"hover:tw-bg-secondary-500\",\n    \"hover:tw-border-secondary-500\",\n    \"hover:!tw-text-contrast\",\n    \"disabled:tw-bg-transparent\",\n    \"disabled:tw-border-text-muted/60\",\n    \"disabled:!tw-text-muted/60\",\n  ],\n  danger: [\n    \"tw-bg-transparent\",\n    \"tw-border-danger-500\",\n    \"!tw-text-danger\",\n    \"hover:tw-bg-danger-500\",\n    \"hover:tw-border-danger-500\",\n    \"hover:!tw-text-contrast\",\n    \"disabled:tw-bg-transparent\",\n    \"disabled:tw-border-danger-500/60\",\n    \"disabled:!tw-text-danger/60\",\n  ],\n}"
                }
            ],
            "src/icon-button/icon-button.stories.ts": [
                {
                    "name": "buttonTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconButtonType[]",
                    "defaultValue": "[\n  \"contrast\",\n  \"main\",\n  \"muted\",\n  \"primary\",\n  \"secondary\",\n  \"danger\",\n]"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitIconButtonComponent>",
                    "defaultValue": "(args: BitIconButtonComponent) => ({\n  props: { ...args, buttonTypes },\n  template: `\n  <table class=\"tw-border-spacing-2 tw-text-center tw-text-main\">\n    <thead>\n      <tr>\n        <td></td>\n        <td *ngFor=\"let buttonType of buttonTypes\" class=\"tw-capitalize tw-font-bold tw-p-4\"\n          [class.tw-text-contrast]=\"buttonType === 'contrast'\"\n          [class.tw-bg-primary-500]=\"buttonType === 'contrast'\">{{buttonType}}</td>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr>\n        <td class=\"tw-font-bold tw-p-4 tw-text-left\">Default</td>\n          <td *ngFor=\"let buttonType of buttonTypes\" class=\"tw-p-2\" [class.tw-bg-primary-500]=\"buttonType === 'contrast'\">\n            <button\n              [bitIconButton]=\"bitIconButton\"\n              [buttonType]=\"buttonType\"\n              [size]=\"size\"\n              title=\"Example icon button\"\n              aria-label=\"Example icon button\"></button>\n          </td>\n      </tr>\n\n      <tr>\n        <td class=\"tw-font-bold tw-p-4 tw-text-left\">Disabled</td>\n          <td *ngFor=\"let buttonType of buttonTypes\" class=\"tw-p-2\" [class.tw-bg-primary-500]=\"buttonType === 'contrast'\">\n            <button\n              [bitIconButton]=\"bitIconButton\"\n              [buttonType]=\"buttonType\"\n              [size]=\"size\"\n              disabled\n              title=\"Example icon button\"\n              aria-label=\"Example icon button\"></button>\n          </td>\n      </tr>\n\n      <tr>\n        <td class=\"tw-font-bold tw-p-4 tw-text-left\">Loading</td>\n          <td *ngFor=\"let buttonType of buttonTypes\" class=\"tw-p-2\" [class.tw-bg-primary-500]=\"buttonType === 'contrast'\">\n            <button\n              [bitIconButton]=\"bitIconButton\"\n              [buttonType]=\"buttonType\"\n              [size]=\"size\"\n              loading=\"true\"\n              title=\"Example icon button\"\n              aria-label=\"Example icon button\"></button>\n          </td>\n      </tr>\n    </tbody>\n  </table>\n  `,\n})"
                }
            ],
            "src/menu/menu.stories.ts": [
                {
                    "name": "ClosedMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateWithButton.bind({})"
                },
                {
                    "name": "OpenMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MenuTriggerForDirective>",
                    "defaultValue": "(args: MenuTriggerForDirective) => ({\n  props: args,\n  template: `\n    <bit-menu #myMenu=\"menuComponent\">\n      <a href=\"#\" bitMenuItem>Anchor link</a>\n      <a href=\"#\" bitMenuItem>Another link</a>\n      <button type=\"button\" bitMenuItem>Button</button>\n      <bit-menu-divider></bit-menu-divider>\n      <button type=\"button\" bitMenuItem>Button after divider</button>\n    </bit-menu>\n\n    <div class=\"tw-h-40\">\n      <div class=\"cdk-overlay-pane bit-menu-panel\">\n        <ng-container *ngTemplateOutlet=\"myMenu.templateRef\"></ng-container>\n      </div>\n    </div>\n    `,\n})"
                },
                {
                    "name": "TemplateWithButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/menu/menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MenuTriggerForDirective>",
                    "defaultValue": "(args: MenuTriggerForDirective) => ({\n  props: args,\n  template: `\n    <div class=\"tw-h-40\">\n      <button bitButton buttonType=\"secondary\" [bitMenuTriggerFor]=\"myMenu\">Open menu</button>\n    </div>\n\n    <bit-menu #myMenu>\n      <a href=\"#\" bitMenuItem>Anchor link</a>\n      <a href=\"#\" bitMenuItem>Another link</a>\n      <button type=\"button\" bitMenuItem>Button</button>\n      <bit-menu-divider></bit-menu-divider>\n      <button type=\"button\" bitMenuItem>Button after divider</button>\n    </bit-menu>`,\n})"
                }
            ],
            "src/color-password/color-password.stories.ts": [
                {
                    "name": "ColorPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/color-password/color-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ColorPasswordCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/color-password/color-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "examplePassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/color-password/color-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"Wq$Jk😀7jDX#rS5Sdi!z\""
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/color-password/color-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ColorPasswordComponent>",
                    "defaultValue": "(args: ColorPasswordComponent) => ({\n  props: args,\n  template: `\n  <bit-color-password class=\"tw-text-base\" [password]=\"password\" [showCount]=\"showCount\"></bit-color-password>\n  `,\n})"
                },
                {
                    "name": "WrappedColorPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/color-password/color-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "WrappedTemplate.bind({})"
                },
                {
                    "name": "WrappedColorPasswordCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/color-password/color-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "WrappedTemplate.bind({})"
                },
                {
                    "name": "WrappedTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/color-password/color-password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ColorPasswordComponent>",
                    "defaultValue": "(args: ColorPasswordComponent) => ({\n  props: args,\n  template: `\n  <div class=\"tw-max-w-32\">\n    <bit-color-password class=\"tw-text-base\" [password]=\"password\" [showCount]=\"showCount\"></bit-color-password>\n  </div>\n  `,\n})"
                }
            ],
            "src/tabs/tabs.stories.ts": [
                {
                    "name": "ContentTabGroupTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabGroupComponent>",
                    "defaultValue": "(args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Main Content Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"First Tab\">First Tab Content</bit-tab>\n        <bit-tab label=\"Second Tab\">Second Tab Content</bit-tab>\n        <bit-tab>\n          <ng-template bitTabLabel>\n            <i class=\"bwi bwi-search tw-pr-1\"></i> Template Label\n          </ng-template>\n          Template Label Content\n        </bit-tab>\n        <bit-tab [disabled]=\"true\" label=\"Disabled\">\n          Disabled Content\n        </bit-tab>\n    </bit-tab-group>\n  `,\n})"
                },
                {
                    "name": "ContentTabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ContentTabGroupTemplate.bind({})"
                },
                {
                    "name": "KeyboardNavigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "KeyboardNavTabGroupTemplate.bind({})"
                },
                {
                    "name": "KeyboardNavTabGroupTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabGroupComponent>",
                    "defaultValue": "(args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Keyboard Navigation Tabs\" class=\"tw-text-main\">\n        <bit-tab label=\"Form Tab\">\n          <p>\n            You can navigate through all tab labels, form inputs, and the button that is outside the tab group via\n            the keyboard.\n          </p>\n          <bit-form-field>\n            <bit-label>First Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>Second Input</bit-label>\n            <input type=\"text\" bitInput />\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"No Focusable Content Tab\" [contentTabIndex]=\"0\">\n          <p>This tab has no focusable content, but the panel should still be focusable</p>\n        </bit-tab>\n    </bit-tab-group>\n    <button bitButton buttonType=\"primary\" class=\"tw-mt-5\">External Button</button>\n`,\n})"
                },
                {
                    "name": "NavigationTabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "NavTabGroupTemplate.bind({})"
                },
                {
                    "name": "NavTabGroupTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabGroupComponent>",
                    "defaultValue": "(args: TabGroupComponent) => ({\n  props: args,\n  template: `\n    <bit-tab-nav-bar label=\"Main\">\n      <bit-tab-link [route]=\"['active']\">Active</bit-tab-link>\n      <bit-tab-link [route]=\"['item-2']\">Item 2</bit-tab-link>\n      <bit-tab-link [route]=\"['item-3']\">Item 3</bit-tab-link>\n      <bit-tab-link [route]=\"['disable']\" [disabled]=\"true\">Disabled</bit-tab-link>\n    </bit-tab-nav-bar>\n    <div class=\"tw-bg-transparent tw-text-semibold tw-text-center tw-text-main tw-py-10\">\n      <router-outlet></router-outlet>\n    </div>\n  `,\n})"
                },
                {
                    "name": "PreserveContentTabGroupTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabGroupComponent>",
                    "defaultValue": "(args: any) => ({\n  props: args,\n  template: `\n    <bit-tab-group label=\"Preserve Content Tabs\" [preserveContent]=\"true\" class=\"tw-text-main\">\n        <bit-tab label=\"Text Tab\">\n          <p>\n            Play the video in the other tab and switch back to hear the video is still playing.\n          </p>\n        </bit-tab>\n        <bit-tab label=\"Video Tab\">\n          <iframe\n              width=\"560\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/H0-yWbe5XG4\"\n             allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n             allowfullscreen></iframe>\n        </bit-tab>\n    </bit-tab-group>\n  `,\n})"
                },
                {
                    "name": "PreserveContentTabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PreserveContentTabGroupTemplate.bind({})"
                }
            ],
            "src/test.setup.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context(\"./\", true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.setup.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/dialog/simple-dialog/simple-dialog.stories.ts": [
                {
                    "name": "CustomIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateWithIcon.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ScrollingContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateScroll.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SimpleDialogComponent>",
                    "defaultValue": "(args: SimpleDialogComponent) => ({\n  props: args,\n  template: `\n  <bit-simple-dialog>\n      <span bitDialogTitle>Alert Dialog</span>\n      <span bitDialogContent>Message Content</span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\">Yes</button>\n        <button bitButton buttonType=\"secondary\">No</button>\n      </div>\n  </bit-simple-dialog>\n  `,\n})"
                },
                {
                    "name": "TemplateScroll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SimpleDialogComponent>",
                    "defaultValue": "(args: SimpleDialogComponent) => ({\n  props: args,\n  template: `\n  <bit-simple-dialog>\n      <span bitDialogTitle>Alert Dialog</span>\n      <span bitDialogContent>\n        Message Content\n        Message text goes here.<br>\n        <ng-container *ngFor=\"let _ of [].constructor(100)\">\n          repeating lines of characters <br>\n        </ng-container>\n        end of sequence!\n      </span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\">Yes</button>\n        <button bitButton buttonType=\"secondary\">No</button>\n      </div>\n  </bit-simple-dialog>\n  `,\n})"
                },
                {
                    "name": "TemplateWithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SimpleDialogComponent>",
                    "defaultValue": "(args: SimpleDialogComponent) => ({\n  props: args,\n  template: `\n  <bit-simple-dialog>\n      <i bit-dialog-icon class=\"bwi bwi-star tw-text-3xl tw-text-success\" aria-hidden=\"true\"></i>\n      <span bitDialogTitle>Premium Subscription Available</span>\n      <span bitDialogContent> Message Content</span>\n      <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n        <button bitButton buttonType=\"primary\">Yes</button>\n        <button bitButton buttonType=\"secondary\">No</button>\n      </div>\n  </bit-simple-dialog>\n  `,\n})"
                }
            ],
            "src/banner/banner.stories.ts": [
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/banner/banner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/banner/banner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Premium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/banner/banner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/banner/banner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BannerComponent>",
                    "defaultValue": "(args: BannerComponent) => ({\n  props: args,\n  template: `\n    <bit-banner [bannerType]=\"bannerType\" (onClose)=\"onClose($event)\">\n        Content Really Long Text Lorem Ipsum Ipsum Ipsum\n        <button>Button</button>\n    </bit-banner>\n  `,\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/banner/banner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/badge/badge.stories.ts": [
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BadgeDirective>",
                    "defaultValue": "(args: BadgeDirective) => ({\n  props: args,\n  template: `\n    <span class=\"tw-text-main\">Span </span><span bitBadge [badgeType]=\"badgeType\">Badge</span>\n    <br><br>\n    <span class=\"tw-text-main\">Link </span><a href=\"#\" bitBadge [badgeType]=\"badgeType\">Badge</a>\n    <br><br>\n    <span class=\"tw-text-main\">Button </span><button bitBadge [badgeType]=\"badgeType\">Badge</button>\n  `,\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/callout/callout.stories.ts": [
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/callout/callout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/callout/callout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/callout/callout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/callout/callout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CalloutComponent>",
                    "defaultValue": "(args: CalloutComponent) => ({\n  props: args,\n  template: `\n    <bit-callout [type]=\"type\" [title]=\"title\">Content</bit-callout>\n  `,\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/callout/callout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/dialog/dialog.service.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog.service.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog.service.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StoryDialogComponent>",
                    "defaultValue": "(args: StoryDialogComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/dialog/simple-dialog.service.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/simple-dialog.service.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/simple-dialog.service.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StoryDialogComponent>",
                    "defaultValue": "(args: StoryDialogComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/form-field/error-summary.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/error-summary.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "fb",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/error-summary.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new UntypedFormBuilder()"
                },
                {
                    "name": "formObj",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/error-summary.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "fb.group({\n  name: [\"\", [Validators.required]],\n  email: [\"\", [Validators.required, Validators.email]],\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/error-summary.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitFormFieldComponent>",
                    "defaultValue": "(args: BitFormFieldComponent) => ({\n  props: {\n    formObj: formObj,\n    submit: submit,\n    ...args,\n  },\n  template: `\n    <form [formGroup]=\"formObj\" (ngSubmit)=\"submit()\">\n      <bit-form-field>\n        <bit-label>Name</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n\n      <bit-form-field>\n        <bit-label>Email</bit-label>\n        <input bitInput formControlName=\"email\" />\n      </bit-form-field>\n\n      <button type=\"submit\" bitButton buttonType=\"primary\">Submit</button>\n      <bit-error-summary [formGroup]=\"formObj\"></bit-error-summary>\n    </form>\n  `,\n})"
                }
            ],
            "src/table/table.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>Header 1</th>\n          <th bitCell>Header 2</th>\n          <th bitCell>Header 3</th>\n        </tr>\n      </ng-container>\n      <ng-container body>\n        <tr bitRow [alignContent]=\"alignRowContent\">\n          <td bitCell>Cell 1</td>\n          <td bitCell>Cell 2 <br> Multiline Cell</td>\n          <td bitCell>Cell 3</td>\n        </tr>\n        <tr bitRow [alignContent]=\"alignRowContent\">\n          <td bitCell>Cell 4</td>\n          <td bitCell>Cell 5</td>\n          <td bitCell>Cell 6</td>\n        </tr>\n        <tr bitRow [alignContent]=\"alignRowContent\">\n          <td bitCell>Cell 7 <br> Multiline Cell</td>\n          <td bitCell>Cell 8</td>\n          <td bitCell>Cell 9</td>\n        </tr>\n      </ng-container>\n    </bit-table>\n\n    `,\n})"
                }
            ],
            "src/toggle-group/toggle-group.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/toggle-group/toggle-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/toggle-group/toggle-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ToggleGroupComponent>",
                    "defaultValue": "(args: ToggleGroupComponent) => ({\n  props: args,\n  template: `\n    <bit-toggle-group [(selected)]=\"selected\" aria-label=\"People list filter\">\n      <bit-toggle value=\"all\">\n        All <span bitBadge badgeType=\"info\">3</span>\n      </bit-toggle>\n\n      <bit-toggle value=\"invited\">\n        Invited\n      </bit-toggle>\n\n      <bit-toggle value=\"accepted\">\n        Accepted <span bitBadge badgeType=\"info\">2</span>\n      </bit-toggle>\n\n      <bit-toggle value=\"deactivated\">\n        Deactivated\n      </bit-toggle>\n    </bit-toggle-group>\n  `,\n})"
                }
            ],
            "src/dialog/dialog/dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ScrollingContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateScrolling.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "TabContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTabbed.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DialogComponent>",
                    "defaultValue": "(args: DialogComponent) => ({\n  props: args,\n  template: `\n  <bit-dialog [dialogSize]=\"dialogSize\" [disablePadding]=\"disablePadding\">\n    <span bitDialogTitle>{{title}}</span>\n    <span bitDialogContent>Dialog body text goes here.</span>\n    <div bitDialogFooter class=\"tw-flex tw-items-center tw-flex-row tw-gap-2\">\n      <button bitButton buttonType=\"primary\">Save</button>\n      <button bitButton buttonType=\"secondary\">Cancel</button>\n      <button\n        class=\"tw-ml-auto\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        size=\"default\"\n        title=\"Delete\"\n        aria-label=\"Delete\"></button>\n    </div>\n  </bit-dialog>\n  `,\n})"
                },
                {
                    "name": "TemplateScrolling",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DialogComponent>",
                    "defaultValue": "(args: DialogComponent) => ({\n  props: args,\n  template: `\n  <bit-dialog [dialogSize]=\"dialogSize\" [disablePadding]=\"disablePadding\">\n  <span bitDialogTitle>Scrolling Example</span>\n  <span bitDialogContent>\n    Dialog body text goes here.<br>\n    <ng-container *ngFor=\"let _ of [].constructor(100)\">\n      repeating lines of characters <br>\n    </ng-container>\n    end of sequence!\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n    <button bitButton buttonType=\"primary\">Save</button>\n    <button bitButton buttonType=\"secondary\">Cancel</button>\n  </div>\n  </bit-dialog>\n  `,\n})"
                },
                {
                    "name": "TemplateTabbed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DialogComponent>",
                    "defaultValue": "(args: DialogComponent) => ({\n  props: args,\n  template: `\n  <bit-dialog [dialogSize]=\"dialogSize\" [disablePadding]=\"disablePadding\">\n  <span bitDialogTitle>Tab Content Example</span>\n  <span bitDialogContent>\n    <bit-tab-group>\n        <bit-tab label=\"First Tab\">First Tab Content</bit-tab>\n        <bit-tab label=\"Second Tab\">Second Tab Content</bit-tab>\n        <bit-tab label=\"Third Tab\">Third Tab Content</bit-tab>\n    </bit-tab-group>\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n    <button bitButton buttonType=\"primary\">Save</button>\n    <button bitButton buttonType=\"secondary\">Cancel</button>\n  </div>\n  </bit-dialog>\n  `,\n})"
                }
            ],
            "src/callout/callout.component.ts": [
                {
                    "name": "defaultI18n",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/callout/callout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<Record<CalloutTypes, string>>",
                    "defaultValue": "{\n  warning: \"warning\",\n  danger: \"error\",\n}"
                },
                {
                    "name": "defaultIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/callout/callout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<CalloutTypes, string>",
                    "defaultValue": "{\n  success: \"bwi-check\",\n  info: \"bwi-info-circle\",\n  warning: \"bwi-exclamation-triangle\",\n  danger: \"bwi-error\",\n}"
                }
            ],
            "src/banner/banner.component.ts": [
                {
                    "name": "defaultIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/banner/banner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<BannerTypes, string>",
                    "defaultValue": "{\n  premium: \"bwi-star\",\n  info: \"bwi-info-circle\",\n  warning: \"bwi-exclamation-triangle\",\n  danger: \"bwi-error\",\n}"
                }
            ],
            "src/badge/badge.directive.ts": [
                {
                    "name": "hoverStyles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<BadgeTypes, string[]>",
                    "defaultValue": "{\n  primary: [\"hover:tw-bg-primary-700\"],\n  secondary: [\"hover:tw-bg-secondary-700\"],\n  success: [\"hover:tw-bg-success-700\"],\n  danger: [\"hover:tw-bg-danger-700\"],\n  warning: [\"hover:tw-bg-warning-700\"],\n  info: [\"hover:tw-bg-info-700\"],\n}"
                },
                {
                    "name": "styles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/badge/badge.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<BadgeTypes, string[]>",
                    "defaultValue": "{\n  primary: [\"tw-bg-primary-500\"],\n  secondary: [\"tw-bg-text-muted\"],\n  success: [\"tw-bg-success-500\"],\n  danger: [\"tw-bg-danger-500\"],\n  warning: [\"tw-bg-warning-500\"],\n  info: [\"tw-bg-info-500\"],\n}"
                }
            ],
            "src/link/link.directive.ts": [
                {
                    "name": "linkStyles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/link/link.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<LinkType, string[]>",
                    "defaultValue": "{\n  primary: [\n    \"!tw-text-primary-500\",\n    \"hover:!tw-text-primary-500\",\n    \"focus-visible:tw-ring-primary-700\",\n    \"disabled:!tw-text-primary-500/60\",\n  ],\n  secondary: [\n    \"!tw-text-main\",\n    \"hover:!tw-text-main\",\n    \"focus-visible:tw-ring-primary-700\",\n    \"disabled:!tw-text-muted/60\",\n  ],\n  contrast: [\n    \"!tw-text-contrast\",\n    \"hover:!tw-text-contrast\",\n    \"focus-visible:tw-ring-text-contrast\",\n    \"disabled:!tw-text-contrast/60\",\n  ],\n}"
                }
            ],
            "src/form-field/error.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/error.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/form-field/hint.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/hint.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/input/input.directive.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/input/input.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/multi-select/multi-select.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/multi-select/multi-select.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/toggle-group/toggle-group.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/toggle-group/toggle-group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/toggle-group/toggle.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/toggle-group/toggle.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/dialog/directives/dialog-title-container.directive.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/dialog/directives/dialog-title-container.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/tabs/tab-group/tab-group.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tabs/tab-group/tab-group.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Used to generate unique ID's for each tab component",
                    "description": "<p>Used to generate unique ID&#39;s for each tab component</p>\n"
                }
            ],
            "src/async-actions/in-forms.stories.ts": [
                {
                    "name": "ObservableTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/in-forms.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PromiseExampleComponent>",
                    "defaultValue": "(args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-observable-example></app-observable-example>`,\n})"
                },
                {
                    "name": "PromiseTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/in-forms.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PromiseExampleComponent>",
                    "defaultValue": "(args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/in-forms.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n  <form [formGroup]=\"formObj\" [bitSubmit]=\"submit\">\n    <bit-form-field>\n      <bit-label>Name</bit-label>\n      <input bitInput formControlName=\"name\" />\n    </bit-form-field>\n\n    <bit-form-field>\n      <bit-label>Email</bit-label>\n      <input bitInput formControlName=\"email\" />\n    </bit-form-field>\n\n    <button class=\"tw-mr-2\" type=\"submit\" buttonType=\"primary\" bitButton bitFormButton>Submit</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitButton bitFormButton>Cancel</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"danger\" bitButton bitFormButton [bitAction]=\"delete\">Delete</button>\n    <button class=\"tw-mr-2\" type=\"button\" buttonType=\"secondary\" bitIconButton=\"bwi-star\" bitFormButton [bitAction]=\"delete\">Delete</button>\n  </form>`"
                },
                {
                    "name": "UsingObservable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/in-forms.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ObservableTemplate.bind({})"
                },
                {
                    "name": "UsingPromise",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/in-forms.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PromiseTemplate.bind({})"
                }
            ],
            "src/async-actions/standalone.stories.ts": [
                {
                    "name": "ObservableTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/standalone.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ObservableExampleComponent>",
                    "defaultValue": "(\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-observable-example></app-observable-example>`,\n})"
                },
                {
                    "name": "PromiseTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/standalone.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PromiseExampleComponent>",
                    "defaultValue": "(args: PromiseExampleComponent) => ({\n  props: args,\n  template: `<app-promise-example></app-promise-example>`,\n})"
                },
                {
                    "name": "RejectedPromise",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/standalone.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "RejectedPromiseTemplate.bind({})"
                },
                {
                    "name": "RejectedPromiseTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/standalone.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ObservableExampleComponent>",
                    "defaultValue": "(\n  args: ObservableExampleComponent\n) => ({\n  template: `<app-rejected-promise-example></app-rejected-promise-example>`,\n})"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/standalone.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n  <button bitButton buttonType=\"primary\" [bitAction]=\"action\" class=\"tw-mr-2\">\n    Perform action\n  </button>\n  <button bitIconButton=\"bwi-trash\" buttonType=\"danger\" [bitAction]=\"action\"></button>`"
                },
                {
                    "name": "UsingObservable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/standalone.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ObservableTemplate.bind({})"
                },
                {
                    "name": "UsingPromise",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/async-actions/standalone.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PromiseTemplate.bind({})"
                }
            ],
            "src/form-field/prefix.directive.ts": [
                {
                    "name": "PrefixClasses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/form-field/prefix.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  \"tw-block\",\n  \"tw-px-3\",\n  \"tw-py-1.5\",\n  \"tw-bg-background-alt\",\n  \"tw-border\",\n  \"tw-border-solid\",\n  \"tw-border-secondary-500\",\n  \"tw-text-muted\",\n  \"tw-rounded-none\",\n  \"disabled:!tw-text-muted\",\n  \"disabled:tw-border-secondary-500\",\n]"
                }
            ],
            "src/icon/icon.stories.ts": [
                {
                    "name": "ReportExposedPasswords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BitIconComponent>",
                    "defaultValue": "(args: BitIconComponent) => ({\n  props: args,\n  template: `\n  <div class=\"tw-bg-primary-500 tw-p-5\">\n    <bit-icon [icon]=\"icon\" class=\"tw-text-primary-300\"></bit-icon>\n  </div>\n  `,\n})"
                },
                {
                    "name": "UnknownIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/icon/icons/search.ts": [
                {
                    "name": "Search",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon/icons/search.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "svgIcon`\n<svg width=\"120\" height=\"120\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g opacity=\".49\">\n    <path class=\"tw-fill-secondary-300\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M40.36 73.256a30.004 30.004 0 0 0 10.346 1.826c16.282 0 29.482-12.912 29.482-28.84 0-.384-.008-.766-.023-1.145h28.726v39.57H40.36v-11.41Z\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M21.546 46.241c0 15.929 13.2 28.841 29.482 28.841S80.51 62.17 80.51 46.241c0-15.928-13.2-28.841-29.482-28.841S21.546 30.313 21.546 46.241Z\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n    <path class=\"tw-fill-secondary-500\" d=\"M35.36 70.595a1.2 1.2 0 0 0-2.4 0h2.4Zm77.475-30.356a2.343 2.343 0 0 1 2.365 2.33h2.4c0-2.593-2.107-4.73-4.765-4.73v2.4Zm2.365 2.33v46.047h2.4V42.57h-2.4Zm0 46.047c0 1.293-1.058 2.33-2.365 2.33v2.4c2.59 0 4.765-2.069 4.765-4.73h-2.4Zm-2.365 2.33h-75.11v2.4h75.11v-2.4Zm-75.11 0a2.343 2.343 0 0 1-2.365-2.33h-2.4c0 2.594 2.107 4.73 4.766 4.73v-2.4Zm-2.365-2.33v-18.02h-2.4v18.02h2.4Zm44.508-48.377h32.967v-2.4H79.868v2.4Z\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M79.907 45.287h29.114v39.57H40.487V73.051\" stroke-width=\"2\" stroke-linejoin=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M57.356 102.56h35.849\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M68.954 92.147v10.413m11.599-10.413v10.413\" stroke-width=\"4\" stroke-linejoin=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"m27.44 64.945-4.51 4.51L5.72 86.663a3 3 0 0 0 0 4.243l1.238 1.238a3 3 0 0 0 4.243 0L28.41 74.936l4.51-4.51\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M101.293 53.154H85.178m16.115 6.043H90.214m-5.036 0h-7.553m23.668 6.043h-7.05m-5.54 0h-15.61m28.2 6.042H85.178m-5.538 0h-8.562m30.215 6.043H78.632m-5.539 0H60m-5.54 0h-8.057\" stroke-width=\"2\" stroke-linecap=\"round\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M29.164 33.01h41.529a2.4 2.4 0 0 1 2.4 2.4v6.28a2.4 2.4 0 0 1-2.4 2.4h-41.53a2.4 2.4 0 0 1-2.4-2.4v-6.28a2.4 2.4 0 0 1 2.4-2.4Z\" stroke-width=\"4\" />\n    <path class=\"tw-stroke-secondary-500\" d=\"M22.735 54.16h34.361a2.4 2.4 0 0 1 2.4 2.4v6.28a2.4 2.4 0 0 1-2.4 2.4H28.778m50.358-11.08h-6.161a2.4 2.4 0 0 0-2.4 2.4v6.414a2.266 2.266 0 0 0 2.266 2.265\" stroke-width=\"4\" stroke-linecap=\"round\" />\n  </g>\n</svg>\n`"
                }
            ],
            "src/avatar/avatar.component.ts": [
                {
                    "name": "SizeClasses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<SizeTypes, string[]>",
                    "defaultValue": "{\n  large: [\"tw-h-16\", \"tw-w-16\"],\n  default: [\"tw-h-12\", \"tw-w-12\"],\n  small: [\"tw-h-7\", \"tw-w-7\"],\n}"
                }
            ],
            "src/icon-button/icon-button.component.ts": [
                {
                    "name": "sizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon-button/icon-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<IconButtonSize, string[]>",
                    "defaultValue": "{\n  default: [\"tw-px-2.5\", \"tw-py-1.5\"],\n  small: [\"tw-leading-none\", \"tw-text-base\", \"tw-p-1\"],\n}"
                },
                {
                    "name": "styles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/icon-button/icon-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<IconButtonType, string[]>",
                    "defaultValue": "{\n  contrast: [\n    \"tw-bg-transparent\",\n    \"!tw-text-contrast\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-text-contrast\",\n    \"focus-visible:before:tw-ring-text-contrast\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  main: [\n    \"tw-bg-transparent\",\n    \"!tw-text-main\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-text-main\",\n    \"focus-visible:before:tw-ring-text-main\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  muted: [\n    \"tw-bg-transparent\",\n    \"!tw-text-muted\",\n    \"tw-border-transparent\",\n    \"hover:tw-bg-transparent-hover\",\n    \"hover:tw-border-primary-700\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-transparent\",\n    \"disabled:hover:tw-bg-transparent\",\n  ],\n  primary: [\n    \"tw-bg-primary-500\",\n    \"!tw-text-contrast\",\n    \"tw-border-primary-500\",\n    \"hover:tw-bg-primary-700\",\n    \"hover:tw-border-primary-700\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-primary-500\",\n    \"disabled:hover:tw-bg-primary-500\",\n  ],\n  secondary: [\n    \"tw-bg-transparent\",\n    \"!tw-text-muted\",\n    \"tw-border-text-muted\",\n    \"hover:!tw-text-contrast\",\n    \"hover:tw-bg-text-muted\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-text-muted\",\n    \"disabled:hover:tw-bg-transparent\",\n    \"disabled:hover:!tw-text-muted\",\n    \"disabled:hover:tw-border-text-muted\",\n  ],\n  danger: [\n    \"tw-bg-transparent\",\n    \"!tw-text-danger\",\n    \"tw-border-danger-500\",\n    \"hover:!tw-text-contrast\",\n    \"hover:tw-bg-danger-500\",\n    \"focus-visible:before:tw-ring-primary-700\",\n    \"disabled:hover:tw-border-danger-500\",\n    \"disabled:hover:tw-bg-transparent\",\n    \"disabled:hover:!tw-text-danger\",\n    \"disabled:hover:tw-border-danger-500\",\n  ],\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/form-field/form-field.stories.ts": [
                {
                    "name": "forbiddenNameValidator",
                    "file": "src/form-field/form-field.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nameRe",
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "nameRe",
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "file": "src/form-field/form-field.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/utils/function-to-observable.ts": [
                {
                    "name": "functionToObservable",
                    "file": "src/utils/function-to-observable.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "func",
                            "type": "FunctionReturningAwaitable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<>",
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": "FunctionReturningAwaitable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/icon/icon.ts": [
                {
                    "name": "isIcon",
                    "file": "src/icon/icon.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "icon",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Icon",
                    "jsdoctags": [
                        {
                            "name": "icon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "svgIcon",
                    "file": "src/icon/icon.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "strings",
                            "type": "TemplateStringsArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "Icon",
                    "jsdoctags": [
                        {
                            "name": "strings",
                            "type": "TemplateStringsArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/form-field/error-summary.stories.ts": [
                {
                    "name": "submit",
                    "file": "src/form-field/error-summary.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/form-field/multi-select.stories.ts": [
                {
                    "name": "submit",
                    "file": "src/form-field/multi-select.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "formObj",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "formObj",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/color-password/color-password.component.ts": [
                {
                    "name": "CharacterType",
                    "childs": [
                        {
                            "name": "Letter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Emoji",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Special",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/color-password/color-password.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/badge/badge.directive.ts": [
                {
                    "name": "BadgeTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\"",
                    "file": "src/badge/badge.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/banner/banner.component.ts": [
                {
                    "name": "BannerTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"premium\" | \"info\" | \"warning\" | \"danger\"",
                    "file": "src/banner/banner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/button/button.component.ts": [
                {
                    "name": "ButtonTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"danger\"",
                    "file": "src/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/callout/callout.component.ts": [
                {
                    "name": "CalloutTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"info\" | \"warning\" | \"danger\"",
                    "file": "src/callout/callout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/utils/function-to-observable.ts": [
                {
                    "name": "FunctionReturningAwaitable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " |  | ",
                    "file": "src/utils/function-to-observable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/icon-button/icon-button.component.ts": [
                {
                    "name": "IconButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"small\"",
                    "file": "src/icon-button/icon-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "IconButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"contrast\" | \"main\" | \"muted\" | \"primary\" | \"secondary\" | \"danger\"",
                    "file": "src/icon-button/icon-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/link/link.directive.ts": [
                {
                    "name": "LinkType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"contrast\"",
                    "file": "src/link/link.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/multi-select/models/select-item-view.ts": [
                {
                    "name": "SelectItemView",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/multi-select/models/select-item-view.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ],
            "src/avatar/avatar.component.ts": [
                {
                    "name": "SizeTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"large\" | \"default\" | \"small\"",
                    "file": "src/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/bit-action.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BitActionDirective",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/bit-submit.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BitSubmitDirective",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/form-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BitFormButtonDirective",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/in-forms.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObservableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/in-forms.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "PromiseExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/in-forms.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ObservableTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/in-forms.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PromiseTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/in-forms.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/in-forms.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsingObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/in-forms.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsingPromise",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ObservableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "PromiseExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "RejectedPromiseExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ObservableTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PromiseTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RejectedPromise",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RejectedPromiseTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsingObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/async-actions/standalone.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsingPromise",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SizeClasses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Border",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorByID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorByText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LightBackground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BadgeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hoverStyles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "styles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/banner/banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/banner/banner.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/banner/banner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/banner/banner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/banner/banner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Premium",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/banner/banner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/banner/banner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonStyles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllStylesTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Block",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BlockTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledWithAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledWithAttributeTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/callout/callout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalloutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/callout/callout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultI18n",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/callout/callout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/callout/callout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/callout/callout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/callout/callout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/callout/callout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/callout/callout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/color-password/color-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/color-password/color-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/color-password/color-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorPasswordCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/color-password/color-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "examplePassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/color-password/color-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/color-password/color-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WrappedColorPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/color-password/color-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WrappedColorPasswordCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/color-password/color-password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WrappedTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog.service.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog.service.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryDialogContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog.service.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Animal",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog.service.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog.service.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ScrollingContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TabContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateScrolling",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTabbed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/directives/dialog-close.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DialogCloseDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/dialog/directives/dialog-title-container.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DialogTitleContainerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/dialog/directives/dialog-title-container.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog.service.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog.service.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryDialogContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog.service.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Animal",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog.service.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog.service.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog/simple-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog/simple-dialog.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IconDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ScrollingContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateScroll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/dialog/simple-dialog/simple-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateWithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/error-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BitErrorSummary",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/form-field/error-summary.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "submit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/error-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/error-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fb",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/error-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/error-summary.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BitErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/form-field/error.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field-control.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BitFormFieldControl",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BitFormFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "forbiddenNameValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "submit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonGroupTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonInputGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultFormObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledButtonInputGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledButtonInputGroupTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fb",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GroupTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Hint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HintTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Required",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RequiredTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SelectTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextareaTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/hint.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BitHintComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/form-field/hint.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/label.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BitLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "submit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Collections",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fb",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formObjFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Groups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Members",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MembersAndGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelectTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RemoveSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Standalone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StandaloneTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/prefix.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BitPrefixDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/form-field/prefix.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrefixClasses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/form-field/suffix.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BitSuffixDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/icon-button/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BitIconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/icon-button/icon-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon-button/icon-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "styles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BitIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ReportExposedPasswords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UnknownIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon/icon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicContentNotAllowedError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/icon/icon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/icon/icon.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon/icon.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "svgIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/icon/icons/search.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Search",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/input/input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BitInputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/input/input.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/link/link.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LinkDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/link/link.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "linkStyles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Anchors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AnchorTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Buttons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/link/link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/menu/menu-divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/menu/menu-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MenuItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/menu/menu-trigger-for.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MenuTriggerForDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClosedMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OpenMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/menu/menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateWithButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/multi-select/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 46,
                "coverageCount": "13/28",
                "status": "medium"
            },
            {
                "filePath": "src/multi-select/multi-select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/button-like.abstraction.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ButtonLikeAbstraction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/i18n.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "I18nPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/table/cell.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CellDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/table/row.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RowDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/shared/tab-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabHeaderComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/tabs/shared/tab-list-container.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabListContainerDirective",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/tabs/shared/tab-list-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabListItemDirective",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tab-group/tab-body.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tab-group/tab-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabGroupComponent",
                "coveragePercent": 31,
                "coverageCount": "7/22",
                "status": "medium"
            },
            {
                "filePath": "src/tabs/tab-group/tab-group.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BitTabChangeEvent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/tabs/tab-group/tab-group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/tabs/tab-group/tab-label.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabLabelDirective",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/tabs/tab-group/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tab-nav-bar/tab-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tab-nav-bar/tab-nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabNavBarComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActiveDummyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisabledDummyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemThreeDummyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemTwoDummyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentTabGroupTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentTabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KeyboardNavigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "KeyboardNavTabGroupTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NavigationTabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NavTabGroupTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PreserveContentTabGroupTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PreserveContentTabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.setup.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.setup.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/toggle-group/toggle-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/toggle-group/toggle-group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/toggle-group/toggle-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/toggle-group/toggle-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/toggle-group/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/toggle-group/toggle.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/function-to-observable.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "functionToObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/i18n-mock.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "I18nMockService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            }
        ]
    }
}